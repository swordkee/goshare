var Parser = require("binary-parser-encoder").Parser;
const stropt = n => {
	return {
		stripNull: true,
		length: n
	}
}

	exports.CThostFtdcDisseminationFieldParser = () => new Parser().skip(0).int16le('SequenceSeries').skip(2).int32le('SequenceNo');
exports.CThostFtdcDisseminationFieldInit = () => {return {SequenceSeries:0, SequenceNo:0, }};
exports.CThostFtdcReqUserLoginFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('Password', stropt(41)).string('UserProductInfo', stropt(11)).string('InterfaceProductInfo', stropt(11)).string('ProtocolInfo', stropt(11)).string('MacAddress', stropt(21)).string('OneTimePassword', stropt(41)).string('ClientIPAddress', stropt(16)).string('LoginRemark', stropt(36)).int32le('ClientIPPort');
exports.CThostFtdcReqUserLoginFieldInit = () => {return {TradingDay:'', BrokerID:'', UserID:'', Password:'', UserProductInfo:'', InterfaceProductInfo:'', ProtocolInfo:'', MacAddress:'', OneTimePassword:'', ClientIPAddress:'', LoginRemark:'', ClientIPPort:0, }};
exports.CThostFtdcRspUserLoginFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('LoginTime', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('SystemName', stropt(41)).skip(2).int32le('FrontID').int32le('SessionID').string('MaxOrderRef', stropt(13)).string('SHFETime', stropt(9)).string('DCETime', stropt(9)).string('CZCETime', stropt(9)).string('FFEXTime', stropt(9)).string('INETime', stropt(9)).skip(2);
exports.CThostFtdcRspUserLoginFieldInit = () => {return {TradingDay:'', LoginTime:'', BrokerID:'', UserID:'', SystemName:'', FrontID:0, SessionID:0, MaxOrderRef:'', SHFETime:'', DCETime:'', CZCETime:'', FFEXTime:'', INETime:'', }};
exports.CThostFtdcUserLogoutFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports.CThostFtdcUserLogoutFieldInit = () => {return {BrokerID:'', UserID:'', }};
exports.CThostFtdcForceUserLogoutFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports.CThostFtdcForceUserLogoutFieldInit = () => {return {BrokerID:'', UserID:'', }};
exports.CThostFtdcReqAuthenticateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('UserProductInfo', stropt(11)).string('AuthCode', stropt(17)).string('AppID', stropt(33));
exports.CThostFtdcReqAuthenticateFieldInit = () => {return {BrokerID:'', UserID:'', UserProductInfo:'', AuthCode:'', AppID:'', }};
exports.CThostFtdcRspAuthenticateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('UserProductInfo', stropt(11)).string('AppID', stropt(33)).string('AppType', stropt(1));
exports.CThostFtdcRspAuthenticateFieldInit = () => {return {BrokerID:'', UserID:'', UserProductInfo:'', AppID:'', AppType:'', }};
exports.CThostFtdcAuthenticationInfoFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('UserProductInfo', stropt(11)).string('AuthInfo', stropt(129)).skip(1).int32le('IsResult').string('AppID', stropt(33)).string('AppType', stropt(1)).skip(2);
exports.CThostFtdcAuthenticationInfoFieldInit = () => {return {BrokerID:'', UserID:'', UserProductInfo:'', AuthInfo:'', IsResult:0, AppID:'', AppType:'', }};
exports.CThostFtdcRspUserLogin2FieldParser = () => new Parser().string('TradingDay', stropt(9)).string('LoginTime', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('SystemName', stropt(41)).skip(2).int32le('FrontID').int32le('SessionID').string('MaxOrderRef', stropt(13)).string('SHFETime', stropt(9)).string('DCETime', stropt(9)).string('CZCETime', stropt(9)).string('FFEXTime', stropt(9)).string('INETime', stropt(9)).string('RandomString', stropt(17)).skip(1);
exports.CThostFtdcRspUserLogin2FieldInit = () => {return {TradingDay:'', LoginTime:'', BrokerID:'', UserID:'', SystemName:'', FrontID:0, SessionID:0, MaxOrderRef:'', SHFETime:'', DCETime:'', CZCETime:'', FFEXTime:'', INETime:'', RandomString:'', }};
exports.CThostFtdcTransferHeaderFieldParser = () => new Parser().string('Version', stropt(4)).string('TradeCode', stropt(7)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('TradeSerial', stropt(9)).string('FutureID', stropt(11)).string('BankID', stropt(4)).string('BankBrchID', stropt(5)).string('OperNo', stropt(17)).string('DeviceID', stropt(3)).string('RecordNum', stropt(7)).skip(3).int32le('SessionID').int32le('RequestID');
exports.CThostFtdcTransferHeaderFieldInit = () => {return {Version:'', TradeCode:'', TradeDate:'', TradeTime:'', TradeSerial:'', FutureID:'', BankID:'', BankBrchID:'', OperNo:'', DeviceID:'', RecordNum:'', SessionID:0, RequestID:0, }};
exports.CThostFtdcTransferBankToFutureReqFieldParser = () => new Parser().string('FutureAccount', stropt(13)).string('FuturePwdFlag', stropt(1)).string('FutureAccPwd', stropt(17)).skip(1).doublele('TradeAmt').doublele('CustFee').string('CurrencyCode', stropt(4)).skip(4);
exports.CThostFtdcTransferBankToFutureReqFieldInit = () => {return {FutureAccount:'', FuturePwdFlag:'', FutureAccPwd:'', TradeAmt:0, CustFee:0, CurrencyCode:'', }};
exports.CThostFtdcTransferBankToFutureRspFieldParser = () => new Parser().string('RetCode', stropt(5)).string('RetInfo', stropt(129)).string('FutureAccount', stropt(13)).skip(5).doublele('TradeAmt').doublele('CustFee').string('CurrencyCode', stropt(4)).skip(4);
exports.CThostFtdcTransferBankToFutureRspFieldInit = () => {return {RetCode:'', RetInfo:'', FutureAccount:'', TradeAmt:0, CustFee:0, CurrencyCode:'', }};
exports.CThostFtdcTransferFutureToBankReqFieldParser = () => new Parser().string('FutureAccount', stropt(13)).string('FuturePwdFlag', stropt(1)).string('FutureAccPwd', stropt(17)).skip(1).doublele('TradeAmt').doublele('CustFee').string('CurrencyCode', stropt(4)).skip(4);
exports.CThostFtdcTransferFutureToBankReqFieldInit = () => {return {FutureAccount:'', FuturePwdFlag:'', FutureAccPwd:'', TradeAmt:0, CustFee:0, CurrencyCode:'', }};
exports.CThostFtdcTransferFutureToBankRspFieldParser = () => new Parser().string('RetCode', stropt(5)).string('RetInfo', stropt(129)).string('FutureAccount', stropt(13)).skip(5).doublele('TradeAmt').doublele('CustFee').string('CurrencyCode', stropt(4)).skip(4);
exports.CThostFtdcTransferFutureToBankRspFieldInit = () => {return {RetCode:'', RetInfo:'', FutureAccount:'', TradeAmt:0, CustFee:0, CurrencyCode:'', }};
exports.CThostFtdcTransferQryBankReqFieldParser = () => new Parser().string('FutureAccount', stropt(13)).string('FuturePwdFlag', stropt(1)).string('FutureAccPwd', stropt(17)).string('CurrencyCode', stropt(4));
exports.CThostFtdcTransferQryBankReqFieldInit = () => {return {FutureAccount:'', FuturePwdFlag:'', FutureAccPwd:'', CurrencyCode:'', }};
exports.CThostFtdcTransferQryBankRspFieldParser = () => new Parser().string('RetCode', stropt(5)).string('RetInfo', stropt(129)).string('FutureAccount', stropt(13)).skip(5).doublele('TradeAmt').doublele('UseAmt').doublele('FetchAmt').string('CurrencyCode', stropt(4)).skip(4);
exports.CThostFtdcTransferQryBankRspFieldInit = () => {return {RetCode:'', RetInfo:'', FutureAccount:'', TradeAmt:0, UseAmt:0, FetchAmt:0, CurrencyCode:'', }};
exports.CThostFtdcTransferQryDetailReqFieldParser = () => new Parser().string('FutureAccount', stropt(13));
exports.CThostFtdcTransferQryDetailReqFieldInit = () => {return {FutureAccount:'', }};
exports.CThostFtdcTransferQryDetailRspFieldParser = () => new Parser().string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('TradeCode', stropt(7)).skip(3).int32le('FutureSerial').string('FutureID', stropt(11)).string('FutureAccount', stropt(22)).skip(3).int32le('BankSerial').string('BankID', stropt(4)).string('BankBrchID', stropt(5)).string('BankAccount', stropt(41)).string('CertCode', stropt(21)).string('CurrencyCode', stropt(4)).skip(5).doublele('TxAmount').string('Flag', stropt(1)).skip(7);
exports.CThostFtdcTransferQryDetailRspFieldInit = () => {return {TradeDate:'', TradeTime:'', TradeCode:'', FutureSerial:0, FutureID:'', FutureAccount:'', BankSerial:0, BankID:'', BankBrchID:'', BankAccount:'', CertCode:'', CurrencyCode:'', TxAmount:0, Flag:'', }};
exports.CThostFtdcRspInfoFieldParser = () => new Parser().int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(3);
exports.CThostFtdcRspInfoFieldInit = () => {return {ErrorID:0, ErrorMsg:'', }};
exports.CThostFtdcExchangeFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ExchangeName', stropt(61)).string('ExchangeProperty', stropt(1));
exports.CThostFtdcExchangeFieldInit = () => {return {ExchangeID:'', ExchangeName:'', ExchangeProperty:'', }};
exports.CThostFtdcProductFieldParser = () => new Parser().string('ProductID', stropt(31)).string('ProductName', stropt(21)).string('ExchangeID', stropt(9)).string('ProductClass', stropt(1)).skip(2).int32le('VolumeMultiple').skip(4).doublele('PriceTick').int32le('MaxMarketOrderVolume').int32le('MinMarketOrderVolume').int32le('MaxLimitOrderVolume').int32le('MinLimitOrderVolume').string('PositionType', stropt(1)).string('PositionDateType', stropt(1)).string('CloseDealType', stropt(1)).string('TradeCurrencyID', stropt(4)).string('MortgageFundUseRange', stropt(1)).string('ExchangeProductID', stropt(31)).skip(1).doublele('UnderlyingMultiple');
exports.CThostFtdcProductFieldInit = () => {return {ProductID:'', ProductName:'', ExchangeID:'', ProductClass:'', VolumeMultiple:0, PriceTick:0, MaxMarketOrderVolume:0, MinMarketOrderVolume:0, MaxLimitOrderVolume:0, MinLimitOrderVolume:0, PositionType:'', PositionDateType:'', CloseDealType:'', TradeCurrencyID:'', MortgageFundUseRange:'', ExchangeProductID:'', UnderlyingMultiple:0, }};
exports.CThostFtdcInstrumentFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).array('InstrumentName', {type:'uint8', length: 21}).string('ExchangeInstID', stropt(31)).string('ProductID', stropt(31)).string('ProductClass', stropt(1)).int32le('DeliveryYear').int32le('DeliveryMonth').int32le('MaxMarketOrderVolume').int32le('MinMarketOrderVolume').int32le('MaxLimitOrderVolume').int32le('MinLimitOrderVolume').int32le('VolumeMultiple').doublele('PriceTick').string('CreateDate', stropt(9)).string('OpenDate', stropt(9)).string('ExpireDate', stropt(9)).string('StartDelivDate', stropt(9)).string('EndDelivDate', stropt(9)).string('InstLifePhase', stropt(1)).skip(2).int32le('IsTrading').string('PositionType', stropt(1)).string('PositionDateType', stropt(1)).skip(2).doublele('LongMarginRatio').doublele('ShortMarginRatio').string('MaxMarginSideAlgorithm', stropt(1)).string('UnderlyingInstrID', stropt(31)).doublele('StrikePrice').string('OptionsType', stropt(1)).skip(7).doublele('UnderlyingMultiple').string('CombinationType', stropt(1)).skip(7);
exports.CThostFtdcInstrumentFieldInit = () => {return {InstrumentID:'', ExchangeID:'', InstrumentName:'', ExchangeInstID:'', ProductID:'', ProductClass:'', DeliveryYear:0, DeliveryMonth:0, MaxMarketOrderVolume:0, MinMarketOrderVolume:0, MaxLimitOrderVolume:0, MinLimitOrderVolume:0, VolumeMultiple:0, PriceTick:0, CreateDate:'', OpenDate:'', ExpireDate:'', StartDelivDate:'', EndDelivDate:'', InstLifePhase:'', IsTrading:0, PositionType:'', PositionDateType:'', LongMarginRatio:0, ShortMarginRatio:0, MaxMarginSideAlgorithm:'', UnderlyingInstrID:'', StrikePrice:0, OptionsType:'', UnderlyingMultiple:0, CombinationType:'', }};
exports.CThostFtdcBrokerFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('BrokerAbbr', stropt(9)).string('BrokerName', stropt(81)).skip(3).int32le('IsActive');
exports.CThostFtdcBrokerFieldInit = () => {return {BrokerID:'', BrokerAbbr:'', BrokerName:'', IsActive:0, }};
exports.CThostFtdcTraderFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('TraderID', stropt(21)).string('ParticipantID', stropt(11)).string('Password', stropt(41)).skip(2).int32le('InstallCount').string('BrokerID', stropt(11)).skip(1);
exports.CThostFtdcTraderFieldInit = () => {return {ExchangeID:'', TraderID:'', ParticipantID:'', Password:'', InstallCount:0, BrokerID:'', }};
exports.CThostFtdcInvestorFieldParser = () => new Parser().string('InvestorID', stropt(13)).string('BrokerID', stropt(11)).string('InvestorGroupID', stropt(13)).string('InvestorName', stropt(81)).string('IdentifiedCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).skip(2).int32le('IsActive').string('Telephone', stropt(41)).string('Address', stropt(101)).string('OpenDate', stropt(9)).string('Mobile', stropt(41)).string('CommModelID', stropt(13)).string('MarginModelID', stropt(13)).skip(2);
exports.CThostFtdcInvestorFieldInit = () => {return {InvestorID:'', BrokerID:'', InvestorGroupID:'', InvestorName:'', IdentifiedCardType:'', IdentifiedCardNo:'', IsActive:0, Telephone:'', Address:'', OpenDate:'', Mobile:'', CommModelID:'', MarginModelID:'', }};
exports.CThostFtdcTradingCodeFieldParser = () => new Parser().string('InvestorID', stropt(13)).string('BrokerID', stropt(11)).string('ExchangeID', stropt(9)).string('ClientID', stropt(11)).int32le('IsActive').string('ClientIDType', stropt(11)).string('BranchID', stropt(9)).string('BizType', stropt(1)).string('InvestUnitID', stropt(17)).skip(2);
exports.CThostFtdcTradingCodeFieldInit = () => {return {InvestorID:'', BrokerID:'', ExchangeID:'', ClientID:'', IsActive:0, ClientIDType:'', BranchID:'', BizType:'', InvestUnitID:'', }};
exports.CThostFtdcPartBrokerFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).skip(1).int32le('IsActive');
exports.CThostFtdcPartBrokerFieldInit = () => {return {BrokerID:'', ExchangeID:'', ParticipantID:'', IsActive:0, }};
exports.CThostFtdcSuperUserFieldParser = () => new Parser().string('UserID', stropt(16)).string('UserName', stropt(81)).string('Password', stropt(41)).skip(2).int32le('IsActive');
exports.CThostFtdcSuperUserFieldInit = () => {return {UserID:'', UserName:'', Password:'', IsActive:0, }};
exports.CThostFtdcSuperUserFunctionFieldParser = () => new Parser().string('UserID', stropt(16)).string('FunctionCode', stropt(1));
exports.CThostFtdcSuperUserFunctionFieldInit = () => {return {UserID:'', FunctionCode:'', }};
exports.CThostFtdcInvestorGroupFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorGroupID', stropt(13)).string('InvestorGroupName', stropt(41));
exports.CThostFtdcInvestorGroupFieldInit = () => {return {BrokerID:'', InvestorGroupID:'', InvestorGroupName:'', }};
exports.CThostFtdcTradingAccountFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).doublele('PreMortgage').doublele('PreCredit').doublele('PreDeposit').doublele('PreBalance').doublele('PreMargin').doublele('InterestBase').doublele('Interest').doublele('Deposit').doublele('Withdraw').doublele('FrozenMargin').doublele('FrozenCash').doublele('FrozenCommission').doublele('CurrMargin').doublele('CashIn').doublele('Commission').doublele('CloseProfit').doublele('PositionProfit').doublele('Balance').doublele('Available').doublele('WithdrawQuota').doublele('Reserve').string('TradingDay', stropt(9)).skip(3).int32le('SettlementID').doublele('Credit').doublele('Mortgage').doublele('ExchangeMargin').doublele('DeliveryMargin').doublele('ExchangeDeliveryMargin').doublele('ReserveBalance').string('CurrencyID', stropt(4)).skip(4).doublele('PreFundMortgageIn').doublele('PreFundMortgageOut').doublele('FundMortgageIn').doublele('FundMortgageOut').doublele('FundMortgageAvailable').doublele('MortgageableFund').doublele('SpecProductMargin').doublele('SpecProductFrozenMargin').doublele('SpecProductCommission').doublele('SpecProductFrozenCommission').doublele('SpecProductPositionProfit').doublele('SpecProductCloseProfit').doublele('SpecProductPositionProfitByAlg').doublele('SpecProductExchangeMargin').string('BizType', stropt(1)).skip(7).doublele('FrozenSwap').doublele('RemainSwap');
exports.CThostFtdcTradingAccountFieldInit = () => {return {BrokerID:'', AccountID:'', PreMortgage:0, PreCredit:0, PreDeposit:0, PreBalance:0, PreMargin:0, InterestBase:0, Interest:0, Deposit:0, Withdraw:0, FrozenMargin:0, FrozenCash:0, FrozenCommission:0, CurrMargin:0, CashIn:0, Commission:0, CloseProfit:0, PositionProfit:0, Balance:0, Available:0, WithdrawQuota:0, Reserve:0, TradingDay:'', SettlementID:0, Credit:0, Mortgage:0, ExchangeMargin:0, DeliveryMargin:0, ExchangeDeliveryMargin:0, ReserveBalance:0, CurrencyID:'', PreFundMortgageIn:0, PreFundMortgageOut:0, FundMortgageIn:0, FundMortgageOut:0, FundMortgageAvailable:0, MortgageableFund:0, SpecProductMargin:0, SpecProductFrozenMargin:0, SpecProductCommission:0, SpecProductFrozenCommission:0, SpecProductPositionProfit:0, SpecProductCloseProfit:0, SpecProductPositionProfitByAlg:0, SpecProductExchangeMargin:0, BizType:'', FrozenSwap:0, RemainSwap:0, }};
exports.CThostFtdcInvestorPositionFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('PosiDirection', stropt(1)).string('HedgeFlag', stropt(1)).string('PositionDate', stropt(1)).skip(2).int32le('YdPosition').int32le('Position').int32le('LongFrozen').int32le('ShortFrozen').skip(4).doublele('LongFrozenAmount').doublele('ShortFrozenAmount').int32le('OpenVolume').int32le('CloseVolume').doublele('OpenAmount').doublele('CloseAmount').doublele('PositionCost').doublele('PreMargin').doublele('UseMargin').doublele('FrozenMargin').doublele('FrozenCash').doublele('FrozenCommission').doublele('CashIn').doublele('Commission').doublele('CloseProfit').doublele('PositionProfit').doublele('PreSettlementPrice').doublele('SettlementPrice').string('TradingDay', stropt(9)).skip(3).int32le('SettlementID').doublele('OpenCost').doublele('ExchangeMargin').int32le('CombPosition').int32le('CombLongFrozen').int32le('CombShortFrozen').skip(4).doublele('CloseProfitByDate').doublele('CloseProfitByTrade').int32le('TodayPosition').skip(4).doublele('MarginRateByMoney').doublele('MarginRateByVolume').int32le('StrikeFrozen').skip(4).doublele('StrikeFrozenAmount').int32le('AbandonFrozen').string('ExchangeID', stropt(9)).skip(3).int32le('YdStrikeFrozen').string('InvestUnitID', stropt(17)).skip(3).doublele('PositionCostOffset');
exports.CThostFtdcInvestorPositionFieldInit = () => {return {InstrumentID:'', BrokerID:'', InvestorID:'', PosiDirection:'', HedgeFlag:'', PositionDate:'', YdPosition:0, Position:0, LongFrozen:0, ShortFrozen:0, LongFrozenAmount:0, ShortFrozenAmount:0, OpenVolume:0, CloseVolume:0, OpenAmount:0, CloseAmount:0, PositionCost:0, PreMargin:0, UseMargin:0, FrozenMargin:0, FrozenCash:0, FrozenCommission:0, CashIn:0, Commission:0, CloseProfit:0, PositionProfit:0, PreSettlementPrice:0, SettlementPrice:0, TradingDay:'', SettlementID:0, OpenCost:0, ExchangeMargin:0, CombPosition:0, CombLongFrozen:0, CombShortFrozen:0, CloseProfitByDate:0, CloseProfitByTrade:0, TodayPosition:0, MarginRateByMoney:0, MarginRateByVolume:0, StrikeFrozen:0, StrikeFrozenAmount:0, AbandonFrozen:0, ExchangeID:'', YdStrikeFrozen:0, InvestUnitID:'', PositionCostOffset:0, }};
exports.CThostFtdcInstrumentMarginRateFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('HedgeFlag', stropt(1)).skip(7).doublele('LongMarginRatioByMoney').doublele('LongMarginRatioByVolume').doublele('ShortMarginRatioByMoney').doublele('ShortMarginRatioByVolume').int32le('IsRelative').string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).skip(2);
exports.CThostFtdcInstrumentMarginRateFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', HedgeFlag:'', LongMarginRatioByMoney:0, LongMarginRatioByVolume:0, ShortMarginRatioByMoney:0, ShortMarginRatioByVolume:0, IsRelative:0, ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcInstrumentCommissionRateFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('OpenRatioByMoney').doublele('OpenRatioByVolume').doublele('CloseRatioByMoney').doublele('CloseRatioByVolume').doublele('CloseTodayRatioByMoney').doublele('CloseTodayRatioByVolume').string('ExchangeID', stropt(9)).string('BizType', stropt(1)).string('InvestUnitID', stropt(17)).skip(5);
exports.CThostFtdcInstrumentCommissionRateFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', OpenRatioByMoney:0, OpenRatioByVolume:0, CloseRatioByMoney:0, CloseRatioByVolume:0, CloseTodayRatioByMoney:0, CloseTodayRatioByVolume:0, ExchangeID:'', BizType:'', InvestUnitID:'', }};
exports.CThostFtdcDepthMarketDataFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('ExchangeInstID', stropt(31)).doublele('LastPrice').doublele('PreSettlementPrice').doublele('PreClosePrice').doublele('PreOpenInterest').doublele('OpenPrice').doublele('HighestPrice').doublele('LowestPrice').int32le('Volume').skip(4).doublele('Turnover').doublele('OpenInterest').doublele('ClosePrice').doublele('SettlementPrice').doublele('UpperLimitPrice').doublele('LowerLimitPrice').doublele('PreDelta').doublele('CurrDelta').string('UpdateTime', stropt(9)).skip(3).int32le('UpdateMillisec').doublele('BidPrice1').int32le('BidVolume1').skip(4).doublele('AskPrice1').int32le('AskVolume1').skip(4).doublele('BidPrice2').int32le('BidVolume2').skip(4).doublele('AskPrice2').int32le('AskVolume2').skip(4).doublele('BidPrice3').int32le('BidVolume3').skip(4).doublele('AskPrice3').int32le('AskVolume3').skip(4).doublele('BidPrice4').int32le('BidVolume4').skip(4).doublele('AskPrice4').int32le('AskVolume4').skip(4).doublele('BidPrice5').int32le('BidVolume5').skip(4).doublele('AskPrice5').int32le('AskVolume5').skip(4).doublele('AveragePrice').string('ActionDay', stropt(9)).skip(7);
exports.CThostFtdcDepthMarketDataFieldInit = () => {return {TradingDay:'', InstrumentID:'', ExchangeID:'', ExchangeInstID:'', LastPrice:0, PreSettlementPrice:0, PreClosePrice:0, PreOpenInterest:0, OpenPrice:0, HighestPrice:0, LowestPrice:0, Volume:0, Turnover:0, OpenInterest:0, ClosePrice:0, SettlementPrice:0, UpperLimitPrice:0, LowerLimitPrice:0, PreDelta:0, CurrDelta:0, UpdateTime:'', UpdateMillisec:0, BidPrice1:0, BidVolume1:0, AskPrice1:0, AskVolume1:0, BidPrice2:0, BidVolume2:0, AskPrice2:0, AskVolume2:0, BidPrice3:0, BidVolume3:0, AskPrice3:0, AskVolume3:0, BidPrice4:0, BidVolume4:0, AskPrice4:0, AskVolume4:0, BidPrice5:0, BidVolume5:0, AskPrice5:0, AskVolume5:0, AveragePrice:0, ActionDay:'', }};
exports.CThostFtdcInstrumentTradingRightFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('TradingRight', stropt(1));
exports.CThostFtdcInstrumentTradingRightFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', TradingRight:'', }};
exports.CThostFtdcBrokerUserFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('UserName', stropt(81)).string('UserType', stropt(1)).skip(3).int32le('IsActive').int32le('IsUsingOTP').int32le('IsAuthForce');
exports.CThostFtdcBrokerUserFieldInit = () => {return {BrokerID:'', UserID:'', UserName:'', UserType:'', IsActive:0, IsUsingOTP:0, IsAuthForce:0, }};
exports.CThostFtdcBrokerUserPasswordFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('Password', stropt(41)).string('LastUpdateTime', stropt(17)).string('LastLoginTime', stropt(17)).string('ExpireDate', stropt(9)).string('WeakExpireDate', stropt(9));
exports.CThostFtdcBrokerUserPasswordFieldInit = () => {return {BrokerID:'', UserID:'', Password:'', LastUpdateTime:'', LastLoginTime:'', ExpireDate:'', WeakExpireDate:'', }};
exports.CThostFtdcBrokerUserFunctionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('BrokerFunctionCode', stropt(1));
exports.CThostFtdcBrokerUserFunctionFieldInit = () => {return {BrokerID:'', UserID:'', BrokerFunctionCode:'', }};
exports.CThostFtdcTraderOfferFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('TraderID', stropt(21)).string('ParticipantID', stropt(11)).string('Password', stropt(41)).skip(2).int32le('InstallID').string('OrderLocalID', stropt(13)).string('TraderConnectStatus', stropt(1)).string('ConnectRequestDate', stropt(9)).string('ConnectRequestTime', stropt(9)).string('LastReportDate', stropt(9)).string('LastReportTime', stropt(9)).string('ConnectDate', stropt(9)).string('ConnectTime', stropt(9)).string('StartDate', stropt(9)).string('StartTime', stropt(9)).string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('MaxTradeID', stropt(21)).string('MaxOrderMessageReference', stropt(7)).skip(2);
exports.CThostFtdcTraderOfferFieldInit = () => {return {ExchangeID:'', TraderID:'', ParticipantID:'', Password:'', InstallID:0, OrderLocalID:'', TraderConnectStatus:'', ConnectRequestDate:'', ConnectRequestTime:'', LastReportDate:'', LastReportTime:'', ConnectDate:'', ConnectTime:'', StartDate:'', StartTime:'', TradingDay:'', BrokerID:'', MaxTradeID:'', MaxOrderMessageReference:'', }};
exports.CThostFtdcSettlementInfoFieldParser = () => new Parser().string('TradingDay', stropt(9)).skip(3).int32le('SettlementID').string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('SequenceNo').string('Content', stropt(501)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).skip(2);
exports.CThostFtdcSettlementInfoFieldInit = () => {return {TradingDay:'', SettlementID:0, BrokerID:'', InvestorID:'', SequenceNo:0, Content:'', AccountID:'', CurrencyID:'', }};
exports.CThostFtdcInstrumentMarginRateAdjustFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('HedgeFlag', stropt(1)).skip(7).doublele('LongMarginRatioByMoney').doublele('LongMarginRatioByVolume').doublele('ShortMarginRatioByMoney').doublele('ShortMarginRatioByVolume').int32le('IsRelative').skip(4);
exports.CThostFtdcInstrumentMarginRateAdjustFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', HedgeFlag:'', LongMarginRatioByMoney:0, LongMarginRatioByVolume:0, ShortMarginRatioByMoney:0, ShortMarginRatioByVolume:0, IsRelative:0, }};
exports.CThostFtdcExchangeMarginRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).string('HedgeFlag', stropt(1)).skip(5).doublele('LongMarginRatioByMoney').doublele('LongMarginRatioByVolume').doublele('ShortMarginRatioByMoney').doublele('ShortMarginRatioByVolume').string('ExchangeID', stropt(9)).skip(7);
exports.CThostFtdcExchangeMarginRateFieldInit = () => {return {BrokerID:'', InstrumentID:'', HedgeFlag:'', LongMarginRatioByMoney:0, LongMarginRatioByVolume:0, ShortMarginRatioByMoney:0, ShortMarginRatioByVolume:0, ExchangeID:'', }};
exports.CThostFtdcExchangeMarginRateAdjustFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).string('HedgeFlag', stropt(1)).skip(5).doublele('LongMarginRatioByMoney').doublele('LongMarginRatioByVolume').doublele('ShortMarginRatioByMoney').doublele('ShortMarginRatioByVolume').doublele('ExchLongMarginRatioByMoney').doublele('ExchLongMarginRatioByVolume').doublele('ExchShortMarginRatioByMoney').doublele('ExchShortMarginRatioByVolume').doublele('NoLongMarginRatioByMoney').doublele('NoLongMarginRatioByVolume').doublele('NoShortMarginRatioByMoney').doublele('NoShortMarginRatioByVolume');
exports.CThostFtdcExchangeMarginRateAdjustFieldInit = () => {return {BrokerID:'', InstrumentID:'', HedgeFlag:'', LongMarginRatioByMoney:0, LongMarginRatioByVolume:0, ShortMarginRatioByMoney:0, ShortMarginRatioByVolume:0, ExchLongMarginRatioByMoney:0, ExchLongMarginRatioByVolume:0, ExchShortMarginRatioByMoney:0, ExchShortMarginRatioByVolume:0, NoLongMarginRatioByMoney:0, NoLongMarginRatioByVolume:0, NoShortMarginRatioByMoney:0, NoShortMarginRatioByVolume:0, }};
exports.CThostFtdcExchangeRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('FromCurrencyID', stropt(4)).skip(1).doublele('FromCurrencyUnit').string('ToCurrencyID', stropt(4)).skip(4).doublele('ExchangeRate');
exports.CThostFtdcExchangeRateFieldInit = () => {return {BrokerID:'', FromCurrencyID:'', FromCurrencyUnit:0, ToCurrencyID:'', ExchangeRate:0, }};
exports.CThostFtdcSettlementRefFieldParser = () => new Parser().string('TradingDay', stropt(9)).skip(3).int32le('SettlementID');
exports.CThostFtdcSettlementRefFieldInit = () => {return {TradingDay:'', SettlementID:0, }};
exports.CThostFtdcCurrentTimeFieldParser = () => new Parser().string('CurrDate', stropt(9)).string('CurrTime', stropt(9)).skip(2).int32le('CurrMillisec').string('ActionDay', stropt(9)).skip(3);
exports.CThostFtdcCurrentTimeFieldInit = () => {return {CurrDate:'', CurrTime:'', CurrMillisec:0, ActionDay:'', }};
exports.CThostFtdcCommPhaseFieldParser = () => new Parser().string('TradingDay', stropt(9)).skip(1).int16le('CommPhaseNo').string('SystemID', stropt(21)).skip(1);
exports.CThostFtdcCommPhaseFieldInit = () => {return {TradingDay:'', CommPhaseNo:0, SystemID:'', }};
exports.CThostFtdcLoginInfoFieldParser = () => new Parser().int32le('FrontID').int32le('SessionID').string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('LoginDate', stropt(9)).string('LoginTime', stropt(9)).string('IPAddress', stropt(16)).string('UserProductInfo', stropt(11)).string('InterfaceProductInfo', stropt(11)).string('ProtocolInfo', stropt(11)).string('SystemName', stropt(41)).string('PasswordDeprecated', stropt(41)).string('MaxOrderRef', stropt(13)).string('SHFETime', stropt(9)).string('DCETime', stropt(9)).string('CZCETime', stropt(9)).string('FFEXTime', stropt(9)).string('MacAddress', stropt(21)).string('OneTimePassword', stropt(41)).string('INETime', stropt(9)).int32le('IsQryControl').string('LoginRemark', stropt(36)).string('Password', stropt(41)).skip(3);
exports.CThostFtdcLoginInfoFieldInit = () => {return {FrontID:0, SessionID:0, BrokerID:'', UserID:'', LoginDate:'', LoginTime:'', IPAddress:'', UserProductInfo:'', InterfaceProductInfo:'', ProtocolInfo:'', SystemName:'', PasswordDeprecated:'', MaxOrderRef:'', SHFETime:'', DCETime:'', CZCETime:'', FFEXTime:'', MacAddress:'', OneTimePassword:'', INETime:'', IsQryControl:0, LoginRemark:'', Password:'', }};
exports.CThostFtdcLogoutAllFieldParser = () => new Parser().int32le('FrontID').int32le('SessionID').string('SystemName', stropt(41)).skip(3);
exports.CThostFtdcLogoutAllFieldInit = () => {return {FrontID:0, SessionID:0, SystemName:'', }};
exports.CThostFtdcFrontStatusFieldParser = () => new Parser().int32le('FrontID').string('LastReportDate', stropt(9)).string('LastReportTime', stropt(9)).skip(2).int32le('IsActive');
exports.CThostFtdcFrontStatusFieldInit = () => {return {FrontID:0, LastReportDate:'', LastReportTime:'', IsActive:0, }};
exports.CThostFtdcUserPasswordUpdateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('OldPassword', stropt(41)).string('NewPassword', stropt(41));
exports.CThostFtdcUserPasswordUpdateFieldInit = () => {return {BrokerID:'', UserID:'', OldPassword:'', NewPassword:'', }};
exports.CThostFtdcInputOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('OrderRef', stropt(13)).string('UserID', stropt(16)).string('OrderPriceType', stropt(1)).string('Direction', stropt(1)).string('CombOffsetFlag', stropt(5)).string('CombHedgeFlag', stropt(5)).doublele('LimitPrice').int32le('VolumeTotalOriginal').string('TimeCondition', stropt(1)).string('GTDDate', stropt(9)).string('VolumeCondition', stropt(1)).skip(1).int32le('MinVolume').string('ContingentCondition', stropt(1)).skip(3).doublele('StopPrice').string('ForceCloseReason', stropt(1)).skip(3).int32le('IsAutoSuspend').string('BusinessUnit', stropt(21)).skip(3).int32le('RequestID').int32le('UserForceClose').int32le('IsSwapOrder').string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('ClientID', stropt(11)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(1);
exports.CThostFtdcInputOrderFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', OrderRef:'', UserID:'', OrderPriceType:'', Direction:'', CombOffsetFlag:'', CombHedgeFlag:'', LimitPrice:0, VolumeTotalOriginal:0, TimeCondition:'', GTDDate:'', VolumeCondition:'', MinVolume:0, ContingentCondition:'', StopPrice:0, ForceCloseReason:'', IsAutoSuspend:0, BusinessUnit:'', RequestID:0, UserForceClose:0, IsSwapOrder:0, ExchangeID:'', InvestUnitID:'', AccountID:'', CurrencyID:'', ClientID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('OrderRef', stropt(13)).string('UserID', stropt(16)).string('OrderPriceType', stropt(1)).string('Direction', stropt(1)).string('CombOffsetFlag', stropt(5)).string('CombHedgeFlag', stropt(5)).doublele('LimitPrice').int32le('VolumeTotalOriginal').string('TimeCondition', stropt(1)).string('GTDDate', stropt(9)).string('VolumeCondition', stropt(1)).skip(1).int32le('MinVolume').string('ContingentCondition', stropt(1)).skip(3).doublele('StopPrice').string('ForceCloseReason', stropt(1)).skip(3).int32le('IsAutoSuspend').string('BusinessUnit', stropt(21)).skip(3).int32le('RequestID').string('OrderLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').string('OrderSubmitStatus', stropt(1)).skip(3).int32le('NotifySequence').string('TradingDay', stropt(9)).skip(3).int32le('SettlementID').string('OrderSysID', stropt(21)).string('OrderSource', stropt(1)).string('OrderStatus', stropt(1)).string('OrderType', stropt(1)).int32le('VolumeTraded').int32le('VolumeTotal').string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('ActiveTime', stropt(9)).string('SuspendTime', stropt(9)).string('UpdateTime', stropt(9)).string('CancelTime', stropt(9)).string('ActiveTraderID', stropt(21)).string('ClearingPartID', stropt(11)).skip(2).int32le('SequenceNo').int32le('FrontID').int32le('SessionID').string('UserProductInfo', stropt(11)).array('StatusMsg', {type:'uint8', length: 81}).int32le('UserForceClose').string('ActiveUserID', stropt(16)).int32le('BrokerOrderSeq').string('RelativeOrderSysID', stropt(21)).skip(3).int32le('ZCETotalTradedVolume').int32le('IsSwapOrder').string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports.CThostFtdcOrderFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', OrderRef:'', UserID:'', OrderPriceType:'', Direction:'', CombOffsetFlag:'', CombHedgeFlag:'', LimitPrice:0, VolumeTotalOriginal:0, TimeCondition:'', GTDDate:'', VolumeCondition:'', MinVolume:0, ContingentCondition:'', StopPrice:0, ForceCloseReason:'', IsAutoSuspend:0, BusinessUnit:'', RequestID:0, OrderLocalID:'', ExchangeID:'', ParticipantID:'', ClientID:'', ExchangeInstID:'', TraderID:'', InstallID:0, OrderSubmitStatus:'', NotifySequence:0, TradingDay:'', SettlementID:0, OrderSysID:'', OrderSource:'', OrderStatus:'', OrderType:'', VolumeTraded:0, VolumeTotal:0, InsertDate:'', InsertTime:'', ActiveTime:'', SuspendTime:'', UpdateTime:'', CancelTime:'', ActiveTraderID:'', ClearingPartID:'', SequenceNo:0, FrontID:0, SessionID:0, UserProductInfo:'', StatusMsg:'', UserForceClose:0, ActiveUserID:'', BrokerOrderSeq:0, RelativeOrderSysID:'', ZCETotalTradedVolume:0, IsSwapOrder:0, BranchID:'', InvestUnitID:'', AccountID:'', CurrencyID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcExchangeOrderFieldParser = () => new Parser().string('OrderPriceType', stropt(1)).string('Direction', stropt(1)).string('CombOffsetFlag', stropt(5)).string('CombHedgeFlag', stropt(5)).skip(4).doublele('LimitPrice').int32le('VolumeTotalOriginal').string('TimeCondition', stropt(1)).string('GTDDate', stropt(9)).string('VolumeCondition', stropt(1)).skip(1).int32le('MinVolume').string('ContingentCondition', stropt(1)).skip(3).doublele('StopPrice').string('ForceCloseReason', stropt(1)).skip(3).int32le('IsAutoSuspend').string('BusinessUnit', stropt(21)).skip(3).int32le('RequestID').string('OrderLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').string('OrderSubmitStatus', stropt(1)).skip(3).int32le('NotifySequence').string('TradingDay', stropt(9)).skip(3).int32le('SettlementID').string('OrderSysID', stropt(21)).string('OrderSource', stropt(1)).string('OrderStatus', stropt(1)).string('OrderType', stropt(1)).int32le('VolumeTraded').int32le('VolumeTotal').string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('ActiveTime', stropt(9)).string('SuspendTime', stropt(9)).string('UpdateTime', stropt(9)).string('CancelTime', stropt(9)).string('ActiveTraderID', stropt(21)).string('ClearingPartID', stropt(11)).skip(2).int32le('SequenceNo').string('BranchID', stropt(9)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(6);
exports.CThostFtdcExchangeOrderFieldInit = () => {return {OrderPriceType:'', Direction:'', CombOffsetFlag:'', CombHedgeFlag:'', LimitPrice:0, VolumeTotalOriginal:0, TimeCondition:'', GTDDate:'', VolumeCondition:'', MinVolume:0, ContingentCondition:'', StopPrice:0, ForceCloseReason:'', IsAutoSuspend:0, BusinessUnit:'', RequestID:0, OrderLocalID:'', ExchangeID:'', ParticipantID:'', ClientID:'', ExchangeInstID:'', TraderID:'', InstallID:0, OrderSubmitStatus:'', NotifySequence:0, TradingDay:'', SettlementID:0, OrderSysID:'', OrderSource:'', OrderStatus:'', OrderType:'', VolumeTraded:0, VolumeTotal:0, InsertDate:'', InsertTime:'', ActiveTime:'', SuspendTime:'', UpdateTime:'', CancelTime:'', ActiveTraderID:'', ClearingPartID:'', SequenceNo:0, BranchID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcExchangeOrderInsertErrorFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('TraderID', stropt(21)).skip(3).int32le('InstallID').string('OrderLocalID', stropt(13)).skip(3).int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(3);
exports.CThostFtdcExchangeOrderInsertErrorFieldInit = () => {return {ExchangeID:'', ParticipantID:'', TraderID:'', InstallID:0, OrderLocalID:'', ErrorID:0, ErrorMsg:'', }};
exports.CThostFtdcInputOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('OrderActionRef').string('OrderRef', stropt(13)).skip(3).int32le('RequestID').int32le('FrontID').int32le('SessionID').string('ExchangeID', stropt(9)).string('OrderSysID', stropt(21)).string('ActionFlag', stropt(1)).skip(1).doublele('LimitPrice').int32le('VolumeChange').string('UserID', stropt(16)).string('InstrumentID', stropt(31)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(7);
exports.CThostFtdcInputOrderActionFieldInit = () => {return {BrokerID:'', InvestorID:'', OrderActionRef:0, OrderRef:'', RequestID:0, FrontID:0, SessionID:0, ExchangeID:'', OrderSysID:'', ActionFlag:'', LimitPrice:0, VolumeChange:0, UserID:'', InstrumentID:'', InvestUnitID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('OrderActionRef').string('OrderRef', stropt(13)).skip(3).int32le('RequestID').int32le('FrontID').int32le('SessionID').string('ExchangeID', stropt(9)).string('OrderSysID', stropt(21)).string('ActionFlag', stropt(1)).skip(1).doublele('LimitPrice').int32le('VolumeChange').string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).skip(1).int32le('InstallID').string('OrderLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).array('StatusMsg', {type:'uint8', length: 81}).string('InstrumentID', stropt(31)).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(3);
exports.CThostFtdcOrderActionFieldInit = () => {return {BrokerID:'', InvestorID:'', OrderActionRef:0, OrderRef:'', RequestID:0, FrontID:0, SessionID:0, ExchangeID:'', OrderSysID:'', ActionFlag:'', LimitPrice:0, VolumeChange:0, ActionDate:'', ActionTime:'', TraderID:'', InstallID:0, OrderLocalID:'', ActionLocalID:'', ParticipantID:'', ClientID:'', BusinessUnit:'', OrderActionStatus:'', UserID:'', StatusMsg:'', InstrumentID:'', BranchID:'', InvestUnitID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcExchangeOrderActionFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('OrderSysID', stropt(21)).string('ActionFlag', stropt(1)).skip(1).doublele('LimitPrice').int32le('VolumeChange').string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).skip(1).int32le('InstallID').string('OrderLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('BranchID', stropt(9)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(4);
exports.CThostFtdcExchangeOrderActionFieldInit = () => {return {ExchangeID:'', OrderSysID:'', ActionFlag:'', LimitPrice:0, VolumeChange:0, ActionDate:'', ActionTime:'', TraderID:'', InstallID:0, OrderLocalID:'', ActionLocalID:'', ParticipantID:'', ClientID:'', BusinessUnit:'', OrderActionStatus:'', UserID:'', BranchID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcExchangeOrderActionErrorFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('OrderSysID', stropt(21)).string('TraderID', stropt(21)).skip(1).int32le('InstallID').string('OrderLocalID', stropt(13)).string('ActionLocalID', stropt(13)).skip(2).int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(3);
exports.CThostFtdcExchangeOrderActionErrorFieldInit = () => {return {ExchangeID:'', OrderSysID:'', TraderID:'', InstallID:0, OrderLocalID:'', ActionLocalID:'', ErrorID:0, ErrorMsg:'', }};
exports.CThostFtdcExchangeTradeFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('TradeID', stropt(21)).string('Direction', stropt(1)).string('OrderSysID', stropt(21)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('TradingRole', stropt(1)).string('ExchangeInstID', stropt(31)).string('OffsetFlag', stropt(1)).string('HedgeFlag', stropt(1)).skip(4).doublele('Price').int32le('Volume').string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('TradeType', stropt(1)).string('PriceSource', stropt(1)).string('TraderID', stropt(21)).string('OrderLocalID', stropt(13)).string('ClearingPartID', stropt(11)).string('BusinessUnit', stropt(21)).skip(2).int32le('SequenceNo').string('TradeSource', stropt(1)).skip(7);
exports.CThostFtdcExchangeTradeFieldInit = () => {return {ExchangeID:'', TradeID:'', Direction:'', OrderSysID:'', ParticipantID:'', ClientID:'', TradingRole:'', ExchangeInstID:'', OffsetFlag:'', HedgeFlag:'', Price:0, Volume:0, TradeDate:'', TradeTime:'', TradeType:'', PriceSource:'', TraderID:'', OrderLocalID:'', ClearingPartID:'', BusinessUnit:'', SequenceNo:0, TradeSource:'', }};
exports.CThostFtdcTradeFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('OrderRef', stropt(13)).string('UserID', stropt(16)).string('ExchangeID', stropt(9)).string('TradeID', stropt(21)).string('Direction', stropt(1)).string('OrderSysID', stropt(21)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('TradingRole', stropt(1)).string('ExchangeInstID', stropt(31)).string('OffsetFlag', stropt(1)).string('HedgeFlag', stropt(1)).doublele('Price').int32le('Volume').string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('TradeType', stropt(1)).string('PriceSource', stropt(1)).string('TraderID', stropt(21)).string('OrderLocalID', stropt(13)).string('ClearingPartID', stropt(11)).string('BusinessUnit', stropt(21)).skip(2).int32le('SequenceNo').string('TradingDay', stropt(9)).skip(3).int32le('SettlementID').int32le('BrokerOrderSeq').string('TradeSource', stropt(1)).string('InvestUnitID', stropt(17)).skip(2);
exports.CThostFtdcTradeFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', OrderRef:'', UserID:'', ExchangeID:'', TradeID:'', Direction:'', OrderSysID:'', ParticipantID:'', ClientID:'', TradingRole:'', ExchangeInstID:'', OffsetFlag:'', HedgeFlag:'', Price:0, Volume:0, TradeDate:'', TradeTime:'', TradeType:'', PriceSource:'', TraderID:'', OrderLocalID:'', ClearingPartID:'', BusinessUnit:'', SequenceNo:0, TradingDay:'', SettlementID:0, BrokerOrderSeq:0, TradeSource:'', InvestUnitID:'', }};
exports.CThostFtdcUserSessionFieldParser = () => new Parser().int32le('FrontID').int32le('SessionID').string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('LoginDate', stropt(9)).string('LoginTime', stropt(9)).string('IPAddress', stropt(16)).string('UserProductInfo', stropt(11)).string('InterfaceProductInfo', stropt(11)).string('ProtocolInfo', stropt(11)).string('MacAddress', stropt(21)).string('LoginRemark', stropt(36)).skip(1);
exports.CThostFtdcUserSessionFieldInit = () => {return {FrontID:0, SessionID:0, BrokerID:'', UserID:'', LoginDate:'', LoginTime:'', IPAddress:'', UserProductInfo:'', InterfaceProductInfo:'', ProtocolInfo:'', MacAddress:'', LoginRemark:'', }};
exports.CThostFtdcQueryMaxOrderVolumeFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('Direction', stropt(1)).string('OffsetFlag', stropt(1)).string('HedgeFlag', stropt(1)).skip(2).int32le('MaxVolume').string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).skip(2);
exports.CThostFtdcQueryMaxOrderVolumeFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', Direction:'', OffsetFlag:'', HedgeFlag:'', MaxVolume:0, ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcSettlementInfoConfirmFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ConfirmDate', stropt(9)).string('ConfirmTime', stropt(9)).skip(2).int32le('SettlementID').string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).skip(3);
exports.CThostFtdcSettlementInfoConfirmFieldInit = () => {return {BrokerID:'', InvestorID:'', ConfirmDate:'', ConfirmTime:'', SettlementID:0, AccountID:'', CurrencyID:'', }};
exports.CThostFtdcSyncDepositFieldParser = () => new Parser().string('DepositSeqNo', stropt(15)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).skip(1).doublele('Deposit').int32le('IsForce').string('CurrencyID', stropt(4));
exports.CThostFtdcSyncDepositFieldInit = () => {return {DepositSeqNo:'', BrokerID:'', InvestorID:'', Deposit:0, IsForce:0, CurrencyID:'', }};
exports.CThostFtdcSyncFundMortgageFieldParser = () => new Parser().string('MortgageSeqNo', stropt(15)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('FromCurrencyID', stropt(4)).skip(5).doublele('MortgageAmount').string('ToCurrencyID', stropt(4)).skip(4);
exports.CThostFtdcSyncFundMortgageFieldInit = () => {return {MortgageSeqNo:'', BrokerID:'', InvestorID:'', FromCurrencyID:'', MortgageAmount:0, ToCurrencyID:'', }};
exports.CThostFtdcBrokerSyncFieldParser = () => new Parser().string('BrokerID', stropt(11));
exports.CThostFtdcBrokerSyncFieldInit = () => {return {BrokerID:'', }};
exports.CThostFtdcSyncingInvestorFieldParser = () => new Parser().string('InvestorID', stropt(13)).string('BrokerID', stropt(11)).string('InvestorGroupID', stropt(13)).string('InvestorName', stropt(81)).string('IdentifiedCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).skip(2).int32le('IsActive').string('Telephone', stropt(41)).string('Address', stropt(101)).string('OpenDate', stropt(9)).string('Mobile', stropt(41)).string('CommModelID', stropt(13)).string('MarginModelID', stropt(13)).skip(2);
exports.CThostFtdcSyncingInvestorFieldInit = () => {return {InvestorID:'', BrokerID:'', InvestorGroupID:'', InvestorName:'', IdentifiedCardType:'', IdentifiedCardNo:'', IsActive:0, Telephone:'', Address:'', OpenDate:'', Mobile:'', CommModelID:'', MarginModelID:'', }};
exports.CThostFtdcSyncingTradingCodeFieldParser = () => new Parser().string('InvestorID', stropt(13)).string('BrokerID', stropt(11)).string('ExchangeID', stropt(9)).string('ClientID', stropt(11)).int32le('IsActive').string('ClientIDType', stropt(11)).skip(1);
exports.CThostFtdcSyncingTradingCodeFieldInit = () => {return {InvestorID:'', BrokerID:'', ExchangeID:'', ClientID:'', IsActive:0, ClientIDType:'', }};
exports.CThostFtdcSyncingInvestorGroupFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorGroupID', stropt(13)).string('InvestorGroupName', stropt(41));
exports.CThostFtdcSyncingInvestorGroupFieldInit = () => {return {BrokerID:'', InvestorGroupID:'', InvestorGroupName:'', }};
exports.CThostFtdcSyncingTradingAccountFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).doublele('PreMortgage').doublele('PreCredit').doublele('PreDeposit').doublele('PreBalance').doublele('PreMargin').doublele('InterestBase').doublele('Interest').doublele('Deposit').doublele('Withdraw').doublele('FrozenMargin').doublele('FrozenCash').doublele('FrozenCommission').doublele('CurrMargin').doublele('CashIn').doublele('Commission').doublele('CloseProfit').doublele('PositionProfit').doublele('Balance').doublele('Available').doublele('WithdrawQuota').doublele('Reserve').string('TradingDay', stropt(9)).skip(3).int32le('SettlementID').doublele('Credit').doublele('Mortgage').doublele('ExchangeMargin').doublele('DeliveryMargin').doublele('ExchangeDeliveryMargin').doublele('ReserveBalance').string('CurrencyID', stropt(4)).skip(4).doublele('PreFundMortgageIn').doublele('PreFundMortgageOut').doublele('FundMortgageIn').doublele('FundMortgageOut').doublele('FundMortgageAvailable').doublele('MortgageableFund').doublele('SpecProductMargin').doublele('SpecProductFrozenMargin').doublele('SpecProductCommission').doublele('SpecProductFrozenCommission').doublele('SpecProductPositionProfit').doublele('SpecProductCloseProfit').doublele('SpecProductPositionProfitByAlg').doublele('SpecProductExchangeMargin').doublele('FrozenSwap').doublele('RemainSwap');
exports.CThostFtdcSyncingTradingAccountFieldInit = () => {return {BrokerID:'', AccountID:'', PreMortgage:0, PreCredit:0, PreDeposit:0, PreBalance:0, PreMargin:0, InterestBase:0, Interest:0, Deposit:0, Withdraw:0, FrozenMargin:0, FrozenCash:0, FrozenCommission:0, CurrMargin:0, CashIn:0, Commission:0, CloseProfit:0, PositionProfit:0, Balance:0, Available:0, WithdrawQuota:0, Reserve:0, TradingDay:'', SettlementID:0, Credit:0, Mortgage:0, ExchangeMargin:0, DeliveryMargin:0, ExchangeDeliveryMargin:0, ReserveBalance:0, CurrencyID:'', PreFundMortgageIn:0, PreFundMortgageOut:0, FundMortgageIn:0, FundMortgageOut:0, FundMortgageAvailable:0, MortgageableFund:0, SpecProductMargin:0, SpecProductFrozenMargin:0, SpecProductCommission:0, SpecProductFrozenCommission:0, SpecProductPositionProfit:0, SpecProductCloseProfit:0, SpecProductPositionProfitByAlg:0, SpecProductExchangeMargin:0, FrozenSwap:0, RemainSwap:0, }};
exports.CThostFtdcSyncingInvestorPositionFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('PosiDirection', stropt(1)).string('HedgeFlag', stropt(1)).string('PositionDate', stropt(1)).skip(2).int32le('YdPosition').int32le('Position').int32le('LongFrozen').int32le('ShortFrozen').skip(4).doublele('LongFrozenAmount').doublele('ShortFrozenAmount').int32le('OpenVolume').int32le('CloseVolume').doublele('OpenAmount').doublele('CloseAmount').doublele('PositionCost').doublele('PreMargin').doublele('UseMargin').doublele('FrozenMargin').doublele('FrozenCash').doublele('FrozenCommission').doublele('CashIn').doublele('Commission').doublele('CloseProfit').doublele('PositionProfit').doublele('PreSettlementPrice').doublele('SettlementPrice').string('TradingDay', stropt(9)).skip(3).int32le('SettlementID').doublele('OpenCost').doublele('ExchangeMargin').int32le('CombPosition').int32le('CombLongFrozen').int32le('CombShortFrozen').skip(4).doublele('CloseProfitByDate').doublele('CloseProfitByTrade').int32le('TodayPosition').skip(4).doublele('MarginRateByMoney').doublele('MarginRateByVolume').int32le('StrikeFrozen').skip(4).doublele('StrikeFrozenAmount').int32le('AbandonFrozen').string('ExchangeID', stropt(9)).skip(3).int32le('YdStrikeFrozen').string('InvestUnitID', stropt(17)).skip(3).doublele('PositionCostOffset');
exports.CThostFtdcSyncingInvestorPositionFieldInit = () => {return {InstrumentID:'', BrokerID:'', InvestorID:'', PosiDirection:'', HedgeFlag:'', PositionDate:'', YdPosition:0, Position:0, LongFrozen:0, ShortFrozen:0, LongFrozenAmount:0, ShortFrozenAmount:0, OpenVolume:0, CloseVolume:0, OpenAmount:0, CloseAmount:0, PositionCost:0, PreMargin:0, UseMargin:0, FrozenMargin:0, FrozenCash:0, FrozenCommission:0, CashIn:0, Commission:0, CloseProfit:0, PositionProfit:0, PreSettlementPrice:0, SettlementPrice:0, TradingDay:'', SettlementID:0, OpenCost:0, ExchangeMargin:0, CombPosition:0, CombLongFrozen:0, CombShortFrozen:0, CloseProfitByDate:0, CloseProfitByTrade:0, TodayPosition:0, MarginRateByMoney:0, MarginRateByVolume:0, StrikeFrozen:0, StrikeFrozenAmount:0, AbandonFrozen:0, ExchangeID:'', YdStrikeFrozen:0, InvestUnitID:'', PositionCostOffset:0, }};
exports.CThostFtdcSyncingInstrumentMarginRateFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('HedgeFlag', stropt(1)).skip(7).doublele('LongMarginRatioByMoney').doublele('LongMarginRatioByVolume').doublele('ShortMarginRatioByMoney').doublele('ShortMarginRatioByVolume').int32le('IsRelative').skip(4);
exports.CThostFtdcSyncingInstrumentMarginRateFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', HedgeFlag:'', LongMarginRatioByMoney:0, LongMarginRatioByVolume:0, ShortMarginRatioByMoney:0, ShortMarginRatioByVolume:0, IsRelative:0, }};
exports.CThostFtdcSyncingInstrumentCommissionRateFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('OpenRatioByMoney').doublele('OpenRatioByVolume').doublele('CloseRatioByMoney').doublele('CloseRatioByVolume').doublele('CloseTodayRatioByMoney').doublele('CloseTodayRatioByVolume');
exports.CThostFtdcSyncingInstrumentCommissionRateFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', OpenRatioByMoney:0, OpenRatioByVolume:0, CloseRatioByMoney:0, CloseRatioByVolume:0, CloseTodayRatioByMoney:0, CloseTodayRatioByVolume:0, }};
exports.CThostFtdcSyncingInstrumentTradingRightFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('TradingRight', stropt(1));
exports.CThostFtdcSyncingInstrumentTradingRightFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', TradingRight:'', }};
exports.CThostFtdcQryOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('OrderSysID', stropt(21)).string('InsertTimeStart', stropt(9)).string('InsertTimeEnd', stropt(9)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryOrderFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExchangeID:'', OrderSysID:'', InsertTimeStart:'', InsertTimeEnd:'', InvestUnitID:'', }};
exports.CThostFtdcQryTradeFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('TradeID', stropt(21)).string('TradeTimeStart', stropt(9)).string('TradeTimeEnd', stropt(9)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryTradeFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExchangeID:'', TradeID:'', TradeTimeStart:'', TradeTimeEnd:'', InvestUnitID:'', }};
exports.CThostFtdcQryInvestorPositionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryInvestorPositionFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcQryTradingAccountFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('CurrencyID', stropt(4)).string('BizType', stropt(1)).string('AccountID', stropt(13));
exports.CThostFtdcQryTradingAccountFieldInit = () => {return {BrokerID:'', InvestorID:'', CurrencyID:'', BizType:'', AccountID:'', }};
exports.CThostFtdcQryInvestorFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13));
exports.CThostFtdcQryInvestorFieldInit = () => {return {BrokerID:'', InvestorID:'', }};
exports.CThostFtdcQryTradingCodeFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ExchangeID', stropt(9)).string('ClientID', stropt(11)).string('ClientIDType', stropt(11)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryTradingCodeFieldInit = () => {return {BrokerID:'', InvestorID:'', ExchangeID:'', ClientID:'', ClientIDType:'', InvestUnitID:'', }};
exports.CThostFtdcQryInvestorGroupFieldParser = () => new Parser().string('BrokerID', stropt(11));
exports.CThostFtdcQryInvestorGroupFieldInit = () => {return {BrokerID:'', }};
exports.CThostFtdcQryInstrumentMarginRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('HedgeFlag', stropt(1)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryInstrumentMarginRateFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', HedgeFlag:'', ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcQryInstrumentCommissionRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryInstrumentCommissionRateFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcQryInstrumentTradingRightFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31));
exports.CThostFtdcQryInstrumentTradingRightFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', }};
exports.CThostFtdcQryBrokerFieldParser = () => new Parser().string('BrokerID', stropt(11));
exports.CThostFtdcQryBrokerFieldInit = () => {return {BrokerID:'', }};
exports.CThostFtdcQryTraderFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('TraderID', stropt(21));
exports.CThostFtdcQryTraderFieldInit = () => {return {ExchangeID:'', ParticipantID:'', TraderID:'', }};
exports.CThostFtdcQrySuperUserFunctionFieldParser = () => new Parser().string('UserID', stropt(16));
exports.CThostFtdcQrySuperUserFunctionFieldInit = () => {return {UserID:'', }};
exports.CThostFtdcQryUserSessionFieldParser = () => new Parser().int32le('FrontID').int32le('SessionID').string('BrokerID', stropt(11)).string('UserID', stropt(16)).skip(1);
exports.CThostFtdcQryUserSessionFieldInit = () => {return {FrontID:0, SessionID:0, BrokerID:'', UserID:'', }};
exports.CThostFtdcQryPartBrokerFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('BrokerID', stropt(11)).string('ParticipantID', stropt(11));
exports.CThostFtdcQryPartBrokerFieldInit = () => {return {ExchangeID:'', BrokerID:'', ParticipantID:'', }};
exports.CThostFtdcQryFrontStatusFieldParser = () => new Parser().int32le('FrontID');
exports.CThostFtdcQryFrontStatusFieldInit = () => {return {FrontID:0, }};
exports.CThostFtdcQryExchangeOrderFieldParser = () => new Parser().string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('ExchangeID', stropt(9)).string('TraderID', stropt(21));
exports.CThostFtdcQryExchangeOrderFieldInit = () => {return {ParticipantID:'', ClientID:'', ExchangeInstID:'', ExchangeID:'', TraderID:'', }};
exports.CThostFtdcQryOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ExchangeID', stropt(9));
exports.CThostFtdcQryOrderActionFieldInit = () => {return {BrokerID:'', InvestorID:'', ExchangeID:'', }};
exports.CThostFtdcQryExchangeOrderActionFieldParser = () => new Parser().string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeID', stropt(9)).string('TraderID', stropt(21));
exports.CThostFtdcQryExchangeOrderActionFieldInit = () => {return {ParticipantID:'', ClientID:'', ExchangeID:'', TraderID:'', }};
exports.CThostFtdcQrySuperUserFieldParser = () => new Parser().string('UserID', stropt(16));
exports.CThostFtdcQrySuperUserFieldInit = () => {return {UserID:'', }};
exports.CThostFtdcQryExchangeFieldParser = () => new Parser().string('ExchangeID', stropt(9));
exports.CThostFtdcQryExchangeFieldInit = () => {return {ExchangeID:'', }};
exports.CThostFtdcQryProductFieldParser = () => new Parser().string('ProductID', stropt(31)).string('ProductClass', stropt(1)).string('ExchangeID', stropt(9));
exports.CThostFtdcQryProductFieldInit = () => {return {ProductID:'', ProductClass:'', ExchangeID:'', }};
exports.CThostFtdcQryInstrumentFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('ExchangeInstID', stropt(31)).string('ProductID', stropt(31));
exports.CThostFtdcQryInstrumentFieldInit = () => {return {InstrumentID:'', ExchangeID:'', ExchangeInstID:'', ProductID:'', }};
exports.CThostFtdcQryDepthMarketDataFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9));
exports.CThostFtdcQryDepthMarketDataFieldInit = () => {return {InstrumentID:'', ExchangeID:'', }};
exports.CThostFtdcQryBrokerUserFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports.CThostFtdcQryBrokerUserFieldInit = () => {return {BrokerID:'', UserID:'', }};
exports.CThostFtdcQryBrokerUserFunctionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports.CThostFtdcQryBrokerUserFunctionFieldInit = () => {return {BrokerID:'', UserID:'', }};
exports.CThostFtdcQryTraderOfferFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('TraderID', stropt(21));
exports.CThostFtdcQryTraderOfferFieldInit = () => {return {ExchangeID:'', ParticipantID:'', TraderID:'', }};
exports.CThostFtdcQrySyncDepositFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('DepositSeqNo', stropt(15));
exports.CThostFtdcQrySyncDepositFieldInit = () => {return {BrokerID:'', DepositSeqNo:'', }};
exports.CThostFtdcQrySettlementInfoFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('TradingDay', stropt(9)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4));
exports.CThostFtdcQrySettlementInfoFieldInit = () => {return {BrokerID:'', InvestorID:'', TradingDay:'', AccountID:'', CurrencyID:'', }};
exports.CThostFtdcQryExchangeMarginRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).string('HedgeFlag', stropt(1)).string('ExchangeID', stropt(9));
exports.CThostFtdcQryExchangeMarginRateFieldInit = () => {return {BrokerID:'', InstrumentID:'', HedgeFlag:'', ExchangeID:'', }};
exports.CThostFtdcQryExchangeMarginRateAdjustFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).string('HedgeFlag', stropt(1));
exports.CThostFtdcQryExchangeMarginRateAdjustFieldInit = () => {return {BrokerID:'', InstrumentID:'', HedgeFlag:'', }};
exports.CThostFtdcQryExchangeRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('FromCurrencyID', stropt(4)).string('ToCurrencyID', stropt(4));
exports.CThostFtdcQryExchangeRateFieldInit = () => {return {BrokerID:'', FromCurrencyID:'', ToCurrencyID:'', }};
exports.CThostFtdcQrySyncFundMortgageFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('MortgageSeqNo', stropt(15));
exports.CThostFtdcQrySyncFundMortgageFieldInit = () => {return {BrokerID:'', MortgageSeqNo:'', }};
exports.CThostFtdcQryHisOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('OrderSysID', stropt(21)).string('InsertTimeStart', stropt(9)).string('InsertTimeEnd', stropt(9)).string('TradingDay', stropt(9)).int32le('SettlementID');
exports.CThostFtdcQryHisOrderFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExchangeID:'', OrderSysID:'', InsertTimeStart:'', InsertTimeEnd:'', TradingDay:'', SettlementID:0, }};
exports.CThostFtdcOptionInstrMiniMarginFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('MinMargin').string('ValueMethod', stropt(1)).skip(3).int32le('IsRelative');
exports.CThostFtdcOptionInstrMiniMarginFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', MinMargin:0, ValueMethod:'', IsRelative:0, }};
exports.CThostFtdcOptionInstrMarginAdjustFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('SShortMarginRatioByMoney').doublele('SShortMarginRatioByVolume').doublele('HShortMarginRatioByMoney').doublele('HShortMarginRatioByVolume').doublele('AShortMarginRatioByMoney').doublele('AShortMarginRatioByVolume').int32le('IsRelative').skip(4).doublele('MShortMarginRatioByMoney').doublele('MShortMarginRatioByVolume');
exports.CThostFtdcOptionInstrMarginAdjustFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', SShortMarginRatioByMoney:0, SShortMarginRatioByVolume:0, HShortMarginRatioByMoney:0, HShortMarginRatioByVolume:0, AShortMarginRatioByMoney:0, AShortMarginRatioByVolume:0, IsRelative:0, MShortMarginRatioByMoney:0, MShortMarginRatioByVolume:0, }};
exports.CThostFtdcOptionInstrCommRateFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('OpenRatioByMoney').doublele('OpenRatioByVolume').doublele('CloseRatioByMoney').doublele('CloseRatioByVolume').doublele('CloseTodayRatioByMoney').doublele('CloseTodayRatioByVolume').doublele('StrikeRatioByMoney').doublele('StrikeRatioByVolume').string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).skip(6);
exports.CThostFtdcOptionInstrCommRateFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', OpenRatioByMoney:0, OpenRatioByVolume:0, CloseRatioByMoney:0, CloseRatioByVolume:0, CloseTodayRatioByMoney:0, CloseTodayRatioByVolume:0, StrikeRatioByMoney:0, StrikeRatioByVolume:0, ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcOptionInstrTradeCostFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('HedgeFlag', stropt(1)).doublele('FixedMargin').doublele('MiniMargin').doublele('Royalty').doublele('ExchFixedMargin').doublele('ExchMiniMargin').string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).skip(6);
exports.CThostFtdcOptionInstrTradeCostFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', HedgeFlag:'', FixedMargin:0, MiniMargin:0, Royalty:0, ExchFixedMargin:0, ExchMiniMargin:0, ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcQryOptionInstrTradeCostFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('HedgeFlag', stropt(1)).doublele('InputPrice').doublele('UnderlyingPrice').string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).skip(6);
exports.CThostFtdcQryOptionInstrTradeCostFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', HedgeFlag:'', InputPrice:0, UnderlyingPrice:0, ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcQryOptionInstrCommRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryOptionInstrCommRateFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcIndexPriceFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).skip(6).doublele('ClosePrice');
exports.CThostFtdcIndexPriceFieldInit = () => {return {BrokerID:'', InstrumentID:'', ClosePrice:0, }};
exports.CThostFtdcInputExecOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExecOrderRef', stropt(13)).string('UserID', stropt(16)).int32le('Volume').int32le('RequestID').string('BusinessUnit', stropt(21)).string('OffsetFlag', stropt(1)).string('HedgeFlag', stropt(1)).string('ActionType', stropt(1)).string('PosiDirection', stropt(1)).string('ReservePositionFlag', stropt(1)).string('CloseFlag', stropt(1)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('ClientID', stropt(11)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(2);
exports.CThostFtdcInputExecOrderFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExecOrderRef:'', UserID:'', Volume:0, RequestID:0, BusinessUnit:'', OffsetFlag:'', HedgeFlag:'', ActionType:'', PosiDirection:'', ReservePositionFlag:'', CloseFlag:'', ExchangeID:'', InvestUnitID:'', AccountID:'', CurrencyID:'', ClientID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcInputExecOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('ExecOrderActionRef').string('ExecOrderRef', stropt(13)).skip(3).int32le('RequestID').int32le('FrontID').int32le('SessionID').string('ExchangeID', stropt(9)).string('ExecOrderSysID', stropt(21)).string('ActionFlag', stropt(1)).string('UserID', stropt(16)).string('InstrumentID', stropt(31)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports.CThostFtdcInputExecOrderActionFieldInit = () => {return {BrokerID:'', InvestorID:'', ExecOrderActionRef:0, ExecOrderRef:'', RequestID:0, FrontID:0, SessionID:0, ExchangeID:'', ExecOrderSysID:'', ActionFlag:'', UserID:'', InstrumentID:'', InvestUnitID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcExecOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExecOrderRef', stropt(13)).string('UserID', stropt(16)).int32le('Volume').int32le('RequestID').string('BusinessUnit', stropt(21)).string('OffsetFlag', stropt(1)).string('HedgeFlag', stropt(1)).string('ActionType', stropt(1)).string('PosiDirection', stropt(1)).string('ReservePositionFlag', stropt(1)).string('CloseFlag', stropt(1)).string('ExecOrderLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).skip(1).int32le('InstallID').string('OrderSubmitStatus', stropt(1)).skip(3).int32le('NotifySequence').string('TradingDay', stropt(9)).skip(3).int32le('SettlementID').string('ExecOrderSysID', stropt(21)).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('CancelTime', stropt(9)).string('ExecResult', stropt(1)).string('ClearingPartID', stropt(11)).int32le('SequenceNo').int32le('FrontID').int32le('SessionID').string('UserProductInfo', stropt(11)).array('StatusMsg', {type:'uint8', length: 81}).string('ActiveUserID', stropt(16)).int32le('BrokerExecOrderSeq').string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports.CThostFtdcExecOrderFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExecOrderRef:'', UserID:'', Volume:0, RequestID:0, BusinessUnit:'', OffsetFlag:'', HedgeFlag:'', ActionType:'', PosiDirection:'', ReservePositionFlag:'', CloseFlag:'', ExecOrderLocalID:'', ExchangeID:'', ParticipantID:'', ClientID:'', ExchangeInstID:'', TraderID:'', InstallID:0, OrderSubmitStatus:'', NotifySequence:0, TradingDay:'', SettlementID:0, ExecOrderSysID:'', InsertDate:'', InsertTime:'', CancelTime:'', ExecResult:'', ClearingPartID:'', SequenceNo:0, FrontID:0, SessionID:0, UserProductInfo:'', StatusMsg:'', ActiveUserID:'', BrokerExecOrderSeq:0, BranchID:'', InvestUnitID:'', AccountID:'', CurrencyID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcExecOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('ExecOrderActionRef').string('ExecOrderRef', stropt(13)).skip(3).int32le('RequestID').int32le('FrontID').int32le('SessionID').string('ExchangeID', stropt(9)).string('ExecOrderSysID', stropt(21)).string('ActionFlag', stropt(1)).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).skip(2).int32le('InstallID').string('ExecOrderLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('ActionType', stropt(1)).array('StatusMsg', {type:'uint8', length: 81}).string('InstrumentID', stropt(31)).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(2);
exports.CThostFtdcExecOrderActionFieldInit = () => {return {BrokerID:'', InvestorID:'', ExecOrderActionRef:0, ExecOrderRef:'', RequestID:0, FrontID:0, SessionID:0, ExchangeID:'', ExecOrderSysID:'', ActionFlag:'', ActionDate:'', ActionTime:'', TraderID:'', InstallID:0, ExecOrderLocalID:'', ActionLocalID:'', ParticipantID:'', ClientID:'', BusinessUnit:'', OrderActionStatus:'', UserID:'', ActionType:'', StatusMsg:'', InstrumentID:'', BranchID:'', InvestUnitID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcQryExecOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('ExecOrderSysID', stropt(21)).string('InsertTimeStart', stropt(9)).string('InsertTimeEnd', stropt(9));
exports.CThostFtdcQryExecOrderFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExchangeID:'', ExecOrderSysID:'', InsertTimeStart:'', InsertTimeEnd:'', }};
exports.CThostFtdcExchangeExecOrderFieldParser = () => new Parser().int32le('Volume').int32le('RequestID').string('BusinessUnit', stropt(21)).string('OffsetFlag', stropt(1)).string('HedgeFlag', stropt(1)).string('ActionType', stropt(1)).string('PosiDirection', stropt(1)).string('ReservePositionFlag', stropt(1)).string('CloseFlag', stropt(1)).string('ExecOrderLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).skip(1).int32le('InstallID').string('OrderSubmitStatus', stropt(1)).skip(3).int32le('NotifySequence').string('TradingDay', stropt(9)).skip(3).int32le('SettlementID').string('ExecOrderSysID', stropt(21)).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('CancelTime', stropt(9)).string('ExecResult', stropt(1)).string('ClearingPartID', stropt(11)).int32le('SequenceNo').string('BranchID', stropt(9)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(2);
exports.CThostFtdcExchangeExecOrderFieldInit = () => {return {Volume:0, RequestID:0, BusinessUnit:'', OffsetFlag:'', HedgeFlag:'', ActionType:'', PosiDirection:'', ReservePositionFlag:'', CloseFlag:'', ExecOrderLocalID:'', ExchangeID:'', ParticipantID:'', ClientID:'', ExchangeInstID:'', TraderID:'', InstallID:0, OrderSubmitStatus:'', NotifySequence:0, TradingDay:'', SettlementID:0, ExecOrderSysID:'', InsertDate:'', InsertTime:'', CancelTime:'', ExecResult:'', ClearingPartID:'', SequenceNo:0, BranchID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcQryExchangeExecOrderFieldParser = () => new Parser().string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('ExchangeID', stropt(9)).string('TraderID', stropt(21));
exports.CThostFtdcQryExchangeExecOrderFieldInit = () => {return {ParticipantID:'', ClientID:'', ExchangeInstID:'', ExchangeID:'', TraderID:'', }};
exports.CThostFtdcQryExecOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ExchangeID', stropt(9));
exports.CThostFtdcQryExecOrderActionFieldInit = () => {return {BrokerID:'', InvestorID:'', ExchangeID:'', }};
exports.CThostFtdcExchangeExecOrderActionFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ExecOrderSysID', stropt(21)).string('ActionFlag', stropt(1)).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).skip(2).int32le('InstallID').string('ExecOrderLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('ActionType', stropt(1)).string('BranchID', stropt(9)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).string('ExchangeInstID', stropt(31)).int32le('Volume');
exports.CThostFtdcExchangeExecOrderActionFieldInit = () => {return {ExchangeID:'', ExecOrderSysID:'', ActionFlag:'', ActionDate:'', ActionTime:'', TraderID:'', InstallID:0, ExecOrderLocalID:'', ActionLocalID:'', ParticipantID:'', ClientID:'', BusinessUnit:'', OrderActionStatus:'', UserID:'', ActionType:'', BranchID:'', IPAddress:'', MacAddress:'', ExchangeInstID:'', Volume:0, }};
exports.CThostFtdcQryExchangeExecOrderActionFieldParser = () => new Parser().string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeID', stropt(9)).string('TraderID', stropt(21));
exports.CThostFtdcQryExchangeExecOrderActionFieldInit = () => {return {ParticipantID:'', ClientID:'', ExchangeID:'', TraderID:'', }};
exports.CThostFtdcErrExecOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExecOrderRef', stropt(13)).string('UserID', stropt(16)).int32le('Volume').int32le('RequestID').string('BusinessUnit', stropt(21)).string('OffsetFlag', stropt(1)).string('HedgeFlag', stropt(1)).string('ActionType', stropt(1)).string('PosiDirection', stropt(1)).string('ReservePositionFlag', stropt(1)).string('CloseFlag', stropt(1)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('ClientID', stropt(11)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(2).int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(3);
exports.CThostFtdcErrExecOrderFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExecOrderRef:'', UserID:'', Volume:0, RequestID:0, BusinessUnit:'', OffsetFlag:'', HedgeFlag:'', ActionType:'', PosiDirection:'', ReservePositionFlag:'', CloseFlag:'', ExchangeID:'', InvestUnitID:'', AccountID:'', CurrencyID:'', ClientID:'', IPAddress:'', MacAddress:'', ErrorID:0, ErrorMsg:'', }};
exports.CThostFtdcQryErrExecOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13));
exports.CThostFtdcQryErrExecOrderFieldInit = () => {return {BrokerID:'', InvestorID:'', }};
exports.CThostFtdcErrExecOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('ExecOrderActionRef').string('ExecOrderRef', stropt(13)).skip(3).int32le('RequestID').int32le('FrontID').int32le('SessionID').string('ExchangeID', stropt(9)).string('ExecOrderSysID', stropt(21)).string('ActionFlag', stropt(1)).string('UserID', stropt(16)).string('InstrumentID', stropt(31)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(3);
exports.CThostFtdcErrExecOrderActionFieldInit = () => {return {BrokerID:'', InvestorID:'', ExecOrderActionRef:0, ExecOrderRef:'', RequestID:0, FrontID:0, SessionID:0, ExchangeID:'', ExecOrderSysID:'', ActionFlag:'', UserID:'', InstrumentID:'', InvestUnitID:'', IPAddress:'', MacAddress:'', ErrorID:0, ErrorMsg:'', }};
exports.CThostFtdcQryErrExecOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13));
exports.CThostFtdcQryErrExecOrderActionFieldInit = () => {return {BrokerID:'', InvestorID:'', }};
exports.CThostFtdcOptionInstrTradingRightFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('Direction', stropt(1)).string('TradingRight', stropt(1));
exports.CThostFtdcOptionInstrTradingRightFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', Direction:'', TradingRight:'', }};
exports.CThostFtdcQryOptionInstrTradingRightFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('Direction', stropt(1));
exports.CThostFtdcQryOptionInstrTradingRightFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', Direction:'', }};
exports.CThostFtdcInputForQuoteFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ForQuoteRef', stropt(13)).string('UserID', stropt(16)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports.CThostFtdcInputForQuoteFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ForQuoteRef:'', UserID:'', ExchangeID:'', InvestUnitID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcForQuoteFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ForQuoteRef', stropt(13)).string('UserID', stropt(16)).string('ForQuoteLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('ForQuoteStatus', stropt(1)).skip(1).int32le('FrontID').int32le('SessionID').array('StatusMsg', {type:'uint8', length: 81}).string('ActiveUserID', stropt(16)).skip(3).int32le('BrokerForQutoSeq').string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(2);
exports.CThostFtdcForQuoteFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ForQuoteRef:'', UserID:'', ForQuoteLocalID:'', ExchangeID:'', ParticipantID:'', ClientID:'', ExchangeInstID:'', TraderID:'', InstallID:0, InsertDate:'', InsertTime:'', ForQuoteStatus:'', FrontID:0, SessionID:0, StatusMsg:'', ActiveUserID:'', BrokerForQutoSeq:0, InvestUnitID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcQryForQuoteFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InsertTimeStart', stropt(9)).string('InsertTimeEnd', stropt(9)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryForQuoteFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExchangeID:'', InsertTimeStart:'', InsertTimeEnd:'', InvestUnitID:'', }};
exports.CThostFtdcExchangeForQuoteFieldParser = () => new Parser().string('ForQuoteLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('ForQuoteStatus', stropt(1)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports.CThostFtdcExchangeForQuoteFieldInit = () => {return {ForQuoteLocalID:'', ExchangeID:'', ParticipantID:'', ClientID:'', ExchangeInstID:'', TraderID:'', InstallID:0, InsertDate:'', InsertTime:'', ForQuoteStatus:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcQryExchangeForQuoteFieldParser = () => new Parser().string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('ExchangeID', stropt(9)).string('TraderID', stropt(21));
exports.CThostFtdcQryExchangeForQuoteFieldInit = () => {return {ParticipantID:'', ClientID:'', ExchangeInstID:'', ExchangeID:'', TraderID:'', }};
exports.CThostFtdcInputQuoteFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('QuoteRef', stropt(13)).string('UserID', stropt(16)).skip(4).doublele('AskPrice').doublele('BidPrice').int32le('AskVolume').int32le('BidVolume').int32le('RequestID').string('BusinessUnit', stropt(21)).string('AskOffsetFlag', stropt(1)).string('BidOffsetFlag', stropt(1)).string('AskHedgeFlag', stropt(1)).string('BidHedgeFlag', stropt(1)).string('AskOrderRef', stropt(13)).string('BidOrderRef', stropt(13)).string('ForQuoteSysID', stropt(21)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).string('ClientID', stropt(11)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(2);
exports.CThostFtdcInputQuoteFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', QuoteRef:'', UserID:'', AskPrice:0, BidPrice:0, AskVolume:0, BidVolume:0, RequestID:0, BusinessUnit:'', AskOffsetFlag:'', BidOffsetFlag:'', AskHedgeFlag:'', BidHedgeFlag:'', AskOrderRef:'', BidOrderRef:'', ForQuoteSysID:'', ExchangeID:'', InvestUnitID:'', ClientID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcInputQuoteActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('QuoteActionRef').string('QuoteRef', stropt(13)).skip(3).int32le('RequestID').int32le('FrontID').int32le('SessionID').string('ExchangeID', stropt(9)).string('QuoteSysID', stropt(21)).string('ActionFlag', stropt(1)).string('UserID', stropt(16)).string('InstrumentID', stropt(31)).string('InvestUnitID', stropt(17)).string('ClientID', stropt(11)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(1);
exports.CThostFtdcInputQuoteActionFieldInit = () => {return {BrokerID:'', InvestorID:'', QuoteActionRef:0, QuoteRef:'', RequestID:0, FrontID:0, SessionID:0, ExchangeID:'', QuoteSysID:'', ActionFlag:'', UserID:'', InstrumentID:'', InvestUnitID:'', ClientID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcQuoteFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('QuoteRef', stropt(13)).string('UserID', stropt(16)).skip(4).doublele('AskPrice').doublele('BidPrice').int32le('AskVolume').int32le('BidVolume').int32le('RequestID').string('BusinessUnit', stropt(21)).string('AskOffsetFlag', stropt(1)).string('BidOffsetFlag', stropt(1)).string('AskHedgeFlag', stropt(1)).string('BidHedgeFlag', stropt(1)).string('QuoteLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).skip(3).int32le('InstallID').int32le('NotifySequence').string('OrderSubmitStatus', stropt(1)).string('TradingDay', stropt(9)).skip(2).int32le('SettlementID').string('QuoteSysID', stropt(21)).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('CancelTime', stropt(9)).string('QuoteStatus', stropt(1)).string('ClearingPartID', stropt(11)).int32le('SequenceNo').string('AskOrderSysID', stropt(21)).string('BidOrderSysID', stropt(21)).skip(2).int32le('FrontID').int32le('SessionID').string('UserProductInfo', stropt(11)).array('StatusMsg', {type:'uint8', length: 81}).string('ActiveUserID', stropt(16)).int32le('BrokerQuoteSeq').string('AskOrderRef', stropt(13)).string('BidOrderRef', stropt(13)).string('ForQuoteSysID', stropt(21)).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(5);
exports.CThostFtdcQuoteFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', QuoteRef:'', UserID:'', AskPrice:0, BidPrice:0, AskVolume:0, BidVolume:0, RequestID:0, BusinessUnit:'', AskOffsetFlag:'', BidOffsetFlag:'', AskHedgeFlag:'', BidHedgeFlag:'', QuoteLocalID:'', ExchangeID:'', ParticipantID:'', ClientID:'', ExchangeInstID:'', TraderID:'', InstallID:0, NotifySequence:0, OrderSubmitStatus:'', TradingDay:'', SettlementID:0, QuoteSysID:'', InsertDate:'', InsertTime:'', CancelTime:'', QuoteStatus:'', ClearingPartID:'', SequenceNo:0, AskOrderSysID:'', BidOrderSysID:'', FrontID:0, SessionID:0, UserProductInfo:'', StatusMsg:'', ActiveUserID:'', BrokerQuoteSeq:0, AskOrderRef:'', BidOrderRef:'', ForQuoteSysID:'', BranchID:'', InvestUnitID:'', AccountID:'', CurrencyID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcQuoteActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('QuoteActionRef').string('QuoteRef', stropt(13)).skip(3).int32le('RequestID').int32le('FrontID').int32le('SessionID').string('ExchangeID', stropt(9)).string('QuoteSysID', stropt(21)).string('ActionFlag', stropt(1)).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).skip(2).int32le('InstallID').string('QuoteLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).array('StatusMsg', {type:'uint8', length: 81}).string('InstrumentID', stropt(31)).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(3);
exports.CThostFtdcQuoteActionFieldInit = () => {return {BrokerID:'', InvestorID:'', QuoteActionRef:0, QuoteRef:'', RequestID:0, FrontID:0, SessionID:0, ExchangeID:'', QuoteSysID:'', ActionFlag:'', ActionDate:'', ActionTime:'', TraderID:'', InstallID:0, QuoteLocalID:'', ActionLocalID:'', ParticipantID:'', ClientID:'', BusinessUnit:'', OrderActionStatus:'', UserID:'', StatusMsg:'', InstrumentID:'', BranchID:'', InvestUnitID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcQryQuoteFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('QuoteSysID', stropt(21)).string('InsertTimeStart', stropt(9)).string('InsertTimeEnd', stropt(9)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryQuoteFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExchangeID:'', QuoteSysID:'', InsertTimeStart:'', InsertTimeEnd:'', InvestUnitID:'', }};
exports.CThostFtdcExchangeQuoteFieldParser = () => new Parser().doublele('AskPrice').doublele('BidPrice').int32le('AskVolume').int32le('BidVolume').int32le('RequestID').string('BusinessUnit', stropt(21)).string('AskOffsetFlag', stropt(1)).string('BidOffsetFlag', stropt(1)).string('AskHedgeFlag', stropt(1)).string('BidHedgeFlag', stropt(1)).string('QuoteLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).skip(3).int32le('InstallID').int32le('NotifySequence').string('OrderSubmitStatus', stropt(1)).string('TradingDay', stropt(9)).skip(2).int32le('SettlementID').string('QuoteSysID', stropt(21)).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('CancelTime', stropt(9)).string('QuoteStatus', stropt(1)).string('ClearingPartID', stropt(11)).int32le('SequenceNo').string('AskOrderSysID', stropt(21)).string('BidOrderSysID', stropt(21)).string('ForQuoteSysID', stropt(21)).string('BranchID', stropt(9)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(3);
exports.CThostFtdcExchangeQuoteFieldInit = () => {return {AskPrice:0, BidPrice:0, AskVolume:0, BidVolume:0, RequestID:0, BusinessUnit:'', AskOffsetFlag:'', BidOffsetFlag:'', AskHedgeFlag:'', BidHedgeFlag:'', QuoteLocalID:'', ExchangeID:'', ParticipantID:'', ClientID:'', ExchangeInstID:'', TraderID:'', InstallID:0, NotifySequence:0, OrderSubmitStatus:'', TradingDay:'', SettlementID:0, QuoteSysID:'', InsertDate:'', InsertTime:'', CancelTime:'', QuoteStatus:'', ClearingPartID:'', SequenceNo:0, AskOrderSysID:'', BidOrderSysID:'', ForQuoteSysID:'', BranchID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcQryExchangeQuoteFieldParser = () => new Parser().string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('ExchangeID', stropt(9)).string('TraderID', stropt(21));
exports.CThostFtdcQryExchangeQuoteFieldInit = () => {return {ParticipantID:'', ClientID:'', ExchangeInstID:'', ExchangeID:'', TraderID:'', }};
exports.CThostFtdcQryQuoteActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ExchangeID', stropt(9));
exports.CThostFtdcQryQuoteActionFieldInit = () => {return {BrokerID:'', InvestorID:'', ExchangeID:'', }};
exports.CThostFtdcExchangeQuoteActionFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('QuoteSysID', stropt(21)).string('ActionFlag', stropt(1)).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).skip(2).int32le('InstallID').string('QuoteLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(1);
exports.CThostFtdcExchangeQuoteActionFieldInit = () => {return {ExchangeID:'', QuoteSysID:'', ActionFlag:'', ActionDate:'', ActionTime:'', TraderID:'', InstallID:0, QuoteLocalID:'', ActionLocalID:'', ParticipantID:'', ClientID:'', BusinessUnit:'', OrderActionStatus:'', UserID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcQryExchangeQuoteActionFieldParser = () => new Parser().string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeID', stropt(9)).string('TraderID', stropt(21));
exports.CThostFtdcQryExchangeQuoteActionFieldInit = () => {return {ParticipantID:'', ClientID:'', ExchangeID:'', TraderID:'', }};
exports.CThostFtdcOptionInstrDeltaFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('Delta');
exports.CThostFtdcOptionInstrDeltaFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', Delta:0, }};
exports.CThostFtdcForQuoteRspFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('InstrumentID', stropt(31)).string('ForQuoteSysID', stropt(21)).string('ForQuoteTime', stropt(9)).string('ActionDay', stropt(9)).string('ExchangeID', stropt(9));
exports.CThostFtdcForQuoteRspFieldInit = () => {return {TradingDay:'', InstrumentID:'', ForQuoteSysID:'', ForQuoteTime:'', ActionDay:'', ExchangeID:'', }};
exports.CThostFtdcStrikeOffsetFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('Offset').string('OffsetType', stropt(1)).skip(7);
exports.CThostFtdcStrikeOffsetFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', Offset:0, OffsetType:'', }};
exports.CThostFtdcQryStrikeOffsetFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31));
exports.CThostFtdcQryStrikeOffsetFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', }};
exports.CThostFtdcInputBatchOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('OrderActionRef').int32le('RequestID').int32le('FrontID').int32le('SessionID').string('ExchangeID', stropt(9)).string('UserID', stropt(16)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(1);
exports.CThostFtdcInputBatchOrderActionFieldInit = () => {return {BrokerID:'', InvestorID:'', OrderActionRef:0, RequestID:0, FrontID:0, SessionID:0, ExchangeID:'', UserID:'', InvestUnitID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcBatchOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('OrderActionRef').int32le('RequestID').int32le('FrontID').int32le('SessionID').string('ExchangeID', stropt(9)).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).int32le('InstallID').string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).array('StatusMsg', {type:'uint8', length: 81}).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports.CThostFtdcBatchOrderActionFieldInit = () => {return {BrokerID:'', InvestorID:'', OrderActionRef:0, RequestID:0, FrontID:0, SessionID:0, ExchangeID:'', ActionDate:'', ActionTime:'', TraderID:'', InstallID:0, ActionLocalID:'', ParticipantID:'', ClientID:'', BusinessUnit:'', OrderActionStatus:'', UserID:'', StatusMsg:'', InvestUnitID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcExchangeBatchOrderActionFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).int32le('InstallID').string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(2);
exports.CThostFtdcExchangeBatchOrderActionFieldInit = () => {return {ExchangeID:'', ActionDate:'', ActionTime:'', TraderID:'', InstallID:0, ActionLocalID:'', ParticipantID:'', ClientID:'', BusinessUnit:'', OrderActionStatus:'', UserID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcQryBatchOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ExchangeID', stropt(9));
exports.CThostFtdcQryBatchOrderActionFieldInit = () => {return {BrokerID:'', InvestorID:'', ExchangeID:'', }};
exports.CThostFtdcCombInstrumentGuardFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).skip(6).doublele('GuarantRatio').string('ExchangeID', stropt(9)).skip(7);
exports.CThostFtdcCombInstrumentGuardFieldInit = () => {return {BrokerID:'', InstrumentID:'', GuarantRatio:0, ExchangeID:'', }};
exports.CThostFtdcQryCombInstrumentGuardFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9));
exports.CThostFtdcQryCombInstrumentGuardFieldInit = () => {return {BrokerID:'', InstrumentID:'', ExchangeID:'', }};
exports.CThostFtdcInputCombActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('CombActionRef', stropt(13)).string('UserID', stropt(16)).string('Direction', stropt(1)).skip(3).int32le('Volume').string('CombDirection', stropt(1)).string('HedgeFlag', stropt(1)).string('ExchangeID', stropt(9)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).string('InvestUnitID', stropt(17)).skip(3);
exports.CThostFtdcInputCombActionFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', CombActionRef:'', UserID:'', Direction:'', Volume:0, CombDirection:'', HedgeFlag:'', ExchangeID:'', IPAddress:'', MacAddress:'', InvestUnitID:'', }};
exports.CThostFtdcCombActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('CombActionRef', stropt(13)).string('UserID', stropt(16)).string('Direction', stropt(1)).skip(3).int32le('Volume').string('CombDirection', stropt(1)).string('HedgeFlag', stropt(1)).string('ActionLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).skip(2).int32le('InstallID').string('ActionStatus', stropt(1)).skip(3).int32le('NotifySequence').string('TradingDay', stropt(9)).skip(3).int32le('SettlementID').int32le('SequenceNo').int32le('FrontID').int32le('SessionID').string('UserProductInfo', stropt(11)).array('StatusMsg', {type:'uint8', length: 81}).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).string('ComTradeID', stropt(21)).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17));
exports.CThostFtdcCombActionFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', CombActionRef:'', UserID:'', Direction:'', Volume:0, CombDirection:'', HedgeFlag:'', ActionLocalID:'', ExchangeID:'', ParticipantID:'', ClientID:'', ExchangeInstID:'', TraderID:'', InstallID:0, ActionStatus:'', NotifySequence:0, TradingDay:'', SettlementID:0, SequenceNo:0, FrontID:0, SessionID:0, UserProductInfo:'', StatusMsg:'', IPAddress:'', MacAddress:'', ComTradeID:'', BranchID:'', InvestUnitID:'', }};
exports.CThostFtdcQryCombActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryCombActionFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcExchangeCombActionFieldParser = () => new Parser().string('Direction', stropt(1)).skip(3).int32le('Volume').string('CombDirection', stropt(1)).string('HedgeFlag', stropt(1)).string('ActionLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).skip(2).int32le('InstallID').string('ActionStatus', stropt(1)).skip(3).int32le('NotifySequence').string('TradingDay', stropt(9)).skip(3).int32le('SettlementID').int32le('SequenceNo').string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).string('ComTradeID', stropt(21)).string('BranchID', stropt(9)).skip(1);
exports.CThostFtdcExchangeCombActionFieldInit = () => {return {Direction:'', Volume:0, CombDirection:'', HedgeFlag:'', ActionLocalID:'', ExchangeID:'', ParticipantID:'', ClientID:'', ExchangeInstID:'', TraderID:'', InstallID:0, ActionStatus:'', NotifySequence:0, TradingDay:'', SettlementID:0, SequenceNo:0, IPAddress:'', MacAddress:'', ComTradeID:'', BranchID:'', }};
exports.CThostFtdcQryExchangeCombActionFieldParser = () => new Parser().string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('ExchangeID', stropt(9)).string('TraderID', stropt(21));
exports.CThostFtdcQryExchangeCombActionFieldInit = () => {return {ParticipantID:'', ClientID:'', ExchangeInstID:'', ExchangeID:'', TraderID:'', }};
exports.CThostFtdcProductExchRateFieldParser = () => new Parser().string('ProductID', stropt(31)).string('QuoteCurrencyID', stropt(4)).skip(5).doublele('ExchangeRate').string('ExchangeID', stropt(9)).skip(7);
exports.CThostFtdcProductExchRateFieldInit = () => {return {ProductID:'', QuoteCurrencyID:'', ExchangeRate:0, ExchangeID:'', }};
exports.CThostFtdcQryProductExchRateFieldParser = () => new Parser().string('ProductID', stropt(31)).string('ExchangeID', stropt(9));
exports.CThostFtdcQryProductExchRateFieldInit = () => {return {ProductID:'', ExchangeID:'', }};
exports.CThostFtdcQryForQuoteParamFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9));
exports.CThostFtdcQryForQuoteParamFieldInit = () => {return {BrokerID:'', InstrumentID:'', ExchangeID:'', }};
exports.CThostFtdcForQuoteParamFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).skip(5).doublele('LastPrice').doublele('PriceInterval');
exports.CThostFtdcForQuoteParamFieldInit = () => {return {BrokerID:'', InstrumentID:'', ExchangeID:'', LastPrice:0, PriceInterval:0, }};
exports.CThostFtdcMMOptionInstrCommRateFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('OpenRatioByMoney').doublele('OpenRatioByVolume').doublele('CloseRatioByMoney').doublele('CloseRatioByVolume').doublele('CloseTodayRatioByMoney').doublele('CloseTodayRatioByVolume').doublele('StrikeRatioByMoney').doublele('StrikeRatioByVolume');
exports.CThostFtdcMMOptionInstrCommRateFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', OpenRatioByMoney:0, OpenRatioByVolume:0, CloseRatioByMoney:0, CloseRatioByVolume:0, CloseTodayRatioByMoney:0, CloseTodayRatioByVolume:0, StrikeRatioByMoney:0, StrikeRatioByVolume:0, }};
exports.CThostFtdcQryMMOptionInstrCommRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31));
exports.CThostFtdcQryMMOptionInstrCommRateFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', }};
exports.CThostFtdcMMInstrumentCommissionRateFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('OpenRatioByMoney').doublele('OpenRatioByVolume').doublele('CloseRatioByMoney').doublele('CloseRatioByVolume').doublele('CloseTodayRatioByMoney').doublele('CloseTodayRatioByVolume');
exports.CThostFtdcMMInstrumentCommissionRateFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', OpenRatioByMoney:0, OpenRatioByVolume:0, CloseRatioByMoney:0, CloseRatioByVolume:0, CloseTodayRatioByMoney:0, CloseTodayRatioByVolume:0, }};
exports.CThostFtdcQryMMInstrumentCommissionRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31));
exports.CThostFtdcQryMMInstrumentCommissionRateFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', }};
exports.CThostFtdcInstrumentOrderCommRateFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('HedgeFlag', stropt(1)).skip(7).doublele('OrderCommByVolume').doublele('OrderActionCommByVolume').string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).skip(6);
exports.CThostFtdcInstrumentOrderCommRateFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', HedgeFlag:'', OrderCommByVolume:0, OrderActionCommByVolume:0, ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcQryInstrumentOrderCommRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31));
exports.CThostFtdcQryInstrumentOrderCommRateFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', }};
exports.CThostFtdcTradeParamFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('TradeParamID', stropt(1)).string('TradeParamValue', stropt(256)).string('Memo', stropt(161));
exports.CThostFtdcTradeParamFieldInit = () => {return {BrokerID:'', TradeParamID:'', TradeParamValue:'', Memo:'', }};
exports.CThostFtdcInstrumentMarginRateULFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('HedgeFlag', stropt(1)).skip(7).doublele('LongMarginRatioByMoney').doublele('LongMarginRatioByVolume').doublele('ShortMarginRatioByMoney').doublele('ShortMarginRatioByVolume');
exports.CThostFtdcInstrumentMarginRateULFieldInit = () => {return {InstrumentID:'', InvestorRange:'', BrokerID:'', InvestorID:'', HedgeFlag:'', LongMarginRatioByMoney:0, LongMarginRatioByVolume:0, ShortMarginRatioByMoney:0, ShortMarginRatioByVolume:0, }};
exports.CThostFtdcFutureLimitPosiParamFieldParser = () => new Parser().string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ProductID', stropt(31)).int32le('SpecOpenVolume').int32le('ArbiOpenVolume').int32le('OpenVolume');
exports.CThostFtdcFutureLimitPosiParamFieldInit = () => {return {InvestorRange:'', BrokerID:'', InvestorID:'', ProductID:'', SpecOpenVolume:0, ArbiOpenVolume:0, OpenVolume:0, }};
exports.CThostFtdcLoginForbiddenIPFieldParser = () => new Parser().string('IPAddress', stropt(16));
exports.CThostFtdcLoginForbiddenIPFieldInit = () => {return {IPAddress:'', }};
exports.CThostFtdcIPListFieldParser = () => new Parser().string('IPAddress', stropt(16)).int32le('IsWhite');
exports.CThostFtdcIPListFieldInit = () => {return {IPAddress:'', IsWhite:0, }};
exports.CThostFtdcInputOptionSelfCloseFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('OptionSelfCloseRef', stropt(13)).string('UserID', stropt(16)).int32le('Volume').int32le('RequestID').string('BusinessUnit', stropt(21)).string('HedgeFlag', stropt(1)).string('OptSelfCloseFlag', stropt(1)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('ClientID', stropt(11)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(2);
exports.CThostFtdcInputOptionSelfCloseFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', OptionSelfCloseRef:'', UserID:'', Volume:0, RequestID:0, BusinessUnit:'', HedgeFlag:'', OptSelfCloseFlag:'', ExchangeID:'', InvestUnitID:'', AccountID:'', CurrencyID:'', ClientID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcInputOptionSelfCloseActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('OptionSelfCloseActionRef').string('OptionSelfCloseRef', stropt(13)).skip(3).int32le('RequestID').int32le('FrontID').int32le('SessionID').string('ExchangeID', stropt(9)).string('OptionSelfCloseSysID', stropt(21)).string('ActionFlag', stropt(1)).string('UserID', stropt(16)).string('InstrumentID', stropt(31)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports.CThostFtdcInputOptionSelfCloseActionFieldInit = () => {return {BrokerID:'', InvestorID:'', OptionSelfCloseActionRef:0, OptionSelfCloseRef:'', RequestID:0, FrontID:0, SessionID:0, ExchangeID:'', OptionSelfCloseSysID:'', ActionFlag:'', UserID:'', InstrumentID:'', InvestUnitID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcOptionSelfCloseFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('OptionSelfCloseRef', stropt(13)).string('UserID', stropt(16)).int32le('Volume').int32le('RequestID').string('BusinessUnit', stropt(21)).string('HedgeFlag', stropt(1)).string('OptSelfCloseFlag', stropt(1)).string('OptionSelfCloseLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).skip(1).int32le('InstallID').string('OrderSubmitStatus', stropt(1)).skip(3).int32le('NotifySequence').string('TradingDay', stropt(9)).skip(3).int32le('SettlementID').string('OptionSelfCloseSysID', stropt(21)).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('CancelTime', stropt(9)).string('ExecResult', stropt(1)).string('ClearingPartID', stropt(11)).int32le('SequenceNo').int32le('FrontID').int32le('SessionID').string('UserProductInfo', stropt(11)).array('StatusMsg', {type:'uint8', length: 81}).string('ActiveUserID', stropt(16)).int32le('BrokerOptionSelfCloseSeq').string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports.CThostFtdcOptionSelfCloseFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', OptionSelfCloseRef:'', UserID:'', Volume:0, RequestID:0, BusinessUnit:'', HedgeFlag:'', OptSelfCloseFlag:'', OptionSelfCloseLocalID:'', ExchangeID:'', ParticipantID:'', ClientID:'', ExchangeInstID:'', TraderID:'', InstallID:0, OrderSubmitStatus:'', NotifySequence:0, TradingDay:'', SettlementID:0, OptionSelfCloseSysID:'', InsertDate:'', InsertTime:'', CancelTime:'', ExecResult:'', ClearingPartID:'', SequenceNo:0, FrontID:0, SessionID:0, UserProductInfo:'', StatusMsg:'', ActiveUserID:'', BrokerOptionSelfCloseSeq:0, BranchID:'', InvestUnitID:'', AccountID:'', CurrencyID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcOptionSelfCloseActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('OptionSelfCloseActionRef').string('OptionSelfCloseRef', stropt(13)).skip(3).int32le('RequestID').int32le('FrontID').int32le('SessionID').string('ExchangeID', stropt(9)).string('OptionSelfCloseSysID', stropt(21)).string('ActionFlag', stropt(1)).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).skip(2).int32le('InstallID').string('OptionSelfCloseLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).array('StatusMsg', {type:'uint8', length: 81}).string('InstrumentID', stropt(31)).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(3);
exports.CThostFtdcOptionSelfCloseActionFieldInit = () => {return {BrokerID:'', InvestorID:'', OptionSelfCloseActionRef:0, OptionSelfCloseRef:'', RequestID:0, FrontID:0, SessionID:0, ExchangeID:'', OptionSelfCloseSysID:'', ActionFlag:'', ActionDate:'', ActionTime:'', TraderID:'', InstallID:0, OptionSelfCloseLocalID:'', ActionLocalID:'', ParticipantID:'', ClientID:'', BusinessUnit:'', OrderActionStatus:'', UserID:'', StatusMsg:'', InstrumentID:'', BranchID:'', InvestUnitID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcQryOptionSelfCloseFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('OptionSelfCloseSysID', stropt(21)).string('InsertTimeStart', stropt(9)).string('InsertTimeEnd', stropt(9));
exports.CThostFtdcQryOptionSelfCloseFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExchangeID:'', OptionSelfCloseSysID:'', InsertTimeStart:'', InsertTimeEnd:'', }};
exports.CThostFtdcExchangeOptionSelfCloseFieldParser = () => new Parser().int32le('Volume').int32le('RequestID').string('BusinessUnit', stropt(21)).string('HedgeFlag', stropt(1)).string('OptSelfCloseFlag', stropt(1)).string('OptionSelfCloseLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).skip(1).int32le('InstallID').string('OrderSubmitStatus', stropt(1)).skip(3).int32le('NotifySequence').string('TradingDay', stropt(9)).skip(3).int32le('SettlementID').string('OptionSelfCloseSysID', stropt(21)).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('CancelTime', stropt(9)).string('ExecResult', stropt(1)).string('ClearingPartID', stropt(11)).int32le('SequenceNo').string('BranchID', stropt(9)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(2);
exports.CThostFtdcExchangeOptionSelfCloseFieldInit = () => {return {Volume:0, RequestID:0, BusinessUnit:'', HedgeFlag:'', OptSelfCloseFlag:'', OptionSelfCloseLocalID:'', ExchangeID:'', ParticipantID:'', ClientID:'', ExchangeInstID:'', TraderID:'', InstallID:0, OrderSubmitStatus:'', NotifySequence:0, TradingDay:'', SettlementID:0, OptionSelfCloseSysID:'', InsertDate:'', InsertTime:'', CancelTime:'', ExecResult:'', ClearingPartID:'', SequenceNo:0, BranchID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcQryOptionSelfCloseActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ExchangeID', stropt(9));
exports.CThostFtdcQryOptionSelfCloseActionFieldInit = () => {return {BrokerID:'', InvestorID:'', ExchangeID:'', }};
exports.CThostFtdcExchangeOptionSelfCloseActionFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('OptionSelfCloseSysID', stropt(21)).string('ActionFlag', stropt(1)).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).skip(2).int32le('InstallID').string('OptionSelfCloseLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('BranchID', stropt(9)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).string('ExchangeInstID', stropt(31)).string('OptSelfCloseFlag', stropt(1));
exports.CThostFtdcExchangeOptionSelfCloseActionFieldInit = () => {return {ExchangeID:'', OptionSelfCloseSysID:'', ActionFlag:'', ActionDate:'', ActionTime:'', TraderID:'', InstallID:0, OptionSelfCloseLocalID:'', ActionLocalID:'', ParticipantID:'', ClientID:'', BusinessUnit:'', OrderActionStatus:'', UserID:'', BranchID:'', IPAddress:'', MacAddress:'', ExchangeInstID:'', OptSelfCloseFlag:'', }};
exports.CThostFtdcSyncDelaySwapFieldParser = () => new Parser().string('DelaySwapSeqNo', stropt(15)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('FromCurrencyID', stropt(4)).skip(5).doublele('FromAmount').doublele('FromFrozenSwap').doublele('FromRemainSwap').string('ToCurrencyID', stropt(4)).skip(4).doublele('ToAmount');
exports.CThostFtdcSyncDelaySwapFieldInit = () => {return {DelaySwapSeqNo:'', BrokerID:'', InvestorID:'', FromCurrencyID:'', FromAmount:0, FromFrozenSwap:0, FromRemainSwap:0, ToCurrencyID:'', ToAmount:0, }};
exports.CThostFtdcQrySyncDelaySwapFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('DelaySwapSeqNo', stropt(15));
exports.CThostFtdcQrySyncDelaySwapFieldInit = () => {return {BrokerID:'', DelaySwapSeqNo:'', }};
exports.CThostFtdcInvestUnitFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InvestUnitID', stropt(17)).string('InvestorUnitName', stropt(81)).string('InvestorGroupID', stropt(13)).string('CommModelID', stropt(13)).string('MarginModelID', stropt(13)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4));
exports.CThostFtdcInvestUnitFieldInit = () => {return {BrokerID:'', InvestorID:'', InvestUnitID:'', InvestorUnitName:'', InvestorGroupID:'', CommModelID:'', MarginModelID:'', AccountID:'', CurrencyID:'', }};
exports.CThostFtdcQryInvestUnitFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryInvestUnitFieldInit = () => {return {BrokerID:'', InvestorID:'', InvestUnitID:'', }};
exports.CThostFtdcSecAgentCheckModeFieldParser = () => new Parser().string('InvestorID', stropt(13)).string('BrokerID', stropt(11)).string('CurrencyID', stropt(4)).string('BrokerSecAgentID', stropt(13)).skip(3).int32le('CheckSelfAccount');
exports.CThostFtdcSecAgentCheckModeFieldInit = () => {return {InvestorID:'', BrokerID:'', CurrencyID:'', BrokerSecAgentID:'', CheckSelfAccount:0, }};
exports.CThostFtdcSecAgentTradeInfoFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('BrokerSecAgentID', stropt(13)).string('InvestorID', stropt(13)).string('LongCustomerName', stropt(161));
exports.CThostFtdcSecAgentTradeInfoFieldInit = () => {return {BrokerID:'', BrokerSecAgentID:'', InvestorID:'', LongCustomerName:'', }};
exports.CThostFtdcMarketDataFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('ExchangeInstID', stropt(31)).doublele('LastPrice').doublele('PreSettlementPrice').doublele('PreClosePrice').doublele('PreOpenInterest').doublele('OpenPrice').doublele('HighestPrice').doublele('LowestPrice').int32le('Volume').skip(4).doublele('Turnover').doublele('OpenInterest').doublele('ClosePrice').doublele('SettlementPrice').doublele('UpperLimitPrice').doublele('LowerLimitPrice').doublele('PreDelta').doublele('CurrDelta').string('UpdateTime', stropt(9)).skip(3).int32le('UpdateMillisec').string('ActionDay', stropt(9)).skip(7);
exports.CThostFtdcMarketDataFieldInit = () => {return {TradingDay:'', InstrumentID:'', ExchangeID:'', ExchangeInstID:'', LastPrice:0, PreSettlementPrice:0, PreClosePrice:0, PreOpenInterest:0, OpenPrice:0, HighestPrice:0, LowestPrice:0, Volume:0, Turnover:0, OpenInterest:0, ClosePrice:0, SettlementPrice:0, UpperLimitPrice:0, LowerLimitPrice:0, PreDelta:0, CurrDelta:0, UpdateTime:'', UpdateMillisec:0, ActionDay:'', }};
exports.CThostFtdcMarketDataBaseFieldParser = () => new Parser().string('TradingDay', stropt(9)).skip(7).doublele('PreSettlementPrice').doublele('PreClosePrice').doublele('PreOpenInterest').doublele('PreDelta');
exports.CThostFtdcMarketDataBaseFieldInit = () => {return {TradingDay:'', PreSettlementPrice:0, PreClosePrice:0, PreOpenInterest:0, PreDelta:0, }};
exports.CThostFtdcMarketDataStaticFieldParser = () => new Parser().doublele('OpenPrice').doublele('HighestPrice').doublele('LowestPrice').doublele('ClosePrice').doublele('UpperLimitPrice').doublele('LowerLimitPrice').doublele('SettlementPrice').doublele('CurrDelta');
exports.CThostFtdcMarketDataStaticFieldInit = () => {return {OpenPrice:0, HighestPrice:0, LowestPrice:0, ClosePrice:0, UpperLimitPrice:0, LowerLimitPrice:0, SettlementPrice:0, CurrDelta:0, }};
exports.CThostFtdcMarketDataLastMatchFieldParser = () => new Parser().doublele('LastPrice').int32le('Volume').skip(4).doublele('Turnover').doublele('OpenInterest');
exports.CThostFtdcMarketDataLastMatchFieldInit = () => {return {LastPrice:0, Volume:0, Turnover:0, OpenInterest:0, }};
exports.CThostFtdcMarketDataBestPriceFieldParser = () => new Parser().doublele('BidPrice1').int32le('BidVolume1').skip(4).doublele('AskPrice1').int32le('AskVolume1').skip(4);
exports.CThostFtdcMarketDataBestPriceFieldInit = () => {return {BidPrice1:0, BidVolume1:0, AskPrice1:0, AskVolume1:0, }};
exports.CThostFtdcMarketDataBid23FieldParser = () => new Parser().doublele('BidPrice2').int32le('BidVolume2').skip(4).doublele('BidPrice3').int32le('BidVolume3').skip(4);
exports.CThostFtdcMarketDataBid23FieldInit = () => {return {BidPrice2:0, BidVolume2:0, BidPrice3:0, BidVolume3:0, }};
exports.CThostFtdcMarketDataAsk23FieldParser = () => new Parser().doublele('AskPrice2').int32le('AskVolume2').skip(4).doublele('AskPrice3').int32le('AskVolume3').skip(4);
exports.CThostFtdcMarketDataAsk23FieldInit = () => {return {AskPrice2:0, AskVolume2:0, AskPrice3:0, AskVolume3:0, }};
exports.CThostFtdcMarketDataBid45FieldParser = () => new Parser().doublele('BidPrice4').int32le('BidVolume4').skip(4).doublele('BidPrice5').int32le('BidVolume5').skip(4);
exports.CThostFtdcMarketDataBid45FieldInit = () => {return {BidPrice4:0, BidVolume4:0, BidPrice5:0, BidVolume5:0, }};
exports.CThostFtdcMarketDataAsk45FieldParser = () => new Parser().doublele('AskPrice4').int32le('AskVolume4').skip(4).doublele('AskPrice5').int32le('AskVolume5').skip(4);
exports.CThostFtdcMarketDataAsk45FieldInit = () => {return {AskPrice4:0, AskVolume4:0, AskPrice5:0, AskVolume5:0, }};
exports.CThostFtdcMarketDataUpdateTimeFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('UpdateTime', stropt(9)).int32le('UpdateMillisec').string('ActionDay', stropt(9)).skip(3);
exports.CThostFtdcMarketDataUpdateTimeFieldInit = () => {return {InstrumentID:'', UpdateTime:'', UpdateMillisec:0, ActionDay:'', }};
exports.CThostFtdcMarketDataExchangeFieldParser = () => new Parser().string('ExchangeID', stropt(9));
exports.CThostFtdcMarketDataExchangeFieldInit = () => {return {ExchangeID:'', }};
exports.CThostFtdcSpecificInstrumentFieldParser = () => new Parser().string('InstrumentID', stropt(31));
exports.CThostFtdcSpecificInstrumentFieldInit = () => {return {InstrumentID:'', }};
exports.CThostFtdcInstrumentStatusFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ExchangeInstID', stropt(31)).string('SettlementGroupID', stropt(9)).string('InstrumentID', stropt(31)).string('InstrumentStatus', stropt(1)).skip(3).int32le('TradingSegmentSN').string('EnterTime', stropt(9)).string('EnterReason', stropt(1)).skip(2);
exports.CThostFtdcInstrumentStatusFieldInit = () => {return {ExchangeID:'', ExchangeInstID:'', SettlementGroupID:'', InstrumentID:'', InstrumentStatus:'', TradingSegmentSN:0, EnterTime:'', EnterReason:'', }};
exports.CThostFtdcQryInstrumentStatusFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ExchangeInstID', stropt(31));
exports.CThostFtdcQryInstrumentStatusFieldInit = () => {return {ExchangeID:'', ExchangeInstID:'', }};
exports.CThostFtdcInvestorAccountFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4));
exports.CThostFtdcInvestorAccountFieldInit = () => {return {BrokerID:'', InvestorID:'', AccountID:'', CurrencyID:'', }};
exports.CThostFtdcPositionProfitAlgorithmFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).string('Algorithm', stropt(1)).string('Memo', stropt(161)).string('CurrencyID', stropt(4));
exports.CThostFtdcPositionProfitAlgorithmFieldInit = () => {return {BrokerID:'', AccountID:'', Algorithm:'', Memo:'', CurrencyID:'', }};
exports.CThostFtdcDiscountFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorRange', stropt(1)).string('InvestorID', stropt(13)).skip(7).doublele('Discount');
exports.CThostFtdcDiscountFieldInit = () => {return {BrokerID:'', InvestorRange:'', InvestorID:'', Discount:0, }};
exports.CThostFtdcQryTransferBankFieldParser = () => new Parser().string('BankID', stropt(4)).string('BankBrchID', stropt(5));
exports.CThostFtdcQryTransferBankFieldInit = () => {return {BankID:'', BankBrchID:'', }};
exports.CThostFtdcTransferBankFieldParser = () => new Parser().string('BankID', stropt(4)).string('BankBrchID', stropt(5)).string('BankName', stropt(101)).skip(2).int32le('IsActive');
exports.CThostFtdcTransferBankFieldInit = () => {return {BankID:'', BankBrchID:'', BankName:'', IsActive:0, }};
exports.CThostFtdcQryInvestorPositionDetailFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryInvestorPositionDetailFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcInvestorPositionDetailFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('HedgeFlag', stropt(1)).string('Direction', stropt(1)).string('OpenDate', stropt(9)).string('TradeID', stropt(21)).skip(1).int32le('Volume').skip(4).doublele('OpenPrice').string('TradingDay', stropt(9)).skip(3).int32le('SettlementID').string('TradeType', stropt(1)).string('CombInstrumentID', stropt(31)).string('ExchangeID', stropt(9)).skip(7).doublele('CloseProfitByDate').doublele('CloseProfitByTrade').doublele('PositionProfitByDate').doublele('PositionProfitByTrade').doublele('Margin').doublele('ExchMargin').doublele('MarginRateByMoney').doublele('MarginRateByVolume').doublele('LastSettlementPrice').doublele('SettlementPrice').int32le('CloseVolume').skip(4).doublele('CloseAmount').int32le('TimeFirstVolume').string('InvestUnitID', stropt(17)).skip(3);
exports.CThostFtdcInvestorPositionDetailFieldInit = () => {return {InstrumentID:'', BrokerID:'', InvestorID:'', HedgeFlag:'', Direction:'', OpenDate:'', TradeID:'', Volume:0, OpenPrice:0, TradingDay:'', SettlementID:0, TradeType:'', CombInstrumentID:'', ExchangeID:'', CloseProfitByDate:0, CloseProfitByTrade:0, PositionProfitByDate:0, PositionProfitByTrade:0, Margin:0, ExchMargin:0, MarginRateByMoney:0, MarginRateByVolume:0, LastSettlementPrice:0, SettlementPrice:0, CloseVolume:0, CloseAmount:0, TimeFirstVolume:0, InvestUnitID:'', }};
exports.CThostFtdcTradingAccountPasswordFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).string('Password', stropt(41)).string('CurrencyID', stropt(4));
exports.CThostFtdcTradingAccountPasswordFieldInit = () => {return {BrokerID:'', AccountID:'', Password:'', CurrencyID:'', }};
exports.CThostFtdcMDTraderOfferFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('TraderID', stropt(21)).string('ParticipantID', stropt(11)).string('Password', stropt(41)).skip(2).int32le('InstallID').string('OrderLocalID', stropt(13)).string('TraderConnectStatus', stropt(1)).string('ConnectRequestDate', stropt(9)).string('ConnectRequestTime', stropt(9)).string('LastReportDate', stropt(9)).string('LastReportTime', stropt(9)).string('ConnectDate', stropt(9)).string('ConnectTime', stropt(9)).string('StartDate', stropt(9)).string('StartTime', stropt(9)).string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('MaxTradeID', stropt(21)).string('MaxOrderMessageReference', stropt(7)).skip(2);
exports.CThostFtdcMDTraderOfferFieldInit = () => {return {ExchangeID:'', TraderID:'', ParticipantID:'', Password:'', InstallID:0, OrderLocalID:'', TraderConnectStatus:'', ConnectRequestDate:'', ConnectRequestTime:'', LastReportDate:'', LastReportTime:'', ConnectDate:'', ConnectTime:'', StartDate:'', StartTime:'', TradingDay:'', BrokerID:'', MaxTradeID:'', MaxOrderMessageReference:'', }};
exports.CThostFtdcQryMDTraderOfferFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('TraderID', stropt(21));
exports.CThostFtdcQryMDTraderOfferFieldInit = () => {return {ExchangeID:'', ParticipantID:'', TraderID:'', }};
exports.CThostFtdcQryNoticeFieldParser = () => new Parser().string('BrokerID', stropt(11));
exports.CThostFtdcQryNoticeFieldInit = () => {return {BrokerID:'', }};
exports.CThostFtdcNoticeFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('Content', stropt(501)).string('SequenceLabel', stropt(2));
exports.CThostFtdcNoticeFieldInit = () => {return {BrokerID:'', Content:'', SequenceLabel:'', }};
exports.CThostFtdcUserRightFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('UserRightType', stropt(1)).int32le('IsForbidden');
exports.CThostFtdcUserRightFieldInit = () => {return {BrokerID:'', UserID:'', UserRightType:'', IsForbidden:0, }};
exports.CThostFtdcQrySettlementInfoConfirmFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4));
exports.CThostFtdcQrySettlementInfoConfirmFieldInit = () => {return {BrokerID:'', InvestorID:'', AccountID:'', CurrencyID:'', }};
exports.CThostFtdcLoadSettlementInfoFieldParser = () => new Parser().string('BrokerID', stropt(11));
exports.CThostFtdcLoadSettlementInfoFieldInit = () => {return {BrokerID:'', }};
exports.CThostFtdcBrokerWithdrawAlgorithmFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('WithdrawAlgorithm', stropt(1)).skip(4).doublele('UsingRatio').string('IncludeCloseProfit', stropt(1)).string('AllWithoutTrade', stropt(1)).string('AvailIncludeCloseProfit', stropt(1)).skip(1).int32le('IsBrokerUserEvent').string('CurrencyID', stropt(4)).skip(4).doublele('FundMortgageRatio').string('BalanceAlgorithm', stropt(1)).skip(7);
exports.CThostFtdcBrokerWithdrawAlgorithmFieldInit = () => {return {BrokerID:'', WithdrawAlgorithm:'', UsingRatio:0, IncludeCloseProfit:'', AllWithoutTrade:'', AvailIncludeCloseProfit:'', IsBrokerUserEvent:0, CurrencyID:'', FundMortgageRatio:0, BalanceAlgorithm:'', }};
exports.CThostFtdcTradingAccountPasswordUpdateV1FieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('OldPassword', stropt(41)).string('NewPassword', stropt(41));
exports.CThostFtdcTradingAccountPasswordUpdateV1FieldInit = () => {return {BrokerID:'', InvestorID:'', OldPassword:'', NewPassword:'', }};
exports.CThostFtdcTradingAccountPasswordUpdateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).string('OldPassword', stropt(41)).string('NewPassword', stropt(41)).string('CurrencyID', stropt(4));
exports.CThostFtdcTradingAccountPasswordUpdateFieldInit = () => {return {BrokerID:'', AccountID:'', OldPassword:'', NewPassword:'', CurrencyID:'', }};
exports.CThostFtdcQryCombinationLegFieldParser = () => new Parser().string('CombInstrumentID', stropt(31)).skip(1).int32le('LegID').string('LegInstrumentID', stropt(31)).skip(1);
exports.CThostFtdcQryCombinationLegFieldInit = () => {return {CombInstrumentID:'', LegID:0, LegInstrumentID:'', }};
exports.CThostFtdcQrySyncStatusFieldParser = () => new Parser().string('TradingDay', stropt(9));
exports.CThostFtdcQrySyncStatusFieldInit = () => {return {TradingDay:'', }};
exports.CThostFtdcCombinationLegFieldParser = () => new Parser().string('CombInstrumentID', stropt(31)).skip(1).int32le('LegID').string('LegInstrumentID', stropt(31)).string('Direction', stropt(1)).int32le('LegMultiple').int32le('ImplyLevel');
exports.CThostFtdcCombinationLegFieldInit = () => {return {CombInstrumentID:'', LegID:0, LegInstrumentID:'', Direction:'', LegMultiple:0, ImplyLevel:0, }};
exports.CThostFtdcSyncStatusFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('DataSyncStatus', stropt(1));
exports.CThostFtdcSyncStatusFieldInit = () => {return {TradingDay:'', DataSyncStatus:'', }};
exports.CThostFtdcQryLinkManFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13));
exports.CThostFtdcQryLinkManFieldInit = () => {return {BrokerID:'', InvestorID:'', }};
exports.CThostFtdcLinkManFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('PersonType', stropt(1)).string('IdentifiedCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('PersonName', stropt(81)).string('Telephone', stropt(41)).string('Address', stropt(101)).string('ZipCode', stropt(7)).skip(1).int32le('Priority').string('UOAZipCode', stropt(11)).string('PersonFullName', stropt(101));
exports.CThostFtdcLinkManFieldInit = () => {return {BrokerID:'', InvestorID:'', PersonType:'', IdentifiedCardType:'', IdentifiedCardNo:'', PersonName:'', Telephone:'', Address:'', ZipCode:'', Priority:0, UOAZipCode:'', PersonFullName:'', }};
exports.CThostFtdcQryBrokerUserEventFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('UserEventType', stropt(1));
exports.CThostFtdcQryBrokerUserEventFieldInit = () => {return {BrokerID:'', UserID:'', UserEventType:'', }};
exports.CThostFtdcBrokerUserEventFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('UserEventType', stropt(1)).int32le('EventSequenceNo').string('EventDate', stropt(9)).string('EventTime', stropt(9)).string('UserEventInfo', stropt(1025)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).skip(1);
exports.CThostFtdcBrokerUserEventFieldInit = () => {return {BrokerID:'', UserID:'', UserEventType:'', EventSequenceNo:0, EventDate:'', EventTime:'', UserEventInfo:'', InvestorID:'', InstrumentID:'', }};
exports.CThostFtdcQryContractBankFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('BankID', stropt(4)).string('BankBrchID', stropt(5));
exports.CThostFtdcQryContractBankFieldInit = () => {return {BrokerID:'', BankID:'', BankBrchID:'', }};
exports.CThostFtdcContractBankFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('BankID', stropt(4)).string('BankBrchID', stropt(5)).string('BankName', stropt(101));
exports.CThostFtdcContractBankFieldInit = () => {return {BrokerID:'', BankID:'', BankBrchID:'', BankName:'', }};
exports.CThostFtdcInvestorPositionCombineDetailFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('OpenDate', stropt(9)).string('ExchangeID', stropt(9)).skip(1).int32le('SettlementID').string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ComTradeID', stropt(21)).string('TradeID', stropt(21)).string('InstrumentID', stropt(31)).string('HedgeFlag', stropt(1)).string('Direction', stropt(1)).skip(1).int32le('TotalAmt').doublele('Margin').doublele('ExchMargin').doublele('MarginRateByMoney').doublele('MarginRateByVolume').int32le('LegID').int32le('LegMultiple').string('CombInstrumentID', stropt(31)).skip(1).int32le('TradeGroupID').string('InvestUnitID', stropt(17)).skip(3);
exports.CThostFtdcInvestorPositionCombineDetailFieldInit = () => {return {TradingDay:'', OpenDate:'', ExchangeID:'', SettlementID:0, BrokerID:'', InvestorID:'', ComTradeID:'', TradeID:'', InstrumentID:'', HedgeFlag:'', Direction:'', TotalAmt:0, Margin:0, ExchMargin:0, MarginRateByMoney:0, MarginRateByVolume:0, LegID:0, LegMultiple:0, CombInstrumentID:'', TradeGroupID:0, InvestUnitID:'', }};
exports.CThostFtdcParkedOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('OrderRef', stropt(13)).string('UserID', stropt(16)).string('OrderPriceType', stropt(1)).string('Direction', stropt(1)).string('CombOffsetFlag', stropt(5)).string('CombHedgeFlag', stropt(5)).doublele('LimitPrice').int32le('VolumeTotalOriginal').string('TimeCondition', stropt(1)).string('GTDDate', stropt(9)).string('VolumeCondition', stropt(1)).skip(1).int32le('MinVolume').string('ContingentCondition', stropt(1)).skip(3).doublele('StopPrice').string('ForceCloseReason', stropt(1)).skip(3).int32le('IsAutoSuspend').string('BusinessUnit', stropt(21)).skip(3).int32le('RequestID').int32le('UserForceClose').string('ExchangeID', stropt(9)).string('ParkedOrderID', stropt(13)).string('UserType', stropt(1)).string('Status', stropt(1)).int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(3).int32le('IsSwapOrder').string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('ClientID', stropt(11)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(2);
exports.CThostFtdcParkedOrderFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', OrderRef:'', UserID:'', OrderPriceType:'', Direction:'', CombOffsetFlag:'', CombHedgeFlag:'', LimitPrice:0, VolumeTotalOriginal:0, TimeCondition:'', GTDDate:'', VolumeCondition:'', MinVolume:0, ContingentCondition:'', StopPrice:0, ForceCloseReason:'', IsAutoSuspend:0, BusinessUnit:'', RequestID:0, UserForceClose:0, ExchangeID:'', ParkedOrderID:'', UserType:'', Status:'', ErrorID:0, ErrorMsg:'', IsSwapOrder:0, AccountID:'', CurrencyID:'', ClientID:'', InvestUnitID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcParkedOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('OrderActionRef').string('OrderRef', stropt(13)).skip(3).int32le('RequestID').int32le('FrontID').int32le('SessionID').string('ExchangeID', stropt(9)).string('OrderSysID', stropt(21)).string('ActionFlag', stropt(1)).skip(1).doublele('LimitPrice').int32le('VolumeChange').string('UserID', stropt(16)).string('InstrumentID', stropt(31)).string('ParkedOrderActionID', stropt(13)).string('UserType', stropt(1)).string('Status', stropt(1)).skip(2).int32le('ErrorID').string('ErrorMsg', stropt(81)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(1);
exports.CThostFtdcParkedOrderActionFieldInit = () => {return {BrokerID:'', InvestorID:'', OrderActionRef:0, OrderRef:'', RequestID:0, FrontID:0, SessionID:0, ExchangeID:'', OrderSysID:'', ActionFlag:'', LimitPrice:0, VolumeChange:0, UserID:'', InstrumentID:'', ParkedOrderActionID:'', UserType:'', Status:'', ErrorID:0, ErrorMsg:'', InvestUnitID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcQryParkedOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryParkedOrderFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcQryParkedOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryParkedOrderActionFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcRemoveParkedOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ParkedOrderID', stropt(13)).string('InvestUnitID', stropt(17));
exports.CThostFtdcRemoveParkedOrderFieldInit = () => {return {BrokerID:'', InvestorID:'', ParkedOrderID:'', InvestUnitID:'', }};
exports.CThostFtdcRemoveParkedOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ParkedOrderActionID', stropt(13)).string('InvestUnitID', stropt(17));
exports.CThostFtdcRemoveParkedOrderActionFieldInit = () => {return {BrokerID:'', InvestorID:'', ParkedOrderActionID:'', InvestUnitID:'', }};
exports.CThostFtdcInvestorWithdrawAlgorithmFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorRange', stropt(1)).string('InvestorID', stropt(13)).skip(7).doublele('UsingRatio').string('CurrencyID', stropt(4)).skip(4).doublele('FundMortgageRatio');
exports.CThostFtdcInvestorWithdrawAlgorithmFieldInit = () => {return {BrokerID:'', InvestorRange:'', InvestorID:'', UsingRatio:0, CurrencyID:'', FundMortgageRatio:0, }};
exports.CThostFtdcQryInvestorPositionCombineDetailFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('CombInstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryInvestorPositionCombineDetailFieldInit = () => {return {BrokerID:'', InvestorID:'', CombInstrumentID:'', ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcMarketDataAveragePriceFieldParser = () => new Parser().doublele('AveragePrice');
exports.CThostFtdcMarketDataAveragePriceFieldInit = () => {return {AveragePrice:0, }};
exports.CThostFtdcVerifyInvestorPasswordFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('Password', stropt(41));
exports.CThostFtdcVerifyInvestorPasswordFieldInit = () => {return {BrokerID:'', InvestorID:'', Password:'', }};
exports.CThostFtdcUserIPFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('IPAddress', stropt(16)).string('IPMask', stropt(16)).string('MacAddress', stropt(21));
exports.CThostFtdcUserIPFieldInit = () => {return {BrokerID:'', UserID:'', IPAddress:'', IPMask:'', MacAddress:'', }};
exports.CThostFtdcTradingNoticeInfoFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('SendTime', stropt(9)).string('FieldContent', stropt(501)).skip(0).int16le('SequenceSeries').int32le('SequenceNo').string('InvestUnitID', stropt(17)).skip(3);
exports.CThostFtdcTradingNoticeInfoFieldInit = () => {return {BrokerID:'', InvestorID:'', SendTime:'', FieldContent:'', SequenceSeries:0, SequenceNo:0, InvestUnitID:'', }};
exports.CThostFtdcTradingNoticeFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorRange', stropt(1)).string('InvestorID', stropt(13)).skip(1).int16le('SequenceSeries').string('UserID', stropt(16)).string('SendTime', stropt(9)).skip(3).int32le('SequenceNo').string('FieldContent', stropt(501)).string('InvestUnitID', stropt(17)).skip(2);
exports.CThostFtdcTradingNoticeFieldInit = () => {return {BrokerID:'', InvestorRange:'', InvestorID:'', SequenceSeries:0, UserID:'', SendTime:'', SequenceNo:0, FieldContent:'', InvestUnitID:'', }};
exports.CThostFtdcQryTradingNoticeFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryTradingNoticeFieldInit = () => {return {BrokerID:'', InvestorID:'', InvestUnitID:'', }};
exports.CThostFtdcQryErrOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13));
exports.CThostFtdcQryErrOrderFieldInit = () => {return {BrokerID:'', InvestorID:'', }};
exports.CThostFtdcErrOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('OrderRef', stropt(13)).string('UserID', stropt(16)).string('OrderPriceType', stropt(1)).string('Direction', stropt(1)).string('CombOffsetFlag', stropt(5)).string('CombHedgeFlag', stropt(5)).doublele('LimitPrice').int32le('VolumeTotalOriginal').string('TimeCondition', stropt(1)).string('GTDDate', stropt(9)).string('VolumeCondition', stropt(1)).skip(1).int32le('MinVolume').string('ContingentCondition', stropt(1)).skip(3).doublele('StopPrice').string('ForceCloseReason', stropt(1)).skip(3).int32le('IsAutoSuspend').string('BusinessUnit', stropt(21)).skip(3).int32le('RequestID').int32le('UserForceClose').int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(3).int32le('IsSwapOrder').string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('ClientID', stropt(11)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(1);
exports.CThostFtdcErrOrderFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', OrderRef:'', UserID:'', OrderPriceType:'', Direction:'', CombOffsetFlag:'', CombHedgeFlag:'', LimitPrice:0, VolumeTotalOriginal:0, TimeCondition:'', GTDDate:'', VolumeCondition:'', MinVolume:0, ContingentCondition:'', StopPrice:0, ForceCloseReason:'', IsAutoSuspend:0, BusinessUnit:'', RequestID:0, UserForceClose:0, ErrorID:0, ErrorMsg:'', IsSwapOrder:0, ExchangeID:'', InvestUnitID:'', AccountID:'', CurrencyID:'', ClientID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcErrorConditionalOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('OrderRef', stropt(13)).string('UserID', stropt(16)).string('OrderPriceType', stropt(1)).string('Direction', stropt(1)).string('CombOffsetFlag', stropt(5)).string('CombHedgeFlag', stropt(5)).doublele('LimitPrice').int32le('VolumeTotalOriginal').string('TimeCondition', stropt(1)).string('GTDDate', stropt(9)).string('VolumeCondition', stropt(1)).skip(1).int32le('MinVolume').string('ContingentCondition', stropt(1)).skip(3).doublele('StopPrice').string('ForceCloseReason', stropt(1)).skip(3).int32le('IsAutoSuspend').string('BusinessUnit', stropt(21)).skip(3).int32le('RequestID').string('OrderLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').string('OrderSubmitStatus', stropt(1)).skip(3).int32le('NotifySequence').string('TradingDay', stropt(9)).skip(3).int32le('SettlementID').string('OrderSysID', stropt(21)).string('OrderSource', stropt(1)).string('OrderStatus', stropt(1)).string('OrderType', stropt(1)).int32le('VolumeTraded').int32le('VolumeTotal').string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('ActiveTime', stropt(9)).string('SuspendTime', stropt(9)).string('UpdateTime', stropt(9)).string('CancelTime', stropt(9)).string('ActiveTraderID', stropt(21)).string('ClearingPartID', stropt(11)).skip(2).int32le('SequenceNo').int32le('FrontID').int32le('SessionID').string('UserProductInfo', stropt(11)).array('StatusMsg', {type:'uint8', length: 81}).int32le('UserForceClose').string('ActiveUserID', stropt(16)).int32le('BrokerOrderSeq').string('RelativeOrderSysID', stropt(21)).skip(3).int32le('ZCETotalTradedVolume').int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(3).int32le('IsSwapOrder').string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports.CThostFtdcErrorConditionalOrderFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', OrderRef:'', UserID:'', OrderPriceType:'', Direction:'', CombOffsetFlag:'', CombHedgeFlag:'', LimitPrice:0, VolumeTotalOriginal:0, TimeCondition:'', GTDDate:'', VolumeCondition:'', MinVolume:0, ContingentCondition:'', StopPrice:0, ForceCloseReason:'', IsAutoSuspend:0, BusinessUnit:'', RequestID:0, OrderLocalID:'', ExchangeID:'', ParticipantID:'', ClientID:'', ExchangeInstID:'', TraderID:'', InstallID:0, OrderSubmitStatus:'', NotifySequence:0, TradingDay:'', SettlementID:0, OrderSysID:'', OrderSource:'', OrderStatus:'', OrderType:'', VolumeTraded:0, VolumeTotal:0, InsertDate:'', InsertTime:'', ActiveTime:'', SuspendTime:'', UpdateTime:'', CancelTime:'', ActiveTraderID:'', ClearingPartID:'', SequenceNo:0, FrontID:0, SessionID:0, UserProductInfo:'', StatusMsg:'', UserForceClose:0, ActiveUserID:'', BrokerOrderSeq:0, RelativeOrderSysID:'', ZCETotalTradedVolume:0, ErrorID:0, ErrorMsg:'', IsSwapOrder:0, BranchID:'', InvestUnitID:'', AccountID:'', CurrencyID:'', IPAddress:'', MacAddress:'', }};
exports.CThostFtdcQryErrOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13));
exports.CThostFtdcQryErrOrderActionFieldInit = () => {return {BrokerID:'', InvestorID:'', }};
exports.CThostFtdcErrOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('OrderActionRef').string('OrderRef', stropt(13)).skip(3).int32le('RequestID').int32le('FrontID').int32le('SessionID').string('ExchangeID', stropt(9)).string('OrderSysID', stropt(21)).string('ActionFlag', stropt(1)).skip(1).doublele('LimitPrice').int32le('VolumeChange').string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).skip(1).int32le('InstallID').string('OrderLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).array('StatusMsg', {type:'uint8', length: 81}).string('InstrumentID', stropt(31)).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).skip(3).int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(3);
exports.CThostFtdcErrOrderActionFieldInit = () => {return {BrokerID:'', InvestorID:'', OrderActionRef:0, OrderRef:'', RequestID:0, FrontID:0, SessionID:0, ExchangeID:'', OrderSysID:'', ActionFlag:'', LimitPrice:0, VolumeChange:0, ActionDate:'', ActionTime:'', TraderID:'', InstallID:0, OrderLocalID:'', ActionLocalID:'', ParticipantID:'', ClientID:'', BusinessUnit:'', OrderActionStatus:'', UserID:'', StatusMsg:'', InstrumentID:'', BranchID:'', InvestUnitID:'', IPAddress:'', MacAddress:'', ErrorID:0, ErrorMsg:'', }};
exports.CThostFtdcQryExchangeSequenceFieldParser = () => new Parser().string('ExchangeID', stropt(9));
exports.CThostFtdcQryExchangeSequenceFieldInit = () => {return {ExchangeID:'', }};
exports.CThostFtdcExchangeSequenceFieldParser = () => new Parser().string('ExchangeID', stropt(9)).skip(3).int32le('SequenceNo').string('MarketStatus', stropt(1)).skip(3);
exports.CThostFtdcExchangeSequenceFieldInit = () => {return {ExchangeID:'', SequenceNo:0, MarketStatus:'', }};
exports.CThostFtdcQueryMaxOrderVolumeWithPriceFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('Direction', stropt(1)).string('OffsetFlag', stropt(1)).string('HedgeFlag', stropt(1)).skip(2).int32le('MaxVolume').doublele('Price').string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).skip(6);
exports.CThostFtdcQueryMaxOrderVolumeWithPriceFieldInit = () => {return {BrokerID:'', InvestorID:'', InstrumentID:'', Direction:'', OffsetFlag:'', HedgeFlag:'', MaxVolume:0, Price:0, ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcQryBrokerTradingParamsFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('CurrencyID', stropt(4)).string('AccountID', stropt(13));
exports.CThostFtdcQryBrokerTradingParamsFieldInit = () => {return {BrokerID:'', InvestorID:'', CurrencyID:'', AccountID:'', }};
exports.CThostFtdcBrokerTradingParamsFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('MarginPriceType', stropt(1)).string('Algorithm', stropt(1)).string('AvailIncludeCloseProfit', stropt(1)).string('CurrencyID', stropt(4)).string('OptionRoyaltyPriceType', stropt(1)).string('AccountID', stropt(13));
exports.CThostFtdcBrokerTradingParamsFieldInit = () => {return {BrokerID:'', InvestorID:'', MarginPriceType:'', Algorithm:'', AvailIncludeCloseProfit:'', CurrencyID:'', OptionRoyaltyPriceType:'', AccountID:'', }};
exports.CThostFtdcQryBrokerTradingAlgosFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('ExchangeID', stropt(9)).string('InstrumentID', stropt(31));
exports.CThostFtdcQryBrokerTradingAlgosFieldInit = () => {return {BrokerID:'', ExchangeID:'', InstrumentID:'', }};
exports.CThostFtdcBrokerTradingAlgosFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('ExchangeID', stropt(9)).string('InstrumentID', stropt(31)).string('HandlePositionAlgoID', stropt(1)).string('FindMarginRateAlgoID', stropt(1)).string('HandleTradingAccountAlgoID', stropt(1));
exports.CThostFtdcBrokerTradingAlgosFieldInit = () => {return {BrokerID:'', ExchangeID:'', InstrumentID:'', HandlePositionAlgoID:'', FindMarginRateAlgoID:'', HandleTradingAccountAlgoID:'', }};
exports.CThostFtdcQueryBrokerDepositFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('ExchangeID', stropt(9));
exports.CThostFtdcQueryBrokerDepositFieldInit = () => {return {BrokerID:'', ExchangeID:'', }};
exports.CThostFtdcBrokerDepositFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('ParticipantID', stropt(11)).string('ExchangeID', stropt(9)).doublele('PreBalance').doublele('CurrMargin').doublele('CloseProfit').doublele('Balance').doublele('Deposit').doublele('Withdraw').doublele('Available').doublele('Reserve').doublele('FrozenMargin');
exports.CThostFtdcBrokerDepositFieldInit = () => {return {TradingDay:'', BrokerID:'', ParticipantID:'', ExchangeID:'', PreBalance:0, CurrMargin:0, CloseProfit:0, Balance:0, Deposit:0, Withdraw:0, Available:0, Reserve:0, FrozenMargin:0, }};
exports.CThostFtdcQryCFMMCBrokerKeyFieldParser = () => new Parser().string('BrokerID', stropt(11));
exports.CThostFtdcQryCFMMCBrokerKeyFieldInit = () => {return {BrokerID:'', }};
exports.CThostFtdcCFMMCBrokerKeyFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('ParticipantID', stropt(11)).string('CreateDate', stropt(9)).string('CreateTime', stropt(9)).int32le('KeyID').string('CurrentKey', stropt(21)).string('KeyKind', stropt(1)).skip(2);
exports.CThostFtdcCFMMCBrokerKeyFieldInit = () => {return {BrokerID:'', ParticipantID:'', CreateDate:'', CreateTime:'', KeyID:0, CurrentKey:'', KeyKind:'', }};
exports.CThostFtdcCFMMCTradingAccountKeyFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('ParticipantID', stropt(11)).string('AccountID', stropt(13)).skip(1).int32le('KeyID').string('CurrentKey', stropt(21)).skip(3);
exports.CThostFtdcCFMMCTradingAccountKeyFieldInit = () => {return {BrokerID:'', ParticipantID:'', AccountID:'', KeyID:0, CurrentKey:'', }};
exports.CThostFtdcQryCFMMCTradingAccountKeyFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13));
exports.CThostFtdcQryCFMMCTradingAccountKeyFieldInit = () => {return {BrokerID:'', InvestorID:'', }};
exports.CThostFtdcBrokerUserOTPParamFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('OTPVendorsID', stropt(2)).string('SerialNumber', stropt(17)).string('AuthKey', stropt(41)).skip(1).int32le('LastDrift').int32le('LastSuccess').string('OTPType', stropt(1)).skip(3);
exports.CThostFtdcBrokerUserOTPParamFieldInit = () => {return {BrokerID:'', UserID:'', OTPVendorsID:'', SerialNumber:'', AuthKey:'', LastDrift:0, LastSuccess:0, OTPType:'', }};
exports.CThostFtdcManualSyncBrokerUserOTPFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('OTPType', stropt(1)).string('FirstOTP', stropt(41)).string('SecondOTP', stropt(41));
exports.CThostFtdcManualSyncBrokerUserOTPFieldInit = () => {return {BrokerID:'', UserID:'', OTPType:'', FirstOTP:'', SecondOTP:'', }};
exports.CThostFtdcCommRateModelFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('CommModelID', stropt(13)).string('CommModelName', stropt(161));
exports.CThostFtdcCommRateModelFieldInit = () => {return {BrokerID:'', CommModelID:'', CommModelName:'', }};
exports.CThostFtdcQryCommRateModelFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('CommModelID', stropt(13));
exports.CThostFtdcQryCommRateModelFieldInit = () => {return {BrokerID:'', CommModelID:'', }};
exports.CThostFtdcMarginModelFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('MarginModelID', stropt(13)).string('MarginModelName', stropt(161));
exports.CThostFtdcMarginModelFieldInit = () => {return {BrokerID:'', MarginModelID:'', MarginModelName:'', }};
exports.CThostFtdcQryMarginModelFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('MarginModelID', stropt(13));
exports.CThostFtdcQryMarginModelFieldInit = () => {return {BrokerID:'', MarginModelID:'', }};
exports.CThostFtdcEWarrantOffsetFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ExchangeID', stropt(9)).string('InstrumentID', stropt(31)).string('Direction', stropt(1)).string('HedgeFlag', stropt(1)).skip(1).int32le('Volume').string('InvestUnitID', stropt(17)).skip(3);
exports.CThostFtdcEWarrantOffsetFieldInit = () => {return {TradingDay:'', BrokerID:'', InvestorID:'', ExchangeID:'', InstrumentID:'', Direction:'', HedgeFlag:'', Volume:0, InvestUnitID:'', }};
exports.CThostFtdcQryEWarrantOffsetFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ExchangeID', stropt(9)).string('InstrumentID', stropt(31)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryEWarrantOffsetFieldInit = () => {return {BrokerID:'', InvestorID:'', ExchangeID:'', InstrumentID:'', InvestUnitID:'', }};
exports.CThostFtdcQryInvestorProductGroupMarginFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ProductGroupID', stropt(31)).string('HedgeFlag', stropt(1)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQryInvestorProductGroupMarginFieldInit = () => {return {BrokerID:'', InvestorID:'', ProductGroupID:'', HedgeFlag:'', ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcInvestorProductGroupMarginFieldParser = () => new Parser().string('ProductGroupID', stropt(31)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).doublele('FrozenMargin').doublele('LongFrozenMargin').doublele('ShortFrozenMargin').doublele('UseMargin').doublele('LongUseMargin').doublele('ShortUseMargin').doublele('ExchMargin').doublele('LongExchMargin').doublele('ShortExchMargin').doublele('CloseProfit').doublele('FrozenCommission').doublele('Commission').doublele('FrozenCash').doublele('CashIn').doublele('PositionProfit').doublele('OffsetAmount').doublele('LongOffsetAmount').doublele('ShortOffsetAmount').doublele('ExchOffsetAmount').doublele('LongExchOffsetAmount').doublele('ShortExchOffsetAmount').string('HedgeFlag', stropt(1)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).skip(5);
exports.CThostFtdcInvestorProductGroupMarginFieldInit = () => {return {ProductGroupID:'', BrokerID:'', InvestorID:'', TradingDay:'', SettlementID:0, FrozenMargin:0, LongFrozenMargin:0, ShortFrozenMargin:0, UseMargin:0, LongUseMargin:0, ShortUseMargin:0, ExchMargin:0, LongExchMargin:0, ShortExchMargin:0, CloseProfit:0, FrozenCommission:0, Commission:0, FrozenCash:0, CashIn:0, PositionProfit:0, OffsetAmount:0, LongOffsetAmount:0, ShortOffsetAmount:0, ExchOffsetAmount:0, LongExchOffsetAmount:0, ShortExchOffsetAmount:0, HedgeFlag:'', ExchangeID:'', InvestUnitID:'', }};
exports.CThostFtdcQueryCFMMCTradingAccountTokenFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InvestUnitID', stropt(17));
exports.CThostFtdcQueryCFMMCTradingAccountTokenFieldInit = () => {return {BrokerID:'', InvestorID:'', InvestUnitID:'', }};
exports.CThostFtdcCFMMCTradingAccountTokenFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('ParticipantID', stropt(11)).string('AccountID', stropt(13)).skip(1).int32le('KeyID').string('Token', stropt(21)).skip(3);
exports.CThostFtdcCFMMCTradingAccountTokenFieldInit = () => {return {BrokerID:'', ParticipantID:'', AccountID:'', KeyID:0, Token:'', }};
exports.CThostFtdcQryProductGroupFieldParser = () => new Parser().string('ProductID', stropt(31)).string('ExchangeID', stropt(9));
exports.CThostFtdcQryProductGroupFieldInit = () => {return {ProductID:'', ExchangeID:'', }};
exports.CThostFtdcProductGroupFieldParser = () => new Parser().string('ProductID', stropt(31)).string('ExchangeID', stropt(9)).string('ProductGroupID', stropt(31));
exports.CThostFtdcProductGroupFieldInit = () => {return {ProductID:'', ExchangeID:'', ProductGroupID:'', }};
exports.CThostFtdcBulletinFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('TradingDay', stropt(9)).skip(2).int32le('BulletinID').int32le('SequenceNo').string('NewsType', stropt(3)).string('NewsUrgency', stropt(1)).string('SendTime', stropt(9)).string('Abstract', stropt(81)).string('ComeFrom', stropt(21)).string('Content', stropt(501)).string('URLLink', stropt(201)).string('MarketID', stropt(31));
exports.CThostFtdcBulletinFieldInit = () => {return {ExchangeID:'', TradingDay:'', BulletinID:0, SequenceNo:0, NewsType:'', NewsUrgency:'', SendTime:'', Abstract:'', ComeFrom:'', Content:'', URLLink:'', MarketID:'', }};
exports.CThostFtdcQryBulletinFieldParser = () => new Parser().string('ExchangeID', stropt(9)).skip(3).int32le('BulletinID').int32le('SequenceNo').string('NewsType', stropt(3)).string('NewsUrgency', stropt(1));
exports.CThostFtdcQryBulletinFieldInit = () => {return {ExchangeID:'', BulletinID:0, SequenceNo:0, NewsType:'', NewsUrgency:'', }};
exports.CThostFtdcReqOpenAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('Gender', stropt(1)).string('CountryCode', stropt(21)).string('CustType', stropt(1)).string('Address', stropt(101)).string('ZipCode', stropt(7)).string('Telephone', stropt(41)).string('MobilePhone', stropt(21)).string('Fax', stropt(41)).string('EMail', stropt(41)).string('MoneyAccountStatus', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).skip(1).int32le('InstallID').string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('CashExchangeCode', stropt(1)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).int32le('TID').string('UserID', stropt(16)).string('LongCustomerName', stropt(161)).skip(3);
exports.CThostFtdcReqOpenAccountFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, CustomerName:'', IdCardType:'', IdentifiedCardNo:'', Gender:'', CountryCode:'', CustType:'', Address:'', ZipCode:'', Telephone:'', MobilePhone:'', Fax:'', EMail:'', MoneyAccountStatus:'', BankAccount:'', BankPassWord:'', AccountID:'', Password:'', InstallID:0, VerifyCertNoFlag:'', CurrencyID:'', CashExchangeCode:'', Digest:'', BankAccType:'', DeviceID:'', BankSecuAccType:'', BrokerIDByBank:'', BankSecuAcc:'', BankPwdFlag:'', SecuPwdFlag:'', OperNo:'', TID:0, UserID:'', LongCustomerName:'', }};
exports.CThostFtdcReqCancelAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('Gender', stropt(1)).string('CountryCode', stropt(21)).string('CustType', stropt(1)).string('Address', stropt(101)).string('ZipCode', stropt(7)).string('Telephone', stropt(41)).string('MobilePhone', stropt(21)).string('Fax', stropt(41)).string('EMail', stropt(41)).string('MoneyAccountStatus', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).skip(1).int32le('InstallID').string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('CashExchangeCode', stropt(1)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).int32le('TID').string('UserID', stropt(16)).string('LongCustomerName', stropt(161)).skip(3);
exports.CThostFtdcReqCancelAccountFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, CustomerName:'', IdCardType:'', IdentifiedCardNo:'', Gender:'', CountryCode:'', CustType:'', Address:'', ZipCode:'', Telephone:'', MobilePhone:'', Fax:'', EMail:'', MoneyAccountStatus:'', BankAccount:'', BankPassWord:'', AccountID:'', Password:'', InstallID:0, VerifyCertNoFlag:'', CurrencyID:'', CashExchangeCode:'', Digest:'', BankAccType:'', DeviceID:'', BankSecuAccType:'', BrokerIDByBank:'', BankSecuAcc:'', BankPwdFlag:'', SecuPwdFlag:'', OperNo:'', TID:0, UserID:'', LongCustomerName:'', }};
exports.CThostFtdcReqChangeAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('Gender', stropt(1)).string('CountryCode', stropt(21)).string('CustType', stropt(1)).string('Address', stropt(101)).string('ZipCode', stropt(7)).string('Telephone', stropt(41)).string('MobilePhone', stropt(21)).string('Fax', stropt(41)).string('EMail', stropt(41)).string('MoneyAccountStatus', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('NewBankAccount', stropt(41)).string('NewBankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).string('BankAccType', stropt(1)).skip(2).int32le('InstallID').string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('BrokerIDByBank', stropt(33)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).int32le('TID').string('Digest', stropt(36)).string('LongCustomerName', stropt(161)).skip(3);
exports.CThostFtdcReqChangeAccountFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, CustomerName:'', IdCardType:'', IdentifiedCardNo:'', Gender:'', CountryCode:'', CustType:'', Address:'', ZipCode:'', Telephone:'', MobilePhone:'', Fax:'', EMail:'', MoneyAccountStatus:'', BankAccount:'', BankPassWord:'', NewBankAccount:'', NewBankPassWord:'', AccountID:'', Password:'', BankAccType:'', InstallID:0, VerifyCertNoFlag:'', CurrencyID:'', BrokerIDByBank:'', BankPwdFlag:'', SecuPwdFlag:'', TID:0, Digest:'', LongCustomerName:'', }};
exports.CThostFtdcReqTransferFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('InstallID').int32le('FutureSerial').string('UserID', stropt(16)).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).skip(3).doublele('TradeAmount').doublele('FutureFetchAmount').string('FeePayFlag', stropt(1)).skip(7).doublele('CustFee').doublele('BrokerFee').string('Message', stropt(129)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).skip(1).int32le('RequestID').int32le('TID').string('TransferStatus', stropt(1)).string('LongCustomerName', stropt(161)).skip(6);
exports.CThostFtdcReqTransferFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, CustomerName:'', IdCardType:'', IdentifiedCardNo:'', CustType:'', BankAccount:'', BankPassWord:'', AccountID:'', Password:'', InstallID:0, FutureSerial:0, UserID:'', VerifyCertNoFlag:'', CurrencyID:'', TradeAmount:0, FutureFetchAmount:0, FeePayFlag:'', CustFee:0, BrokerFee:0, Message:'', Digest:'', BankAccType:'', DeviceID:'', BankSecuAccType:'', BrokerIDByBank:'', BankSecuAcc:'', BankPwdFlag:'', SecuPwdFlag:'', OperNo:'', RequestID:0, TID:0, TransferStatus:'', LongCustomerName:'', }};
exports.CThostFtdcRspTransferFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('InstallID').int32le('FutureSerial').string('UserID', stropt(16)).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).skip(3).doublele('TradeAmount').doublele('FutureFetchAmount').string('FeePayFlag', stropt(1)).skip(7).doublele('CustFee').doublele('BrokerFee').string('Message', stropt(129)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).skip(1).int32le('RequestID').int32le('TID').string('TransferStatus', stropt(1)).skip(3).int32le('ErrorID').string('ErrorMsg', stropt(81)).string('LongCustomerName', stropt(161)).skip(6);
exports.CThostFtdcRspTransferFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, CustomerName:'', IdCardType:'', IdentifiedCardNo:'', CustType:'', BankAccount:'', BankPassWord:'', AccountID:'', Password:'', InstallID:0, FutureSerial:0, UserID:'', VerifyCertNoFlag:'', CurrencyID:'', TradeAmount:0, FutureFetchAmount:0, FeePayFlag:'', CustFee:0, BrokerFee:0, Message:'', Digest:'', BankAccType:'', DeviceID:'', BankSecuAccType:'', BrokerIDByBank:'', BankSecuAcc:'', BankPwdFlag:'', SecuPwdFlag:'', OperNo:'', RequestID:0, TID:0, TransferStatus:'', ErrorID:0, ErrorMsg:'', LongCustomerName:'', }};
exports.CThostFtdcReqRepealFieldParser = () => new Parser().int32le('RepealTimeInterval').int32le('RepealedTimes').string('BankRepealFlag', stropt(1)).string('BrokerRepealFlag', stropt(1)).skip(2).int32le('PlateRepealSerial').string('BankRepealSerial', stropt(13)).skip(3).int32le('FutureRepealSerial').string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('InstallID').int32le('FutureSerial').string('UserID', stropt(16)).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).skip(7).doublele('TradeAmount').doublele('FutureFetchAmount').string('FeePayFlag', stropt(1)).skip(7).doublele('CustFee').doublele('BrokerFee').string('Message', stropt(129)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).skip(1).int32le('RequestID').int32le('TID').string('TransferStatus', stropt(1)).string('LongCustomerName', stropt(161)).skip(6);
exports.CThostFtdcReqRepealFieldInit = () => {return {RepealTimeInterval:0, RepealedTimes:0, BankRepealFlag:'', BrokerRepealFlag:'', PlateRepealSerial:0, BankRepealSerial:'', FutureRepealSerial:0, TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, CustomerName:'', IdCardType:'', IdentifiedCardNo:'', CustType:'', BankAccount:'', BankPassWord:'', AccountID:'', Password:'', InstallID:0, FutureSerial:0, UserID:'', VerifyCertNoFlag:'', CurrencyID:'', TradeAmount:0, FutureFetchAmount:0, FeePayFlag:'', CustFee:0, BrokerFee:0, Message:'', Digest:'', BankAccType:'', DeviceID:'', BankSecuAccType:'', BrokerIDByBank:'', BankSecuAcc:'', BankPwdFlag:'', SecuPwdFlag:'', OperNo:'', RequestID:0, TID:0, TransferStatus:'', LongCustomerName:'', }};
exports.CThostFtdcRspRepealFieldParser = () => new Parser().int32le('RepealTimeInterval').int32le('RepealedTimes').string('BankRepealFlag', stropt(1)).string('BrokerRepealFlag', stropt(1)).skip(2).int32le('PlateRepealSerial').string('BankRepealSerial', stropt(13)).skip(3).int32le('FutureRepealSerial').string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('InstallID').int32le('FutureSerial').string('UserID', stropt(16)).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).skip(7).doublele('TradeAmount').doublele('FutureFetchAmount').string('FeePayFlag', stropt(1)).skip(7).doublele('CustFee').doublele('BrokerFee').string('Message', stropt(129)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).skip(1).int32le('RequestID').int32le('TID').string('TransferStatus', stropt(1)).skip(3).int32le('ErrorID').string('ErrorMsg', stropt(81)).string('LongCustomerName', stropt(161)).skip(6);
exports.CThostFtdcRspRepealFieldInit = () => {return {RepealTimeInterval:0, RepealedTimes:0, BankRepealFlag:'', BrokerRepealFlag:'', PlateRepealSerial:0, BankRepealSerial:'', FutureRepealSerial:0, TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, CustomerName:'', IdCardType:'', IdentifiedCardNo:'', CustType:'', BankAccount:'', BankPassWord:'', AccountID:'', Password:'', InstallID:0, FutureSerial:0, UserID:'', VerifyCertNoFlag:'', CurrencyID:'', TradeAmount:0, FutureFetchAmount:0, FeePayFlag:'', CustFee:0, BrokerFee:0, Message:'', Digest:'', BankAccType:'', DeviceID:'', BankSecuAccType:'', BrokerIDByBank:'', BankSecuAcc:'', BankPwdFlag:'', SecuPwdFlag:'', OperNo:'', RequestID:0, TID:0, TransferStatus:'', ErrorID:0, ErrorMsg:'', LongCustomerName:'', }};
exports.CThostFtdcReqQueryAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('FutureSerial').int32le('InstallID').string('UserID', stropt(16)).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).skip(1).int32le('RequestID').int32le('TID').string('LongCustomerName', stropt(161)).skip(3);
exports.CThostFtdcReqQueryAccountFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, CustomerName:'', IdCardType:'', IdentifiedCardNo:'', CustType:'', BankAccount:'', BankPassWord:'', AccountID:'', Password:'', FutureSerial:0, InstallID:0, UserID:'', VerifyCertNoFlag:'', CurrencyID:'', Digest:'', BankAccType:'', DeviceID:'', BankSecuAccType:'', BrokerIDByBank:'', BankSecuAcc:'', BankPwdFlag:'', SecuPwdFlag:'', OperNo:'', RequestID:0, TID:0, LongCustomerName:'', }};
exports.CThostFtdcRspQueryAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('FutureSerial').int32le('InstallID').string('UserID', stropt(16)).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).skip(1).int32le('RequestID').int32le('TID').skip(4).doublele('BankUseAmount').doublele('BankFetchAmount').string('LongCustomerName', stropt(161)).skip(7);
exports.CThostFtdcRspQueryAccountFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, CustomerName:'', IdCardType:'', IdentifiedCardNo:'', CustType:'', BankAccount:'', BankPassWord:'', AccountID:'', Password:'', FutureSerial:0, InstallID:0, UserID:'', VerifyCertNoFlag:'', CurrencyID:'', Digest:'', BankAccType:'', DeviceID:'', BankSecuAccType:'', BrokerIDByBank:'', BankSecuAcc:'', BankPwdFlag:'', SecuPwdFlag:'', OperNo:'', RequestID:0, TID:0, BankUseAmount:0, BankFetchAmount:0, LongCustomerName:'', }};
exports.CThostFtdcFutureSignIOFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').int32le('InstallID').string('UserID', stropt(16)).string('Digest', stropt(36)).string('CurrencyID', stropt(4)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).skip(3).int32le('RequestID').int32le('TID');
exports.CThostFtdcFutureSignIOFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, InstallID:0, UserID:'', Digest:'', CurrencyID:'', DeviceID:'', BrokerIDByBank:'', OperNo:'', RequestID:0, TID:0, }};
exports.CThostFtdcRspFutureSignInFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').int32le('InstallID').string('UserID', stropt(16)).string('Digest', stropt(36)).string('CurrencyID', stropt(4)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).skip(3).int32le('RequestID').int32le('TID').int32le('ErrorID').string('ErrorMsg', stropt(81)).string('PinKey', stropt(129)).string('MacKey', stropt(129)).skip(1);
exports.CThostFtdcRspFutureSignInFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, InstallID:0, UserID:'', Digest:'', CurrencyID:'', DeviceID:'', BrokerIDByBank:'', OperNo:'', RequestID:0, TID:0, ErrorID:0, ErrorMsg:'', PinKey:'', MacKey:'', }};
exports.CThostFtdcReqFutureSignOutFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').int32le('InstallID').string('UserID', stropt(16)).string('Digest', stropt(36)).string('CurrencyID', stropt(4)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).skip(3).int32le('RequestID').int32le('TID');
exports.CThostFtdcReqFutureSignOutFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, InstallID:0, UserID:'', Digest:'', CurrencyID:'', DeviceID:'', BrokerIDByBank:'', OperNo:'', RequestID:0, TID:0, }};
exports.CThostFtdcRspFutureSignOutFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').int32le('InstallID').string('UserID', stropt(16)).string('Digest', stropt(36)).string('CurrencyID', stropt(4)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).skip(3).int32le('RequestID').int32le('TID').int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(3);
exports.CThostFtdcRspFutureSignOutFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, InstallID:0, UserID:'', Digest:'', CurrencyID:'', DeviceID:'', BrokerIDByBank:'', OperNo:'', RequestID:0, TID:0, ErrorID:0, ErrorMsg:'', }};
exports.CThostFtdcReqQueryTradeResultBySerialFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').int32le('Reference').string('RefrenceIssureType', stropt(1)).string('RefrenceIssure', stropt(36)).string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).string('CurrencyID', stropt(4)).skip(3).doublele('TradeAmount').string('Digest', stropt(36)).string('LongCustomerName', stropt(161)).skip(3);
exports.CThostFtdcReqQueryTradeResultBySerialFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, Reference:0, RefrenceIssureType:'', RefrenceIssure:'', CustomerName:'', IdCardType:'', IdentifiedCardNo:'', CustType:'', BankAccount:'', BankPassWord:'', AccountID:'', Password:'', CurrencyID:'', TradeAmount:0, Digest:'', LongCustomerName:'', }};
exports.CThostFtdcRspQueryTradeResultBySerialFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(3).int32le('Reference').string('RefrenceIssureType', stropt(1)).string('RefrenceIssure', stropt(36)).string('OriginReturnCode', stropt(7)).string('OriginDescrInfoForReturnCode', stropt(129)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).string('CurrencyID', stropt(4)).skip(3).doublele('TradeAmount').string('Digest', stropt(36)).skip(4);
exports.CThostFtdcRspQueryTradeResultBySerialFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, ErrorID:0, ErrorMsg:'', Reference:0, RefrenceIssureType:'', RefrenceIssure:'', OriginReturnCode:'', OriginDescrInfoForReturnCode:'', BankAccount:'', BankPassWord:'', AccountID:'', Password:'', CurrencyID:'', TradeAmount:0, Digest:'', }};
exports.CThostFtdcReqDayEndFileReadyFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('FileBusinessCode', stropt(1)).string('Digest', stropt(36)).skip(3);
exports.CThostFtdcReqDayEndFileReadyFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, FileBusinessCode:'', Digest:'', }};
exports.CThostFtdcReturnResultFieldParser = () => new Parser().string('ReturnCode', stropt(7)).string('DescrInfoForReturnCode', stropt(129));
exports.CThostFtdcReturnResultFieldInit = () => {return {ReturnCode:'', DescrInfoForReturnCode:'', }};
exports.CThostFtdcVerifyFuturePasswordFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('AccountID', stropt(13)).string('Password', stropt(41)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).int32le('InstallID').int32le('TID').string('CurrencyID', stropt(4));
exports.CThostFtdcVerifyFuturePasswordFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, AccountID:'', Password:'', BankAccount:'', BankPassWord:'', InstallID:0, TID:0, CurrencyID:'', }};
exports.CThostFtdcVerifyCustInfoFieldParser = () => new Parser().string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('LongCustomerName', stropt(161));
exports.CThostFtdcVerifyCustInfoFieldInit = () => {return {CustomerName:'', IdCardType:'', IdentifiedCardNo:'', CustType:'', LongCustomerName:'', }};
exports.CThostFtdcVerifyFuturePasswordAndCustInfoFieldParser = () => new Parser().string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('AccountID', stropt(13)).string('Password', stropt(41)).string('CurrencyID', stropt(4)).string('LongCustomerName', stropt(161));
exports.CThostFtdcVerifyFuturePasswordAndCustInfoFieldInit = () => {return {CustomerName:'', IdCardType:'', IdentifiedCardNo:'', CustType:'', AccountID:'', Password:'', CurrencyID:'', LongCustomerName:'', }};
exports.CThostFtdcDepositResultInformFieldParser = () => new Parser().string('DepositSeqNo', stropt(15)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).skip(1).doublele('Deposit').int32le('RequestID').string('ReturnCode', stropt(7)).string('DescrInfoForReturnCode', stropt(129)).skip(4);
exports.CThostFtdcDepositResultInformFieldInit = () => {return {DepositSeqNo:'', BrokerID:'', InvestorID:'', Deposit:0, RequestID:0, ReturnCode:'', DescrInfoForReturnCode:'', }};
exports.CThostFtdcReqSyncKeyFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').int32le('InstallID').string('UserID', stropt(16)).string('Message', stropt(129)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).skip(2).int32le('RequestID').int32le('TID');
exports.CThostFtdcReqSyncKeyFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, InstallID:0, UserID:'', Message:'', DeviceID:'', BrokerIDByBank:'', OperNo:'', RequestID:0, TID:0, }};
exports.CThostFtdcRspSyncKeyFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').int32le('InstallID').string('UserID', stropt(16)).string('Message', stropt(129)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).skip(2).int32le('RequestID').int32le('TID').int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(3);
exports.CThostFtdcRspSyncKeyFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, InstallID:0, UserID:'', Message:'', DeviceID:'', BrokerIDByBank:'', OperNo:'', RequestID:0, TID:0, ErrorID:0, ErrorMsg:'', }};
exports.CThostFtdcNotifyQueryAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('FutureSerial').int32le('InstallID').string('UserID', stropt(16)).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).skip(1).int32le('RequestID').int32le('TID').skip(4).doublele('BankUseAmount').doublele('BankFetchAmount').int32le('ErrorID').string('ErrorMsg', stropt(81)).string('LongCustomerName', stropt(161)).skip(2);
exports.CThostFtdcNotifyQueryAccountFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, CustomerName:'', IdCardType:'', IdentifiedCardNo:'', CustType:'', BankAccount:'', BankPassWord:'', AccountID:'', Password:'', FutureSerial:0, InstallID:0, UserID:'', VerifyCertNoFlag:'', CurrencyID:'', Digest:'', BankAccType:'', DeviceID:'', BankSecuAccType:'', BrokerIDByBank:'', BankSecuAcc:'', BankPwdFlag:'', SecuPwdFlag:'', OperNo:'', RequestID:0, TID:0, BankUseAmount:0, BankFetchAmount:0, ErrorID:0, ErrorMsg:'', LongCustomerName:'', }};
exports.CThostFtdcTransferSerialFieldParser = () => new Parser().int32le('PlateSerial').string('TradeDate', stropt(9)).string('TradingDay', stropt(9)).string('TradeTime', stropt(9)).string('TradeCode', stropt(7)).skip(2).int32le('SessionID').string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BankAccType', stropt(1)).string('BankAccount', stropt(41)).string('BankSerial', stropt(13)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('FutureAccType', stropt(1)).string('AccountID', stropt(13)).string('InvestorID', stropt(13)).skip(3).int32le('FutureSerial').string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CurrencyID', stropt(4)).doublele('TradeAmount').doublele('CustFee').doublele('BrokerFee').string('AvailabilityFlag', stropt(1)).string('OperatorCode', stropt(17)).string('BankNewAccount', stropt(41)).skip(1).int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(7);
exports.CThostFtdcTransferSerialFieldInit = () => {return {PlateSerial:0, TradeDate:'', TradingDay:'', TradeTime:'', TradeCode:'', SessionID:0, BankID:'', BankBranchID:'', BankAccType:'', BankAccount:'', BankSerial:'', BrokerID:'', BrokerBranchID:'', FutureAccType:'', AccountID:'', InvestorID:'', FutureSerial:0, IdCardType:'', IdentifiedCardNo:'', CurrencyID:'', TradeAmount:0, CustFee:0, BrokerFee:0, AvailabilityFlag:'', OperatorCode:'', BankNewAccount:'', ErrorID:0, ErrorMsg:'', }};
exports.CThostFtdcQryTransferSerialFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).string('BankID', stropt(4)).string('CurrencyID', stropt(4));
exports.CThostFtdcQryTransferSerialFieldInit = () => {return {BrokerID:'', AccountID:'', BankID:'', CurrencyID:'', }};
exports.CThostFtdcNotifyFutureSignInFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').int32le('InstallID').string('UserID', stropt(16)).string('Digest', stropt(36)).string('CurrencyID', stropt(4)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).skip(3).int32le('RequestID').int32le('TID').int32le('ErrorID').string('ErrorMsg', stropt(81)).string('PinKey', stropt(129)).string('MacKey', stropt(129)).skip(1);
exports.CThostFtdcNotifyFutureSignInFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, InstallID:0, UserID:'', Digest:'', CurrencyID:'', DeviceID:'', BrokerIDByBank:'', OperNo:'', RequestID:0, TID:0, ErrorID:0, ErrorMsg:'', PinKey:'', MacKey:'', }};
exports.CThostFtdcNotifyFutureSignOutFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').int32le('InstallID').string('UserID', stropt(16)).string('Digest', stropt(36)).string('CurrencyID', stropt(4)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).skip(3).int32le('RequestID').int32le('TID').int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(3);
exports.CThostFtdcNotifyFutureSignOutFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, InstallID:0, UserID:'', Digest:'', CurrencyID:'', DeviceID:'', BrokerIDByBank:'', OperNo:'', RequestID:0, TID:0, ErrorID:0, ErrorMsg:'', }};
exports.CThostFtdcNotifySyncKeyFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').int32le('InstallID').string('UserID', stropt(16)).string('Message', stropt(129)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).skip(2).int32le('RequestID').int32le('TID').int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(3);
exports.CThostFtdcNotifySyncKeyFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, InstallID:0, UserID:'', Message:'', DeviceID:'', BrokerIDByBank:'', OperNo:'', RequestID:0, TID:0, ErrorID:0, ErrorMsg:'', }};
exports.CThostFtdcQryAccountregisterFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('CurrencyID', stropt(4));
exports.CThostFtdcQryAccountregisterFieldInit = () => {return {BrokerID:'', AccountID:'', BankID:'', BankBranchID:'', CurrencyID:'', }};
exports.CThostFtdcAccountregisterFieldParser = () => new Parser().string('TradeDay', stropt(9)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BankAccount', stropt(41)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('AccountID', stropt(13)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustomerName', stropt(51)).string('CurrencyID', stropt(4)).string('OpenOrDestroy', stropt(1)).string('RegDate', stropt(9)).string('OutDate', stropt(9)).int32le('TID').string('CustType', stropt(1)).string('BankAccType', stropt(1)).string('LongCustomerName', stropt(161)).skip(1);
exports.CThostFtdcAccountregisterFieldInit = () => {return {TradeDay:'', BankID:'', BankBranchID:'', BankAccount:'', BrokerID:'', BrokerBranchID:'', AccountID:'', IdCardType:'', IdentifiedCardNo:'', CustomerName:'', CurrencyID:'', OpenOrDestroy:'', RegDate:'', OutDate:'', TID:0, CustType:'', BankAccType:'', LongCustomerName:'', }};
exports.CThostFtdcOpenAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('Gender', stropt(1)).string('CountryCode', stropt(21)).string('CustType', stropt(1)).string('Address', stropt(101)).string('ZipCode', stropt(7)).string('Telephone', stropt(41)).string('MobilePhone', stropt(21)).string('Fax', stropt(41)).string('EMail', stropt(41)).string('MoneyAccountStatus', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).skip(1).int32le('InstallID').string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('CashExchangeCode', stropt(1)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).int32le('TID').string('UserID', stropt(16)).int32le('ErrorID').string('ErrorMsg', stropt(81)).string('LongCustomerName', stropt(161)).skip(2);
exports.CThostFtdcOpenAccountFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, CustomerName:'', IdCardType:'', IdentifiedCardNo:'', Gender:'', CountryCode:'', CustType:'', Address:'', ZipCode:'', Telephone:'', MobilePhone:'', Fax:'', EMail:'', MoneyAccountStatus:'', BankAccount:'', BankPassWord:'', AccountID:'', Password:'', InstallID:0, VerifyCertNoFlag:'', CurrencyID:'', CashExchangeCode:'', Digest:'', BankAccType:'', DeviceID:'', BankSecuAccType:'', BrokerIDByBank:'', BankSecuAcc:'', BankPwdFlag:'', SecuPwdFlag:'', OperNo:'', TID:0, UserID:'', ErrorID:0, ErrorMsg:'', LongCustomerName:'', }};
exports.CThostFtdcCancelAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('Gender', stropt(1)).string('CountryCode', stropt(21)).string('CustType', stropt(1)).string('Address', stropt(101)).string('ZipCode', stropt(7)).string('Telephone', stropt(41)).string('MobilePhone', stropt(21)).string('Fax', stropt(41)).string('EMail', stropt(41)).string('MoneyAccountStatus', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).skip(1).int32le('InstallID').string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('CashExchangeCode', stropt(1)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).int32le('TID').string('UserID', stropt(16)).int32le('ErrorID').string('ErrorMsg', stropt(81)).string('LongCustomerName', stropt(161)).skip(2);
exports.CThostFtdcCancelAccountFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, CustomerName:'', IdCardType:'', IdentifiedCardNo:'', Gender:'', CountryCode:'', CustType:'', Address:'', ZipCode:'', Telephone:'', MobilePhone:'', Fax:'', EMail:'', MoneyAccountStatus:'', BankAccount:'', BankPassWord:'', AccountID:'', Password:'', InstallID:0, VerifyCertNoFlag:'', CurrencyID:'', CashExchangeCode:'', Digest:'', BankAccType:'', DeviceID:'', BankSecuAccType:'', BrokerIDByBank:'', BankSecuAcc:'', BankPwdFlag:'', SecuPwdFlag:'', OperNo:'', TID:0, UserID:'', ErrorID:0, ErrorMsg:'', LongCustomerName:'', }};
exports.CThostFtdcChangeAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('Gender', stropt(1)).string('CountryCode', stropt(21)).string('CustType', stropt(1)).string('Address', stropt(101)).string('ZipCode', stropt(7)).string('Telephone', stropt(41)).string('MobilePhone', stropt(21)).string('Fax', stropt(41)).string('EMail', stropt(41)).string('MoneyAccountStatus', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('NewBankAccount', stropt(41)).string('NewBankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).string('BankAccType', stropt(1)).skip(2).int32le('InstallID').string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('BrokerIDByBank', stropt(33)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).int32le('TID').string('Digest', stropt(36)).int32le('ErrorID').string('ErrorMsg', stropt(81)).string('LongCustomerName', stropt(161)).skip(2);
exports.CThostFtdcChangeAccountFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, CustomerName:'', IdCardType:'', IdentifiedCardNo:'', Gender:'', CountryCode:'', CustType:'', Address:'', ZipCode:'', Telephone:'', MobilePhone:'', Fax:'', EMail:'', MoneyAccountStatus:'', BankAccount:'', BankPassWord:'', NewBankAccount:'', NewBankPassWord:'', AccountID:'', Password:'', BankAccType:'', InstallID:0, VerifyCertNoFlag:'', CurrencyID:'', BrokerIDByBank:'', BankPwdFlag:'', SecuPwdFlag:'', TID:0, Digest:'', ErrorID:0, ErrorMsg:'', LongCustomerName:'', }};
exports.CThostFtdcSecAgentACIDMapFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('BrokerSecAgentID', stropt(13));
exports.CThostFtdcSecAgentACIDMapFieldInit = () => {return {BrokerID:'', UserID:'', AccountID:'', CurrencyID:'', BrokerSecAgentID:'', }};
exports.CThostFtdcQrySecAgentACIDMapFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4));
exports.CThostFtdcQrySecAgentACIDMapFieldInit = () => {return {BrokerID:'', UserID:'', AccountID:'', CurrencyID:'', }};
exports.CThostFtdcUserRightsAssignFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).skip(1).int32le('DRIdentityID');
exports.CThostFtdcUserRightsAssignFieldInit = () => {return {BrokerID:'', UserID:'', DRIdentityID:0, }};
exports.CThostFtdcBrokerUserRightAssignFieldParser = () => new Parser().string('BrokerID', stropt(11)).skip(1).int32le('DRIdentityID').int32le('Tradeable');
exports.CThostFtdcBrokerUserRightAssignFieldInit = () => {return {BrokerID:'', DRIdentityID:0, Tradeable:0, }};
exports.CThostFtdcDRTransferFieldParser = () => new Parser().int32le('OrigDRIdentityID').int32le('DestDRIdentityID').string('OrigBrokerID', stropt(11)).string('DestBrokerID', stropt(11)).skip(2);
exports.CThostFtdcDRTransferFieldInit = () => {return {OrigDRIdentityID:0, DestDRIdentityID:0, OrigBrokerID:'', DestBrokerID:'', }};
exports.CThostFtdcFensUserInfoFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('LoginMode', stropt(1));
exports.CThostFtdcFensUserInfoFieldInit = () => {return {BrokerID:'', UserID:'', LoginMode:'', }};
exports.CThostFtdcCurrTransferIdentityFieldParser = () => new Parser().int32le('IdentityID');
exports.CThostFtdcCurrTransferIdentityFieldInit = () => {return {IdentityID:0, }};
exports.CThostFtdcLoginForbiddenUserFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('IPAddress', stropt(16));
exports.CThostFtdcLoginForbiddenUserFieldInit = () => {return {BrokerID:'', UserID:'', IPAddress:'', }};
exports.CThostFtdcQryLoginForbiddenUserFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports.CThostFtdcQryLoginForbiddenUserFieldInit = () => {return {BrokerID:'', UserID:'', }};
exports.CThostFtdcMulticastGroupInfoFieldParser = () => new Parser().string('GroupIP', stropt(16)).int32le('GroupPort').string('SourceIP', stropt(16));
exports.CThostFtdcMulticastGroupInfoFieldInit = () => {return {GroupIP:'', GroupPort:0, SourceIP:'', }};
exports.CThostFtdcTradingAccountReserveFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).doublele('Reserve').string('CurrencyID', stropt(4)).skip(4);
exports.CThostFtdcTradingAccountReserveFieldInit = () => {return {BrokerID:'', AccountID:'', Reserve:0, CurrencyID:'', }};
exports.CThostFtdcQryLoginForbiddenIPFieldParser = () => new Parser().string('IPAddress', stropt(16));
exports.CThostFtdcQryLoginForbiddenIPFieldInit = () => {return {IPAddress:'', }};
exports.CThostFtdcQryIPListFieldParser = () => new Parser().string('IPAddress', stropt(16));
exports.CThostFtdcQryIPListFieldInit = () => {return {IPAddress:'', }};
exports.CThostFtdcQryUserRightsAssignFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports.CThostFtdcQryUserRightsAssignFieldInit = () => {return {BrokerID:'', UserID:'', }};
exports.CThostFtdcReserveOpenAccountConfirmFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('CustomerName', stropt(161)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('Gender', stropt(1)).string('CountryCode', stropt(21)).string('CustType', stropt(1)).string('Address', stropt(101)).string('ZipCode', stropt(7)).string('Telephone', stropt(41)).string('MobilePhone', stropt(21)).string('Fax', stropt(41)).string('EMail', stropt(41)).string('MoneyAccountStatus', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).skip(1).int32le('InstallID').string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).skip(1).int32le('TID').string('AccountID', stropt(13)).string('Password', stropt(41)).string('BankReserveOpenSeq', stropt(13)).string('BookDate', stropt(9)).string('BookPsw', stropt(41)).skip(3).int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(3);
exports.CThostFtdcReserveOpenAccountConfirmFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, CustomerName:'', IdCardType:'', IdentifiedCardNo:'', Gender:'', CountryCode:'', CustType:'', Address:'', ZipCode:'', Telephone:'', MobilePhone:'', Fax:'', EMail:'', MoneyAccountStatus:'', BankAccount:'', BankPassWord:'', InstallID:0, VerifyCertNoFlag:'', CurrencyID:'', Digest:'', BankAccType:'', BrokerIDByBank:'', TID:0, AccountID:'', Password:'', BankReserveOpenSeq:'', BookDate:'', BookPsw:'', ErrorID:0, ErrorMsg:'', }};
exports.CThostFtdcReserveOpenAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).skip(2).int32le('PlateSerial').string('LastFragment', stropt(1)).skip(3).int32le('SessionID').string('CustomerName', stropt(161)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('Gender', stropt(1)).string('CountryCode', stropt(21)).string('CustType', stropt(1)).string('Address', stropt(101)).string('ZipCode', stropt(7)).string('Telephone', stropt(41)).string('MobilePhone', stropt(21)).string('Fax', stropt(41)).string('EMail', stropt(41)).string('MoneyAccountStatus', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).skip(1).int32le('InstallID').string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).skip(1).int32le('TID').string('ReserveOpenAccStas', stropt(1)).skip(3).int32le('ErrorID').string('ErrorMsg', stropt(81)).skip(3);
exports.CThostFtdcReserveOpenAccountFieldInit = () => {return {TradeCode:'', BankID:'', BankBranchID:'', BrokerID:'', BrokerBranchID:'', TradeDate:'', TradeTime:'', BankSerial:'', TradingDay:'', PlateSerial:0, LastFragment:'', SessionID:0, CustomerName:'', IdCardType:'', IdentifiedCardNo:'', Gender:'', CountryCode:'', CustType:'', Address:'', ZipCode:'', Telephone:'', MobilePhone:'', Fax:'', EMail:'', MoneyAccountStatus:'', BankAccount:'', BankPassWord:'', InstallID:0, VerifyCertNoFlag:'', CurrencyID:'', Digest:'', BankAccType:'', BrokerIDByBank:'', TID:0, ReserveOpenAccStas:'', ErrorID:0, ErrorMsg:'', }};
exports.CThostFtdcAccountPropertyFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).string('BankID', stropt(4)).string('BankAccount', stropt(41)).string('OpenName', stropt(101)).string('OpenBank', stropt(101)).skip(1).int32le('IsActive').string('AccountSourceType', stropt(1)).string('OpenDate', stropt(9)).string('CancelDate', stropt(9)).string('OperatorID', stropt(65)).string('OperateDate', stropt(9)).string('OperateTime', stropt(9)).string('CurrencyID', stropt(4)).skip(2);
exports.CThostFtdcAccountPropertyFieldInit = () => {return {BrokerID:'', AccountID:'', BankID:'', BankAccount:'', OpenName:'', OpenBank:'', IsActive:0, AccountSourceType:'', OpenDate:'', CancelDate:'', OperatorID:'', OperateDate:'', OperateTime:'', CurrencyID:'', }};
exports.CThostFtdcQryCurrDRIdentityFieldParser = () => new Parser().int32le('DRIdentityID');
exports.CThostFtdcQryCurrDRIdentityFieldInit = () => {return {DRIdentityID:0, }};
exports.CThostFtdcCurrDRIdentityFieldParser = () => new Parser().int32le('DRIdentityID');
exports.CThostFtdcCurrDRIdentityFieldInit = () => {return {DRIdentityID:0, }};
exports.CThostFtdcQrySecAgentCheckModeFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13));
exports.CThostFtdcQrySecAgentCheckModeFieldInit = () => {return {BrokerID:'', InvestorID:'', }};
exports.CThostFtdcQrySecAgentTradeInfoFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('BrokerSecAgentID', stropt(13));
exports.CThostFtdcQrySecAgentTradeInfoFieldInit = () => {return {BrokerID:'', BrokerSecAgentID:'', }};
exports.CThostFtdcUserSystemInfoFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).skip(1).int32le('ClientSystemInfoLen').string('ClientSystemInfo', stropt(273)).string('ClientPublicIP', stropt(16)).skip(3).int32le('ClientIPPort').string('ClientLoginTime', stropt(9)).string('ClientAppID', stropt(33)).skip(2);
exports.CThostFtdcUserSystemInfoFieldInit = () => {return {BrokerID:'', UserID:'', ClientSystemInfoLen:0, ClientSystemInfo:'', ClientPublicIP:'', ClientIPPort:0, ClientLoginTime:'', ClientAppID:'', }};
exports.CThostFtdcReqUserAuthMethodFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports.CThostFtdcReqUserAuthMethodFieldInit = () => {return {TradingDay:'', BrokerID:'', UserID:'', }};
exports.CThostFtdcRspUserAuthMethodFieldParser = () => new Parser().int32le('UsableAuthMethod');
exports.CThostFtdcRspUserAuthMethodFieldInit = () => {return {UsableAuthMethod:0, }};
exports.CThostFtdcReqGenUserCaptchaFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports.CThostFtdcReqGenUserCaptchaFieldInit = () => {return {TradingDay:'', BrokerID:'', UserID:'', }};
exports.CThostFtdcRspGenUserCaptchaFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).skip(1).int32le('CaptchaInfoLen').string('CaptchaInfo', stropt(2561)).skip(3);
exports.CThostFtdcRspGenUserCaptchaFieldInit = () => {return {BrokerID:'', UserID:'', CaptchaInfoLen:0, CaptchaInfo:'', }};
exports.CThostFtdcReqGenUserTextFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports.CThostFtdcReqGenUserTextFieldInit = () => {return {TradingDay:'', BrokerID:'', UserID:'', }};
exports.CThostFtdcRspGenUserTextFieldParser = () => new Parser().int32le('UserTextSeq');
exports.CThostFtdcRspGenUserTextFieldInit = () => {return {UserTextSeq:0, }};
exports.CThostFtdcReqUserLoginWithCaptchaFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('Password', stropt(41)).string('UserProductInfo', stropt(11)).string('InterfaceProductInfo', stropt(11)).string('ProtocolInfo', stropt(11)).string('MacAddress', stropt(21)).string('ClientIPAddress', stropt(16)).string('LoginRemark', stropt(36)).string('Captcha', stropt(41)).int32le('ClientIPPort');
exports.CThostFtdcReqUserLoginWithCaptchaFieldInit = () => {return {TradingDay:'', BrokerID:'', UserID:'', Password:'', UserProductInfo:'', InterfaceProductInfo:'', ProtocolInfo:'', MacAddress:'', ClientIPAddress:'', LoginRemark:'', Captcha:'', ClientIPPort:0, }};
exports.CThostFtdcReqUserLoginWithTextFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('Password', stropt(41)).string('UserProductInfo', stropt(11)).string('InterfaceProductInfo', stropt(11)).string('ProtocolInfo', stropt(11)).string('MacAddress', stropt(21)).string('ClientIPAddress', stropt(16)).string('LoginRemark', stropt(36)).string('Text', stropt(41)).int32le('ClientIPPort');
exports.CThostFtdcReqUserLoginWithTextFieldInit = () => {return {TradingDay:'', BrokerID:'', UserID:'', Password:'', UserProductInfo:'', InterfaceProductInfo:'', ProtocolInfo:'', MacAddress:'', ClientIPAddress:'', LoginRemark:'', Text:'', ClientIPPort:0, }};
exports.CThostFtdcReqUserLoginWithOTPFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('Password', stropt(41)).string('UserProductInfo', stropt(11)).string('InterfaceProductInfo', stropt(11)).string('ProtocolInfo', stropt(11)).string('MacAddress', stropt(21)).string('ClientIPAddress', stropt(16)).string('LoginRemark', stropt(36)).string('OTPPassword', stropt(41)).int32le('ClientIPPort');
exports.CThostFtdcReqUserLoginWithOTPFieldInit = () => {return {TradingDay:'', BrokerID:'', UserID:'', Password:'', UserProductInfo:'', InterfaceProductInfo:'', ProtocolInfo:'', MacAddress:'', ClientIPAddress:'', LoginRemark:'', OTPPassword:'', ClientIPPort:0, }};
exports.CThostFtdcReqApiHandshakeFieldParser = () => new Parser().string('CryptoKeyVersion', stropt(31));
exports.CThostFtdcReqApiHandshakeFieldInit = () => {return {CryptoKeyVersion:'', }};
exports.CThostFtdcRspApiHandshakeFieldParser = () => new Parser().int32le('FrontHandshakeDataLen').string('FrontHandshakeData', stropt(301)).skip(3).int32le('IsApiAuthEnabled');
exports.CThostFtdcRspApiHandshakeFieldInit = () => {return {FrontHandshakeDataLen:0, FrontHandshakeData:'', IsApiAuthEnabled:0, }};
exports.CThostFtdcReqVerifyApiKeyFieldParser = () => new Parser().int32le('ApiHandshakeDataLen').string('ApiHandshakeData', stropt(301)).skip(3);
exports.CThostFtdcReqVerifyApiKeyFieldInit = () => {return {ApiHandshakeDataLen:0, ApiHandshakeData:'', }};
exports.CThostFtdcDepartmentUserFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('InvestorRange', stropt(1)).string('InvestorID', stropt(13));
exports.CThostFtdcDepartmentUserFieldInit = () => {return {BrokerID:'', UserID:'', InvestorRange:'', InvestorID:'', }};
exports.CThostFtdcQueryFreqFieldParser = () => new Parser().int32le('QueryFreq');
exports.CThostFtdcQueryFreqFieldInit = () => {return {QueryFreq:0, }};
