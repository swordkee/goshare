var Parser = require("binary-parser-encoder").Parser;
const stropt = n => {
	return {
		stripNull: true,
		length: n
	}
}

	exports. CThostFtdcDisseminationFieldParser = () => new Parser().int32le('SequenceNo').skip(4);
exports. CThostFtdcReqUserLoginFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('Password', stropt(41)).string('UserProductInfo', stropt(11)).string('InterfaceProductInfo', stropt(11)).string('ProtocolInfo', stropt(11)).string('MacAddress', stropt(21)).string('OneTimePassword', stropt(41)).string('ClientIPAddress', stropt(16)).string('LoginRemark', stropt(36)).int32le('ClientIPPort').skip(4);
exports. CThostFtdcRspUserLoginFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('LoginTime', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('SystemName', stropt(41)).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('MaxOrderRef', stropt(13)).string('SHFETime', stropt(9)).string('DCETime', stropt(9)).string('CZCETime', stropt(9)).string('FFEXTime', stropt(9)).string('INETime', stropt(9));
exports. CThostFtdcUserLogoutFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports. CThostFtdcForceUserLogoutFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports. CThostFtdcReqAuthenticateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('UserProductInfo', stropt(11)).string('AuthCode', stropt(17)).string('AppID', stropt(33));
exports. CThostFtdcRspAuthenticateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('UserProductInfo', stropt(11)).string('AppID', stropt(33)).string('AppType', stropt(1));
exports. CThostFtdcAuthenticationInfoFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('UserProductInfo', stropt(11)).string('AuthInfo', stropt(129)).int32le('IsResult').skip(4).string('AppID', stropt(33)).string('AppType', stropt(1));
exports. CThostFtdcRspUserLogin2FieldParser = () => new Parser().string('TradingDay', stropt(9)).string('LoginTime', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('SystemName', stropt(41)).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('MaxOrderRef', stropt(13)).string('SHFETime', stropt(9)).string('DCETime', stropt(9)).string('CZCETime', stropt(9)).string('FFEXTime', stropt(9)).string('INETime', stropt(9)).string('RandomString', stropt(17));
exports. CThostFtdcTransferHeaderFieldParser = () => new Parser().string('Version', stropt(4)).string('TradeCode', stropt(7)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('TradeSerial', stropt(9)).string('FutureID', stropt(11)).string('BankID', stropt(4)).string('BankBrchID', stropt(5)).string('OperNo', stropt(17)).string('DeviceID', stropt(3)).string('RecordNum', stropt(7)).int32le('SessionID').skip(4).int32le('RequestID').skip(4);
exports. CThostFtdcTransferBankToFutureReqFieldParser = () => new Parser().string('FutureAccount', stropt(13)).string('FuturePwdFlag', stropt(1)).string('FutureAccPwd', stropt(17)).doublele('TradeAmt').doublele('CustFee').string('CurrencyCode', stropt(4));
exports. CThostFtdcTransferBankToFutureRspFieldParser = () => new Parser().string('RetCode', stropt(5)).string('RetInfo', stropt(129)).string('FutureAccount', stropt(13)).doublele('TradeAmt').doublele('CustFee').string('CurrencyCode', stropt(4));
exports. CThostFtdcTransferFutureToBankReqFieldParser = () => new Parser().string('FutureAccount', stropt(13)).string('FuturePwdFlag', stropt(1)).string('FutureAccPwd', stropt(17)).doublele('TradeAmt').doublele('CustFee').string('CurrencyCode', stropt(4));
exports. CThostFtdcTransferFutureToBankRspFieldParser = () => new Parser().string('RetCode', stropt(5)).string('RetInfo', stropt(129)).string('FutureAccount', stropt(13)).doublele('TradeAmt').doublele('CustFee').string('CurrencyCode', stropt(4));
exports. CThostFtdcTransferQryBankReqFieldParser = () => new Parser().string('FutureAccount', stropt(13)).string('FuturePwdFlag', stropt(1)).string('FutureAccPwd', stropt(17)).string('CurrencyCode', stropt(4));
exports. CThostFtdcTransferQryBankRspFieldParser = () => new Parser().string('RetCode', stropt(5)).string('RetInfo', stropt(129)).string('FutureAccount', stropt(13)).doublele('TradeAmt').doublele('UseAmt').doublele('FetchAmt').string('CurrencyCode', stropt(4));
exports. CThostFtdcTransferQryDetailReqFieldParser = () => new Parser().string('FutureAccount', stropt(13));
exports. CThostFtdcTransferQryDetailRspFieldParser = () => new Parser().string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('TradeCode', stropt(7)).int32le('FutureSerial').skip(4).string('FutureID', stropt(11)).string('FutureAccount', stropt(22)).int32le('BankSerial').skip(4).string('BankID', stropt(4)).string('BankBrchID', stropt(5)).string('BankAccount', stropt(41)).string('CertCode', stropt(21)).string('CurrencyCode', stropt(4)).doublele('TxAmount').string('Flag', stropt(1));
exports. CThostFtdcRspInfoFieldParser = () => new Parser().int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81));
exports. CThostFtdcExchangeFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ExchangeName', stropt(61)).string('ExchangeProperty', stropt(1));
exports. CThostFtdcProductFieldParser = () => new Parser().string('ProductID', stropt(31)).string('ProductName', stropt(21)).string('ExchangeID', stropt(9)).string('ProductClass', stropt(1)).int32le('VolumeMultiple').skip(4).doublele('PriceTick').int32le('MaxMarketOrderVolume').skip(4).int32le('MinMarketOrderVolume').skip(4).int32le('MaxLimitOrderVolume').skip(4).int32le('MinLimitOrderVolume').skip(4).string('PositionType', stropt(1)).string('PositionDateType', stropt(1)).string('CloseDealType', stropt(1)).string('TradeCurrencyID', stropt(4)).string('MortgageFundUseRange', stropt(1)).string('ExchangeProductID', stropt(31)).doublele('UnderlyingMultiple');
exports. CThostFtdcInstrumentFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InstrumentName', stropt(21)).string('ExchangeInstID', stropt(31)).string('ProductID', stropt(31)).string('ProductClass', stropt(1)).int32le('DeliveryYear').skip(4).int32le('DeliveryMonth').skip(4).int32le('MaxMarketOrderVolume').skip(4).int32le('MinMarketOrderVolume').skip(4).int32le('MaxLimitOrderVolume').skip(4).int32le('MinLimitOrderVolume').skip(4).int32le('VolumeMultiple').skip(4).doublele('PriceTick').string('CreateDate', stropt(9)).string('OpenDate', stropt(9)).string('ExpireDate', stropt(9)).string('StartDelivDate', stropt(9)).string('EndDelivDate', stropt(9)).string('InstLifePhase', stropt(1)).int32le('IsTrading').skip(4).string('PositionType', stropt(1)).string('PositionDateType', stropt(1)).doublele('LongMarginRatio').doublele('ShortMarginRatio').string('MaxMarginSideAlgorithm', stropt(1)).string('UnderlyingInstrID', stropt(31)).doublele('StrikePrice').string('OptionsType', stropt(1)).doublele('UnderlyingMultiple').string('CombinationType', stropt(1));
exports. CThostFtdcBrokerFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('BrokerAbbr', stropt(9)).string('BrokerName', stropt(81)).int32le('IsActive').skip(4);
exports. CThostFtdcTraderFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('TraderID', stropt(21)).string('ParticipantID', stropt(11)).string('Password', stropt(41)).int32le('InstallCount').skip(4).string('BrokerID', stropt(11));
exports. CThostFtdcInvestorFieldParser = () => new Parser().string('InvestorID', stropt(13)).string('BrokerID', stropt(11)).string('InvestorGroupID', stropt(13)).string('InvestorName', stropt(81)).string('IdentifiedCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).int32le('IsActive').skip(4).string('Telephone', stropt(41)).string('Address', stropt(101)).string('OpenDate', stropt(9)).string('Mobile', stropt(41)).string('CommModelID', stropt(13)).string('MarginModelID', stropt(13));
exports. CThostFtdcTradingCodeFieldParser = () => new Parser().string('InvestorID', stropt(13)).string('BrokerID', stropt(11)).string('ExchangeID', stropt(9)).string('ClientID', stropt(11)).int32le('IsActive').skip(4).string('ClientIDType', stropt(11)).string('BranchID', stropt(9)).string('BizType', stropt(1)).string('InvestUnitID', stropt(17));
exports. CThostFtdcPartBrokerFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).int32le('IsActive').skip(4);
exports. CThostFtdcSuperUserFieldParser = () => new Parser().string('UserID', stropt(16)).string('UserName', stropt(81)).string('Password', stropt(41)).int32le('IsActive').skip(4);
exports. CThostFtdcSuperUserFunctionFieldParser = () => new Parser().string('UserID', stropt(16)).string('FunctionCode', stropt(1));
exports. CThostFtdcInvestorGroupFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorGroupID', stropt(13)).string('InvestorGroupName', stropt(41));
exports. CThostFtdcTradingAccountFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).doublele('PreMortgage').doublele('PreCredit').doublele('PreDeposit').doublele('PreBalance').doublele('PreMargin').doublele('InterestBase').doublele('Interest').doublele('Deposit').doublele('Withdraw').doublele('FrozenMargin').doublele('FrozenCash').doublele('FrozenCommission').doublele('CurrMargin').doublele('CashIn').doublele('Commission').doublele('CloseProfit').doublele('PositionProfit').doublele('Balance').doublele('Available').doublele('WithdrawQuota').doublele('Reserve').string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).doublele('Credit').doublele('Mortgage').doublele('ExchangeMargin').doublele('DeliveryMargin').doublele('ExchangeDeliveryMargin').doublele('ReserveBalance').string('CurrencyID', stropt(4)).doublele('PreFundMortgageIn').doublele('PreFundMortgageOut').doublele('FundMortgageIn').doublele('FundMortgageOut').doublele('FundMortgageAvailable').doublele('MortgageableFund').doublele('SpecProductMargin').doublele('SpecProductFrozenMargin').doublele('SpecProductCommission').doublele('SpecProductFrozenCommission').doublele('SpecProductPositionProfit').doublele('SpecProductCloseProfit').doublele('SpecProductPositionProfitByAlg').doublele('SpecProductExchangeMargin').string('BizType', stropt(1)).doublele('FrozenSwap').doublele('RemainSwap');
exports. CThostFtdcInvestorPositionFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('PosiDirection', stropt(1)).string('HedgeFlag', stropt(1)).string('PositionDate', stropt(1)).int32le('YdPosition').skip(4).int32le('Position').skip(4).int32le('LongFrozen').skip(4).int32le('ShortFrozen').skip(4).doublele('LongFrozenAmount').doublele('ShortFrozenAmount').int32le('OpenVolume').skip(4).int32le('CloseVolume').skip(4).doublele('OpenAmount').doublele('CloseAmount').doublele('PositionCost').doublele('PreMargin').doublele('UseMargin').doublele('FrozenMargin').doublele('FrozenCash').doublele('FrozenCommission').doublele('CashIn').doublele('Commission').doublele('CloseProfit').doublele('PositionProfit').doublele('PreSettlementPrice').doublele('SettlementPrice').string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).doublele('OpenCost').doublele('ExchangeMargin').int32le('CombPosition').skip(4).int32le('CombLongFrozen').skip(4).int32le('CombShortFrozen').skip(4).doublele('CloseProfitByDate').doublele('CloseProfitByTrade').int32le('TodayPosition').skip(4).doublele('MarginRateByMoney').doublele('MarginRateByVolume').int32le('StrikeFrozen').skip(4).doublele('StrikeFrozenAmount').int32le('AbandonFrozen').skip(4).string('ExchangeID', stropt(9)).int32le('YdStrikeFrozen').skip(4).string('InvestUnitID', stropt(17)).doublele('PositionCostOffset');
exports. CThostFtdcInstrumentMarginRateFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('HedgeFlag', stropt(1)).doublele('LongMarginRatioByMoney').doublele('LongMarginRatioByVolume').doublele('ShortMarginRatioByMoney').doublele('ShortMarginRatioByVolume').int32le('IsRelative').skip(4).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcInstrumentCommissionRateFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('OpenRatioByMoney').doublele('OpenRatioByVolume').doublele('CloseRatioByMoney').doublele('CloseRatioByVolume').doublele('CloseTodayRatioByMoney').doublele('CloseTodayRatioByVolume').string('ExchangeID', stropt(9)).string('BizType', stropt(1)).string('InvestUnitID', stropt(17));
exports. CThostFtdcDepthMarketDataFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('ExchangeInstID', stropt(31)).doublele('LastPrice').doublele('PreSettlementPrice').doublele('PreClosePrice').doublele('PreOpenInterest').doublele('OpenPrice').doublele('HighestPrice').doublele('LowestPrice').int32le('Volume').skip(4).doublele('Turnover').doublele('OpenInterest').doublele('ClosePrice').doublele('SettlementPrice').doublele('UpperLimitPrice').doublele('LowerLimitPrice').doublele('PreDelta').doublele('CurrDelta').string('UpdateTime', stropt(9)).int32le('UpdateMillisec').skip(4).doublele('BidPrice1').int32le('BidVolume1').skip(4).doublele('AskPrice1').int32le('AskVolume1').skip(4).doublele('BidPrice2').int32le('BidVolume2').skip(4).doublele('AskPrice2').int32le('AskVolume2').skip(4).doublele('BidPrice3').int32le('BidVolume3').skip(4).doublele('AskPrice3').int32le('AskVolume3').skip(4).doublele('BidPrice4').int32le('BidVolume4').skip(4).doublele('AskPrice4').int32le('AskVolume4').skip(4).doublele('BidPrice5').int32le('BidVolume5').skip(4).doublele('AskPrice5').int32le('AskVolume5').skip(4).doublele('AveragePrice').string('ActionDay', stropt(9));
exports. CThostFtdcInstrumentTradingRightFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('TradingRight', stropt(1));
exports. CThostFtdcBrokerUserFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('UserName', stropt(81)).string('UserType', stropt(1)).int32le('IsActive').skip(4).int32le('IsUsingOTP').skip(4).int32le('IsAuthForce').skip(4);
exports. CThostFtdcBrokerUserPasswordFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('Password', stropt(41)).string('LastUpdateTime', stropt(17)).string('LastLoginTime', stropt(17)).string('ExpireDate', stropt(9)).string('WeakExpireDate', stropt(9));
exports. CThostFtdcBrokerUserFunctionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('BrokerFunctionCode', stropt(1));
exports. CThostFtdcTraderOfferFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('TraderID', stropt(21)).string('ParticipantID', stropt(11)).string('Password', stropt(41)).int32le('InstallID').skip(4).string('OrderLocalID', stropt(13)).string('TraderConnectStatus', stropt(1)).string('ConnectRequestDate', stropt(9)).string('ConnectRequestTime', stropt(9)).string('LastReportDate', stropt(9)).string('LastReportTime', stropt(9)).string('ConnectDate', stropt(9)).string('ConnectTime', stropt(9)).string('StartDate', stropt(9)).string('StartTime', stropt(9)).string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('MaxTradeID', stropt(21)).string('MaxOrderMessageReference', stropt(7));
exports. CThostFtdcSettlementInfoFieldParser = () => new Parser().string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('SequenceNo').skip(4).string('Content', stropt(501)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4));
exports. CThostFtdcInstrumentMarginRateAdjustFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('HedgeFlag', stropt(1)).doublele('LongMarginRatioByMoney').doublele('LongMarginRatioByVolume').doublele('ShortMarginRatioByMoney').doublele('ShortMarginRatioByVolume').int32le('IsRelative').skip(4);
exports. CThostFtdcExchangeMarginRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).string('HedgeFlag', stropt(1)).doublele('LongMarginRatioByMoney').doublele('LongMarginRatioByVolume').doublele('ShortMarginRatioByMoney').doublele('ShortMarginRatioByVolume').string('ExchangeID', stropt(9));
exports. CThostFtdcExchangeMarginRateAdjustFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).string('HedgeFlag', stropt(1)).doublele('LongMarginRatioByMoney').doublele('LongMarginRatioByVolume').doublele('ShortMarginRatioByMoney').doublele('ShortMarginRatioByVolume').doublele('ExchLongMarginRatioByMoney').doublele('ExchLongMarginRatioByVolume').doublele('ExchShortMarginRatioByMoney').doublele('ExchShortMarginRatioByVolume').doublele('NoLongMarginRatioByMoney').doublele('NoLongMarginRatioByVolume').doublele('NoShortMarginRatioByMoney').doublele('NoShortMarginRatioByVolume');
exports. CThostFtdcExchangeRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('FromCurrencyID', stropt(4)).doublele('FromCurrencyUnit').string('ToCurrencyID', stropt(4)).doublele('ExchangeRate');
exports. CThostFtdcSettlementRefFieldParser = () => new Parser().string('TradingDay', stropt(9)).int32le('SettlementID').skip(4);
exports. CThostFtdcCurrentTimeFieldParser = () => new Parser().string('CurrDate', stropt(9)).string('CurrTime', stropt(9)).int32le('CurrMillisec').skip(4).string('ActionDay', stropt(9));
exports. CThostFtdcCommPhaseFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('SystemID', stropt(21));
exports. CThostFtdcLoginInfoFieldParser = () => new Parser().int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('LoginDate', stropt(9)).string('LoginTime', stropt(9)).string('IPAddress', stropt(16)).string('UserProductInfo', stropt(11)).string('InterfaceProductInfo', stropt(11)).string('ProtocolInfo', stropt(11)).string('SystemName', stropt(41)).string('PasswordDeprecated', stropt(41)).string('MaxOrderRef', stropt(13)).string('SHFETime', stropt(9)).string('DCETime', stropt(9)).string('CZCETime', stropt(9)).string('FFEXTime', stropt(9)).string('MacAddress', stropt(21)).string('OneTimePassword', stropt(41)).string('INETime', stropt(9)).int32le('IsQryControl').skip(4).string('LoginRemark', stropt(36)).string('Password', stropt(41));
exports. CThostFtdcLogoutAllFieldParser = () => new Parser().int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('SystemName', stropt(41));
exports. CThostFtdcFrontStatusFieldParser = () => new Parser().int32le('FrontID').skip(4).string('LastReportDate', stropt(9)).string('LastReportTime', stropt(9)).int32le('IsActive').skip(4);
exports. CThostFtdcUserPasswordUpdateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('OldPassword', stropt(41)).string('NewPassword', stropt(41));
exports. CThostFtdcInputOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('OrderRef', stropt(13)).string('UserID', stropt(16)).string('OrderPriceType', stropt(1)).string('Direction', stropt(1)).string('CombOffsetFlag', stropt(5)).string('CombHedgeFlag', stropt(5)).doublele('LimitPrice').int32le('VolumeTotalOriginal').skip(4).string('TimeCondition', stropt(1)).string('GTDDate', stropt(9)).string('VolumeCondition', stropt(1)).int32le('MinVolume').skip(4).string('ContingentCondition', stropt(1)).doublele('StopPrice').string('ForceCloseReason', stropt(1)).int32le('IsAutoSuspend').skip(4).string('BusinessUnit', stropt(21)).int32le('RequestID').skip(4).int32le('UserForceClose').skip(4).int32le('IsSwapOrder').skip(4).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('ClientID', stropt(11)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('OrderRef', stropt(13)).string('UserID', stropt(16)).string('OrderPriceType', stropt(1)).string('Direction', stropt(1)).string('CombOffsetFlag', stropt(5)).string('CombHedgeFlag', stropt(5)).doublele('LimitPrice').int32le('VolumeTotalOriginal').skip(4).string('TimeCondition', stropt(1)).string('GTDDate', stropt(9)).string('VolumeCondition', stropt(1)).int32le('MinVolume').skip(4).string('ContingentCondition', stropt(1)).doublele('StopPrice').string('ForceCloseReason', stropt(1)).int32le('IsAutoSuspend').skip(4).string('BusinessUnit', stropt(21)).int32le('RequestID').skip(4).string('OrderLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('OrderSubmitStatus', stropt(1)).int32le('NotifySequence').skip(4).string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).string('OrderSysID', stropt(21)).string('OrderSource', stropt(1)).string('OrderStatus', stropt(1)).string('OrderType', stropt(1)).int32le('VolumeTraded').skip(4).int32le('VolumeTotal').skip(4).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('ActiveTime', stropt(9)).string('SuspendTime', stropt(9)).string('UpdateTime', stropt(9)).string('CancelTime', stropt(9)).string('ActiveTraderID', stropt(21)).string('ClearingPartID', stropt(11)).int32le('SequenceNo').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('UserProductInfo', stropt(11)).string('StatusMsg', stropt(81)).int32le('UserForceClose').skip(4).string('ActiveUserID', stropt(16)).int32le('BrokerOrderSeq').skip(4).string('RelativeOrderSysID', stropt(21)).int32le('ZCETotalTradedVolume').skip(4).int32le('IsSwapOrder').skip(4).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcExchangeOrderFieldParser = () => new Parser().string('OrderPriceType', stropt(1)).string('Direction', stropt(1)).string('CombOffsetFlag', stropt(5)).string('CombHedgeFlag', stropt(5)).doublele('LimitPrice').int32le('VolumeTotalOriginal').skip(4).string('TimeCondition', stropt(1)).string('GTDDate', stropt(9)).string('VolumeCondition', stropt(1)).int32le('MinVolume').skip(4).string('ContingentCondition', stropt(1)).doublele('StopPrice').string('ForceCloseReason', stropt(1)).int32le('IsAutoSuspend').skip(4).string('BusinessUnit', stropt(21)).int32le('RequestID').skip(4).string('OrderLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('OrderSubmitStatus', stropt(1)).int32le('NotifySequence').skip(4).string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).string('OrderSysID', stropt(21)).string('OrderSource', stropt(1)).string('OrderStatus', stropt(1)).string('OrderType', stropt(1)).int32le('VolumeTraded').skip(4).int32le('VolumeTotal').skip(4).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('ActiveTime', stropt(9)).string('SuspendTime', stropt(9)).string('UpdateTime', stropt(9)).string('CancelTime', stropt(9)).string('ActiveTraderID', stropt(21)).string('ClearingPartID', stropt(11)).int32le('SequenceNo').skip(4).string('BranchID', stropt(9)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcExchangeOrderInsertErrorFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('OrderLocalID', stropt(13)).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81));
exports. CThostFtdcInputOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('OrderActionRef').skip(4).string('OrderRef', stropt(13)).int32le('RequestID').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('ExchangeID', stropt(9)).string('OrderSysID', stropt(21)).string('ActionFlag', stropt(1)).doublele('LimitPrice').int32le('VolumeChange').skip(4).string('UserID', stropt(16)).string('InstrumentID', stropt(31)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('OrderActionRef').skip(4).string('OrderRef', stropt(13)).int32le('RequestID').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('ExchangeID', stropt(9)).string('OrderSysID', stropt(21)).string('ActionFlag', stropt(1)).doublele('LimitPrice').int32le('VolumeChange').skip(4).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('OrderLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('StatusMsg', stropt(81)).string('InstrumentID', stropt(31)).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcExchangeOrderActionFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('OrderSysID', stropt(21)).string('ActionFlag', stropt(1)).doublele('LimitPrice').int32le('VolumeChange').skip(4).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('OrderLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('BranchID', stropt(9)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcExchangeOrderActionErrorFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('OrderSysID', stropt(21)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('OrderLocalID', stropt(13)).string('ActionLocalID', stropt(13)).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81));
exports. CThostFtdcExchangeTradeFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('TradeID', stropt(21)).string('Direction', stropt(1)).string('OrderSysID', stropt(21)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('TradingRole', stropt(1)).string('ExchangeInstID', stropt(31)).string('OffsetFlag', stropt(1)).string('HedgeFlag', stropt(1)).doublele('Price').int32le('Volume').skip(4).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('TradeType', stropt(1)).string('PriceSource', stropt(1)).string('TraderID', stropt(21)).string('OrderLocalID', stropt(13)).string('ClearingPartID', stropt(11)).string('BusinessUnit', stropt(21)).int32le('SequenceNo').skip(4).string('TradeSource', stropt(1));
exports. CThostFtdcTradeFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('OrderRef', stropt(13)).string('UserID', stropt(16)).string('ExchangeID', stropt(9)).string('TradeID', stropt(21)).string('Direction', stropt(1)).string('OrderSysID', stropt(21)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('TradingRole', stropt(1)).string('ExchangeInstID', stropt(31)).string('OffsetFlag', stropt(1)).string('HedgeFlag', stropt(1)).doublele('Price').int32le('Volume').skip(4).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('TradeType', stropt(1)).string('PriceSource', stropt(1)).string('TraderID', stropt(21)).string('OrderLocalID', stropt(13)).string('ClearingPartID', stropt(11)).string('BusinessUnit', stropt(21)).int32le('SequenceNo').skip(4).string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).int32le('BrokerOrderSeq').skip(4).string('TradeSource', stropt(1)).string('InvestUnitID', stropt(17));
exports. CThostFtdcUserSessionFieldParser = () => new Parser().int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('LoginDate', stropt(9)).string('LoginTime', stropt(9)).string('IPAddress', stropt(16)).string('UserProductInfo', stropt(11)).string('InterfaceProductInfo', stropt(11)).string('ProtocolInfo', stropt(11)).string('MacAddress', stropt(21)).string('LoginRemark', stropt(36));
exports. CThostFtdcQueryMaxOrderVolumeFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('Direction', stropt(1)).string('OffsetFlag', stropt(1)).string('HedgeFlag', stropt(1)).int32le('MaxVolume').skip(4).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcSettlementInfoConfirmFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ConfirmDate', stropt(9)).string('ConfirmTime', stropt(9)).int32le('SettlementID').skip(4).string('AccountID', stropt(13)).string('CurrencyID', stropt(4));
exports. CThostFtdcSyncDepositFieldParser = () => new Parser().string('DepositSeqNo', stropt(15)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('Deposit').int32le('IsForce').skip(4).string('CurrencyID', stropt(4));
exports. CThostFtdcSyncFundMortgageFieldParser = () => new Parser().string('MortgageSeqNo', stropt(15)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('FromCurrencyID', stropt(4)).doublele('MortgageAmount').string('ToCurrencyID', stropt(4));
exports. CThostFtdcBrokerSyncFieldParser = () => new Parser().string('BrokerID', stropt(11));
exports. CThostFtdcSyncingInvestorFieldParser = () => new Parser().string('InvestorID', stropt(13)).string('BrokerID', stropt(11)).string('InvestorGroupID', stropt(13)).string('InvestorName', stropt(81)).string('IdentifiedCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).int32le('IsActive').skip(4).string('Telephone', stropt(41)).string('Address', stropt(101)).string('OpenDate', stropt(9)).string('Mobile', stropt(41)).string('CommModelID', stropt(13)).string('MarginModelID', stropt(13));
exports. CThostFtdcSyncingTradingCodeFieldParser = () => new Parser().string('InvestorID', stropt(13)).string('BrokerID', stropt(11)).string('ExchangeID', stropt(9)).string('ClientID', stropt(11)).int32le('IsActive').skip(4).string('ClientIDType', stropt(11));
exports. CThostFtdcSyncingInvestorGroupFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorGroupID', stropt(13)).string('InvestorGroupName', stropt(41));
exports. CThostFtdcSyncingTradingAccountFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).doublele('PreMortgage').doublele('PreCredit').doublele('PreDeposit').doublele('PreBalance').doublele('PreMargin').doublele('InterestBase').doublele('Interest').doublele('Deposit').doublele('Withdraw').doublele('FrozenMargin').doublele('FrozenCash').doublele('FrozenCommission').doublele('CurrMargin').doublele('CashIn').doublele('Commission').doublele('CloseProfit').doublele('PositionProfit').doublele('Balance').doublele('Available').doublele('WithdrawQuota').doublele('Reserve').string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).doublele('Credit').doublele('Mortgage').doublele('ExchangeMargin').doublele('DeliveryMargin').doublele('ExchangeDeliveryMargin').doublele('ReserveBalance').string('CurrencyID', stropt(4)).doublele('PreFundMortgageIn').doublele('PreFundMortgageOut').doublele('FundMortgageIn').doublele('FundMortgageOut').doublele('FundMortgageAvailable').doublele('MortgageableFund').doublele('SpecProductMargin').doublele('SpecProductFrozenMargin').doublele('SpecProductCommission').doublele('SpecProductFrozenCommission').doublele('SpecProductPositionProfit').doublele('SpecProductCloseProfit').doublele('SpecProductPositionProfitByAlg').doublele('SpecProductExchangeMargin').doublele('FrozenSwap').doublele('RemainSwap');
exports. CThostFtdcSyncingInvestorPositionFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('PosiDirection', stropt(1)).string('HedgeFlag', stropt(1)).string('PositionDate', stropt(1)).int32le('YdPosition').skip(4).int32le('Position').skip(4).int32le('LongFrozen').skip(4).int32le('ShortFrozen').skip(4).doublele('LongFrozenAmount').doublele('ShortFrozenAmount').int32le('OpenVolume').skip(4).int32le('CloseVolume').skip(4).doublele('OpenAmount').doublele('CloseAmount').doublele('PositionCost').doublele('PreMargin').doublele('UseMargin').doublele('FrozenMargin').doublele('FrozenCash').doublele('FrozenCommission').doublele('CashIn').doublele('Commission').doublele('CloseProfit').doublele('PositionProfit').doublele('PreSettlementPrice').doublele('SettlementPrice').string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).doublele('OpenCost').doublele('ExchangeMargin').int32le('CombPosition').skip(4).int32le('CombLongFrozen').skip(4).int32le('CombShortFrozen').skip(4).doublele('CloseProfitByDate').doublele('CloseProfitByTrade').int32le('TodayPosition').skip(4).doublele('MarginRateByMoney').doublele('MarginRateByVolume').int32le('StrikeFrozen').skip(4).doublele('StrikeFrozenAmount').int32le('AbandonFrozen').skip(4).string('ExchangeID', stropt(9)).int32le('YdStrikeFrozen').skip(4).string('InvestUnitID', stropt(17)).doublele('PositionCostOffset');
exports. CThostFtdcSyncingInstrumentMarginRateFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('HedgeFlag', stropt(1)).doublele('LongMarginRatioByMoney').doublele('LongMarginRatioByVolume').doublele('ShortMarginRatioByMoney').doublele('ShortMarginRatioByVolume').int32le('IsRelative').skip(4);
exports. CThostFtdcSyncingInstrumentCommissionRateFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('OpenRatioByMoney').doublele('OpenRatioByVolume').doublele('CloseRatioByMoney').doublele('CloseRatioByVolume').doublele('CloseTodayRatioByMoney').doublele('CloseTodayRatioByVolume');
exports. CThostFtdcSyncingInstrumentTradingRightFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('TradingRight', stropt(1));
exports. CThostFtdcQryOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('OrderSysID', stropt(21)).string('InsertTimeStart', stropt(9)).string('InsertTimeEnd', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcQryTradeFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('TradeID', stropt(21)).string('TradeTimeStart', stropt(9)).string('TradeTimeEnd', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcQryInvestorPositionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcQryTradingAccountFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('CurrencyID', stropt(4)).string('BizType', stropt(1)).string('AccountID', stropt(13));
exports. CThostFtdcQryInvestorFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13));
exports. CThostFtdcQryTradingCodeFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ExchangeID', stropt(9)).string('ClientID', stropt(11)).string('ClientIDType', stropt(11)).string('InvestUnitID', stropt(17));
exports. CThostFtdcQryInvestorGroupFieldParser = () => new Parser().string('BrokerID', stropt(11));
exports. CThostFtdcQryInstrumentMarginRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('HedgeFlag', stropt(1)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcQryInstrumentCommissionRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcQryInstrumentTradingRightFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31));
exports. CThostFtdcQryBrokerFieldParser = () => new Parser().string('BrokerID', stropt(11));
exports. CThostFtdcQryTraderFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('TraderID', stropt(21));
exports. CThostFtdcQrySuperUserFunctionFieldParser = () => new Parser().string('UserID', stropt(16));
exports. CThostFtdcQryUserSessionFieldParser = () => new Parser().int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports. CThostFtdcQryPartBrokerFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('BrokerID', stropt(11)).string('ParticipantID', stropt(11));
exports. CThostFtdcQryFrontStatusFieldParser = () => new Parser().int32le('FrontID').skip(4);
exports. CThostFtdcQryExchangeOrderFieldParser = () => new Parser().string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('ExchangeID', stropt(9)).string('TraderID', stropt(21));
exports. CThostFtdcQryOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ExchangeID', stropt(9));
exports. CThostFtdcQryExchangeOrderActionFieldParser = () => new Parser().string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeID', stropt(9)).string('TraderID', stropt(21));
exports. CThostFtdcQrySuperUserFieldParser = () => new Parser().string('UserID', stropt(16));
exports. CThostFtdcQryExchangeFieldParser = () => new Parser().string('ExchangeID', stropt(9));
exports. CThostFtdcQryProductFieldParser = () => new Parser().string('ProductID', stropt(31)).string('ProductClass', stropt(1)).string('ExchangeID', stropt(9));
exports. CThostFtdcQryInstrumentFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('ExchangeInstID', stropt(31)).string('ProductID', stropt(31));
exports. CThostFtdcQryDepthMarketDataFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9));
exports. CThostFtdcQryBrokerUserFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports. CThostFtdcQryBrokerUserFunctionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports. CThostFtdcQryTraderOfferFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('TraderID', stropt(21));
exports. CThostFtdcQrySyncDepositFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('DepositSeqNo', stropt(15));
exports. CThostFtdcQrySettlementInfoFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('TradingDay', stropt(9)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4));
exports. CThostFtdcQryExchangeMarginRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).string('HedgeFlag', stropt(1)).string('ExchangeID', stropt(9));
exports. CThostFtdcQryExchangeMarginRateAdjustFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).string('HedgeFlag', stropt(1));
exports. CThostFtdcQryExchangeRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('FromCurrencyID', stropt(4)).string('ToCurrencyID', stropt(4));
exports. CThostFtdcQrySyncFundMortgageFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('MortgageSeqNo', stropt(15));
exports. CThostFtdcQryHisOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('OrderSysID', stropt(21)).string('InsertTimeStart', stropt(9)).string('InsertTimeEnd', stropt(9)).string('TradingDay', stropt(9)).int32le('SettlementID').skip(4);
exports. CThostFtdcOptionInstrMiniMarginFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('MinMargin').string('ValueMethod', stropt(1)).int32le('IsRelative').skip(4);
exports. CThostFtdcOptionInstrMarginAdjustFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('SShortMarginRatioByMoney').doublele('SShortMarginRatioByVolume').doublele('HShortMarginRatioByMoney').doublele('HShortMarginRatioByVolume').doublele('AShortMarginRatioByMoney').doublele('AShortMarginRatioByVolume').int32le('IsRelative').skip(4).doublele('MShortMarginRatioByMoney').doublele('MShortMarginRatioByVolume');
exports. CThostFtdcOptionInstrCommRateFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('OpenRatioByMoney').doublele('OpenRatioByVolume').doublele('CloseRatioByMoney').doublele('CloseRatioByVolume').doublele('CloseTodayRatioByMoney').doublele('CloseTodayRatioByVolume').doublele('StrikeRatioByMoney').doublele('StrikeRatioByVolume').string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcOptionInstrTradeCostFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('HedgeFlag', stropt(1)).doublele('FixedMargin').doublele('MiniMargin').doublele('Royalty').doublele('ExchFixedMargin').doublele('ExchMiniMargin').string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcQryOptionInstrTradeCostFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('HedgeFlag', stropt(1)).doublele('InputPrice').doublele('UnderlyingPrice').string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcQryOptionInstrCommRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcIndexPriceFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).doublele('ClosePrice');
exports. CThostFtdcInputExecOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExecOrderRef', stropt(13)).string('UserID', stropt(16)).int32le('Volume').skip(4).int32le('RequestID').skip(4).string('BusinessUnit', stropt(21)).string('OffsetFlag', stropt(1)).string('HedgeFlag', stropt(1)).string('ActionType', stropt(1)).string('PosiDirection', stropt(1)).string('ReservePositionFlag', stropt(1)).string('CloseFlag', stropt(1)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('ClientID', stropt(11)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcInputExecOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('ExecOrderActionRef').skip(4).string('ExecOrderRef', stropt(13)).int32le('RequestID').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('ExchangeID', stropt(9)).string('ExecOrderSysID', stropt(21)).string('ActionFlag', stropt(1)).string('UserID', stropt(16)).string('InstrumentID', stropt(31)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcExecOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExecOrderRef', stropt(13)).string('UserID', stropt(16)).int32le('Volume').skip(4).int32le('RequestID').skip(4).string('BusinessUnit', stropt(21)).string('OffsetFlag', stropt(1)).string('HedgeFlag', stropt(1)).string('ActionType', stropt(1)).string('PosiDirection', stropt(1)).string('ReservePositionFlag', stropt(1)).string('CloseFlag', stropt(1)).string('ExecOrderLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('OrderSubmitStatus', stropt(1)).int32le('NotifySequence').skip(4).string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).string('ExecOrderSysID', stropt(21)).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('CancelTime', stropt(9)).string('ExecResult', stropt(1)).string('ClearingPartID', stropt(11)).int32le('SequenceNo').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('UserProductInfo', stropt(11)).string('StatusMsg', stropt(81)).string('ActiveUserID', stropt(16)).int32le('BrokerExecOrderSeq').skip(4).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcExecOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('ExecOrderActionRef').skip(4).string('ExecOrderRef', stropt(13)).int32le('RequestID').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('ExchangeID', stropt(9)).string('ExecOrderSysID', stropt(21)).string('ActionFlag', stropt(1)).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('ExecOrderLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('ActionType', stropt(1)).string('StatusMsg', stropt(81)).string('InstrumentID', stropt(31)).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcQryExecOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('ExecOrderSysID', stropt(21)).string('InsertTimeStart', stropt(9)).string('InsertTimeEnd', stropt(9));
exports. CThostFtdcExchangeExecOrderFieldParser = () => new Parser().int32le('Volume').skip(4).int32le('RequestID').skip(4).string('BusinessUnit', stropt(21)).string('OffsetFlag', stropt(1)).string('HedgeFlag', stropt(1)).string('ActionType', stropt(1)).string('PosiDirection', stropt(1)).string('ReservePositionFlag', stropt(1)).string('CloseFlag', stropt(1)).string('ExecOrderLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('OrderSubmitStatus', stropt(1)).int32le('NotifySequence').skip(4).string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).string('ExecOrderSysID', stropt(21)).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('CancelTime', stropt(9)).string('ExecResult', stropt(1)).string('ClearingPartID', stropt(11)).int32le('SequenceNo').skip(4).string('BranchID', stropt(9)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcQryExchangeExecOrderFieldParser = () => new Parser().string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('ExchangeID', stropt(9)).string('TraderID', stropt(21));
exports. CThostFtdcQryExecOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ExchangeID', stropt(9));
exports. CThostFtdcExchangeExecOrderActionFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ExecOrderSysID', stropt(21)).string('ActionFlag', stropt(1)).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('ExecOrderLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('ActionType', stropt(1)).string('BranchID', stropt(9)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).string('ExchangeInstID', stropt(31)).int32le('Volume').skip(4);
exports. CThostFtdcQryExchangeExecOrderActionFieldParser = () => new Parser().string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeID', stropt(9)).string('TraderID', stropt(21));
exports. CThostFtdcErrExecOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExecOrderRef', stropt(13)).string('UserID', stropt(16)).int32le('Volume').skip(4).int32le('RequestID').skip(4).string('BusinessUnit', stropt(21)).string('OffsetFlag', stropt(1)).string('HedgeFlag', stropt(1)).string('ActionType', stropt(1)).string('PosiDirection', stropt(1)).string('ReservePositionFlag', stropt(1)).string('CloseFlag', stropt(1)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('ClientID', stropt(11)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81));
exports. CThostFtdcQryErrExecOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13));
exports. CThostFtdcErrExecOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('ExecOrderActionRef').skip(4).string('ExecOrderRef', stropt(13)).int32le('RequestID').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('ExchangeID', stropt(9)).string('ExecOrderSysID', stropt(21)).string('ActionFlag', stropt(1)).string('UserID', stropt(16)).string('InstrumentID', stropt(31)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81));
exports. CThostFtdcQryErrExecOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13));
exports. CThostFtdcOptionInstrTradingRightFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('Direction', stropt(1)).string('TradingRight', stropt(1));
exports. CThostFtdcQryOptionInstrTradingRightFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('Direction', stropt(1));
exports. CThostFtdcInputForQuoteFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ForQuoteRef', stropt(13)).string('UserID', stropt(16)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcForQuoteFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ForQuoteRef', stropt(13)).string('UserID', stropt(16)).string('ForQuoteLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('ForQuoteStatus', stropt(1)).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('StatusMsg', stropt(81)).string('ActiveUserID', stropt(16)).int32le('BrokerForQutoSeq').skip(4).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcQryForQuoteFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InsertTimeStart', stropt(9)).string('InsertTimeEnd', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcExchangeForQuoteFieldParser = () => new Parser().string('ForQuoteLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('ForQuoteStatus', stropt(1)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcQryExchangeForQuoteFieldParser = () => new Parser().string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('ExchangeID', stropt(9)).string('TraderID', stropt(21));
exports. CThostFtdcInputQuoteFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('QuoteRef', stropt(13)).string('UserID', stropt(16)).doublele('AskPrice').doublele('BidPrice').int32le('AskVolume').skip(4).int32le('BidVolume').skip(4).int32le('RequestID').skip(4).string('BusinessUnit', stropt(21)).string('AskOffsetFlag', stropt(1)).string('BidOffsetFlag', stropt(1)).string('AskHedgeFlag', stropt(1)).string('BidHedgeFlag', stropt(1)).string('AskOrderRef', stropt(13)).string('BidOrderRef', stropt(13)).string('ForQuoteSysID', stropt(21)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).string('ClientID', stropt(11)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcInputQuoteActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('QuoteActionRef').skip(4).string('QuoteRef', stropt(13)).int32le('RequestID').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('ExchangeID', stropt(9)).string('QuoteSysID', stropt(21)).string('ActionFlag', stropt(1)).string('UserID', stropt(16)).string('InstrumentID', stropt(31)).string('InvestUnitID', stropt(17)).string('ClientID', stropt(11)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcQuoteFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('QuoteRef', stropt(13)).string('UserID', stropt(16)).doublele('AskPrice').doublele('BidPrice').int32le('AskVolume').skip(4).int32le('BidVolume').skip(4).int32le('RequestID').skip(4).string('BusinessUnit', stropt(21)).string('AskOffsetFlag', stropt(1)).string('BidOffsetFlag', stropt(1)).string('AskHedgeFlag', stropt(1)).string('BidHedgeFlag', stropt(1)).string('QuoteLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).int32le('NotifySequence').skip(4).string('OrderSubmitStatus', stropt(1)).string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).string('QuoteSysID', stropt(21)).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('CancelTime', stropt(9)).string('QuoteStatus', stropt(1)).string('ClearingPartID', stropt(11)).int32le('SequenceNo').skip(4).string('AskOrderSysID', stropt(21)).string('BidOrderSysID', stropt(21)).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('UserProductInfo', stropt(11)).string('StatusMsg', stropt(81)).string('ActiveUserID', stropt(16)).int32le('BrokerQuoteSeq').skip(4).string('AskOrderRef', stropt(13)).string('BidOrderRef', stropt(13)).string('ForQuoteSysID', stropt(21)).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcQuoteActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('QuoteActionRef').skip(4).string('QuoteRef', stropt(13)).int32le('RequestID').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('ExchangeID', stropt(9)).string('QuoteSysID', stropt(21)).string('ActionFlag', stropt(1)).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('QuoteLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('StatusMsg', stropt(81)).string('InstrumentID', stropt(31)).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcQryQuoteFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('QuoteSysID', stropt(21)).string('InsertTimeStart', stropt(9)).string('InsertTimeEnd', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcExchangeQuoteFieldParser = () => new Parser().doublele('AskPrice').doublele('BidPrice').int32le('AskVolume').skip(4).int32le('BidVolume').skip(4).int32le('RequestID').skip(4).string('BusinessUnit', stropt(21)).string('AskOffsetFlag', stropt(1)).string('BidOffsetFlag', stropt(1)).string('AskHedgeFlag', stropt(1)).string('BidHedgeFlag', stropt(1)).string('QuoteLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).int32le('NotifySequence').skip(4).string('OrderSubmitStatus', stropt(1)).string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).string('QuoteSysID', stropt(21)).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('CancelTime', stropt(9)).string('QuoteStatus', stropt(1)).string('ClearingPartID', stropt(11)).int32le('SequenceNo').skip(4).string('AskOrderSysID', stropt(21)).string('BidOrderSysID', stropt(21)).string('ForQuoteSysID', stropt(21)).string('BranchID', stropt(9)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcQryExchangeQuoteFieldParser = () => new Parser().string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('ExchangeID', stropt(9)).string('TraderID', stropt(21));
exports. CThostFtdcQryQuoteActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ExchangeID', stropt(9));
exports. CThostFtdcExchangeQuoteActionFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('QuoteSysID', stropt(21)).string('ActionFlag', stropt(1)).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('QuoteLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcQryExchangeQuoteActionFieldParser = () => new Parser().string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeID', stropt(9)).string('TraderID', stropt(21));
exports. CThostFtdcOptionInstrDeltaFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('Delta');
exports. CThostFtdcForQuoteRspFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('InstrumentID', stropt(31)).string('ForQuoteSysID', stropt(21)).string('ForQuoteTime', stropt(9)).string('ActionDay', stropt(9)).string('ExchangeID', stropt(9));
exports. CThostFtdcStrikeOffsetFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('Offset').string('OffsetType', stropt(1));
exports. CThostFtdcQryStrikeOffsetFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31));
exports. CThostFtdcInputBatchOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('OrderActionRef').skip(4).int32le('RequestID').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('ExchangeID', stropt(9)).string('UserID', stropt(16)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcBatchOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('OrderActionRef').skip(4).int32le('RequestID').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('ExchangeID', stropt(9)).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('StatusMsg', stropt(81)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcExchangeBatchOrderActionFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcQryBatchOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ExchangeID', stropt(9));
exports. CThostFtdcCombInstrumentGuardFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).doublele('GuarantRatio').string('ExchangeID', stropt(9));
exports. CThostFtdcQryCombInstrumentGuardFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9));
exports. CThostFtdcInputCombActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('CombActionRef', stropt(13)).string('UserID', stropt(16)).string('Direction', stropt(1)).int32le('Volume').skip(4).string('CombDirection', stropt(1)).string('HedgeFlag', stropt(1)).string('ExchangeID', stropt(9)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).string('InvestUnitID', stropt(17));
exports. CThostFtdcCombActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('CombActionRef', stropt(13)).string('UserID', stropt(16)).string('Direction', stropt(1)).int32le('Volume').skip(4).string('CombDirection', stropt(1)).string('HedgeFlag', stropt(1)).string('ActionLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('ActionStatus', stropt(1)).int32le('NotifySequence').skip(4).string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).int32le('SequenceNo').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('UserProductInfo', stropt(11)).string('StatusMsg', stropt(81)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).string('ComTradeID', stropt(21)).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcQryCombActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcExchangeCombActionFieldParser = () => new Parser().string('Direction', stropt(1)).int32le('Volume').skip(4).string('CombDirection', stropt(1)).string('HedgeFlag', stropt(1)).string('ActionLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('ActionStatus', stropt(1)).int32le('NotifySequence').skip(4).string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).int32le('SequenceNo').skip(4).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).string('ComTradeID', stropt(21)).string('BranchID', stropt(9));
exports. CThostFtdcQryExchangeCombActionFieldParser = () => new Parser().string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('ExchangeID', stropt(9)).string('TraderID', stropt(21));
exports. CThostFtdcProductExchRateFieldParser = () => new Parser().string('ProductID', stropt(31)).string('QuoteCurrencyID', stropt(4)).doublele('ExchangeRate').string('ExchangeID', stropt(9));
exports. CThostFtdcQryProductExchRateFieldParser = () => new Parser().string('ProductID', stropt(31)).string('ExchangeID', stropt(9));
exports. CThostFtdcQryForQuoteParamFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9));
exports. CThostFtdcForQuoteParamFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).doublele('LastPrice').doublele('PriceInterval');
exports. CThostFtdcMMOptionInstrCommRateFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('OpenRatioByMoney').doublele('OpenRatioByVolume').doublele('CloseRatioByMoney').doublele('CloseRatioByVolume').doublele('CloseTodayRatioByMoney').doublele('CloseTodayRatioByVolume').doublele('StrikeRatioByMoney').doublele('StrikeRatioByVolume');
exports. CThostFtdcQryMMOptionInstrCommRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31));
exports. CThostFtdcMMInstrumentCommissionRateFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('OpenRatioByMoney').doublele('OpenRatioByVolume').doublele('CloseRatioByMoney').doublele('CloseRatioByVolume').doublele('CloseTodayRatioByMoney').doublele('CloseTodayRatioByVolume');
exports. CThostFtdcQryMMInstrumentCommissionRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31));
exports. CThostFtdcInstrumentOrderCommRateFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('HedgeFlag', stropt(1)).doublele('OrderCommByVolume').doublele('OrderActionCommByVolume').string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcQryInstrumentOrderCommRateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31));
exports. CThostFtdcTradeParamFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('TradeParamID', stropt(1)).string('TradeParamValue', stropt(256)).string('Memo', stropt(161));
exports. CThostFtdcInstrumentMarginRateULFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('HedgeFlag', stropt(1)).doublele('LongMarginRatioByMoney').doublele('LongMarginRatioByVolume').doublele('ShortMarginRatioByMoney').doublele('ShortMarginRatioByVolume');
exports. CThostFtdcFutureLimitPosiParamFieldParser = () => new Parser().string('InvestorRange', stropt(1)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ProductID', stropt(31)).int32le('SpecOpenVolume').skip(4).int32le('ArbiOpenVolume').skip(4).int32le('OpenVolume').skip(4);
exports. CThostFtdcLoginForbiddenIPFieldParser = () => new Parser().string('IPAddress', stropt(16));
exports. CThostFtdcIPListFieldParser = () => new Parser().string('IPAddress', stropt(16)).int32le('IsWhite').skip(4);
exports. CThostFtdcInputOptionSelfCloseFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('OptionSelfCloseRef', stropt(13)).string('UserID', stropt(16)).int32le('Volume').skip(4).int32le('RequestID').skip(4).string('BusinessUnit', stropt(21)).string('HedgeFlag', stropt(1)).string('OptSelfCloseFlag', stropt(1)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('ClientID', stropt(11)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcInputOptionSelfCloseActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('OptionSelfCloseActionRef').skip(4).string('OptionSelfCloseRef', stropt(13)).int32le('RequestID').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('ExchangeID', stropt(9)).string('OptionSelfCloseSysID', stropt(21)).string('ActionFlag', stropt(1)).string('UserID', stropt(16)).string('InstrumentID', stropt(31)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcOptionSelfCloseFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('OptionSelfCloseRef', stropt(13)).string('UserID', stropt(16)).int32le('Volume').skip(4).int32le('RequestID').skip(4).string('BusinessUnit', stropt(21)).string('HedgeFlag', stropt(1)).string('OptSelfCloseFlag', stropt(1)).string('OptionSelfCloseLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('OrderSubmitStatus', stropt(1)).int32le('NotifySequence').skip(4).string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).string('OptionSelfCloseSysID', stropt(21)).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('CancelTime', stropt(9)).string('ExecResult', stropt(1)).string('ClearingPartID', stropt(11)).int32le('SequenceNo').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('UserProductInfo', stropt(11)).string('StatusMsg', stropt(81)).string('ActiveUserID', stropt(16)).int32le('BrokerOptionSelfCloseSeq').skip(4).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcOptionSelfCloseActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('OptionSelfCloseActionRef').skip(4).string('OptionSelfCloseRef', stropt(13)).int32le('RequestID').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('ExchangeID', stropt(9)).string('OptionSelfCloseSysID', stropt(21)).string('ActionFlag', stropt(1)).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('OptionSelfCloseLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('StatusMsg', stropt(81)).string('InstrumentID', stropt(31)).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcQryOptionSelfCloseFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('OptionSelfCloseSysID', stropt(21)).string('InsertTimeStart', stropt(9)).string('InsertTimeEnd', stropt(9));
exports. CThostFtdcExchangeOptionSelfCloseFieldParser = () => new Parser().int32le('Volume').skip(4).int32le('RequestID').skip(4).string('BusinessUnit', stropt(21)).string('HedgeFlag', stropt(1)).string('OptSelfCloseFlag', stropt(1)).string('OptionSelfCloseLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('OrderSubmitStatus', stropt(1)).int32le('NotifySequence').skip(4).string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).string('OptionSelfCloseSysID', stropt(21)).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('CancelTime', stropt(9)).string('ExecResult', stropt(1)).string('ClearingPartID', stropt(11)).int32le('SequenceNo').skip(4).string('BranchID', stropt(9)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcQryOptionSelfCloseActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ExchangeID', stropt(9));
exports. CThostFtdcExchangeOptionSelfCloseActionFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('OptionSelfCloseSysID', stropt(21)).string('ActionFlag', stropt(1)).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('OptionSelfCloseLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('BranchID', stropt(9)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).string('ExchangeInstID', stropt(31)).string('OptSelfCloseFlag', stropt(1));
exports. CThostFtdcSyncDelaySwapFieldParser = () => new Parser().string('DelaySwapSeqNo', stropt(15)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('FromCurrencyID', stropt(4)).doublele('FromAmount').doublele('FromFrozenSwap').doublele('FromRemainSwap').string('ToCurrencyID', stropt(4)).doublele('ToAmount');
exports. CThostFtdcQrySyncDelaySwapFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('DelaySwapSeqNo', stropt(15));
exports. CThostFtdcInvestUnitFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InvestUnitID', stropt(17)).string('InvestorUnitName', stropt(81)).string('InvestorGroupID', stropt(13)).string('CommModelID', stropt(13)).string('MarginModelID', stropt(13)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4));
exports. CThostFtdcQryInvestUnitFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InvestUnitID', stropt(17));
exports. CThostFtdcSecAgentCheckModeFieldParser = () => new Parser().string('InvestorID', stropt(13)).string('BrokerID', stropt(11)).string('CurrencyID', stropt(4)).string('BrokerSecAgentID', stropt(13)).int32le('CheckSelfAccount').skip(4);
exports. CThostFtdcSecAgentTradeInfoFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('BrokerSecAgentID', stropt(13)).string('InvestorID', stropt(13)).string('LongCustomerName', stropt(161));
exports. CThostFtdcMarketDataFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('ExchangeInstID', stropt(31)).doublele('LastPrice').doublele('PreSettlementPrice').doublele('PreClosePrice').doublele('PreOpenInterest').doublele('OpenPrice').doublele('HighestPrice').doublele('LowestPrice').int32le('Volume').skip(4).doublele('Turnover').doublele('OpenInterest').doublele('ClosePrice').doublele('SettlementPrice').doublele('UpperLimitPrice').doublele('LowerLimitPrice').doublele('PreDelta').doublele('CurrDelta').string('UpdateTime', stropt(9)).int32le('UpdateMillisec').skip(4).string('ActionDay', stropt(9));
exports. CThostFtdcMarketDataBaseFieldParser = () => new Parser().string('TradingDay', stropt(9)).doublele('PreSettlementPrice').doublele('PreClosePrice').doublele('PreOpenInterest').doublele('PreDelta');
exports. CThostFtdcMarketDataStaticFieldParser = () => new Parser().doublele('OpenPrice').doublele('HighestPrice').doublele('LowestPrice').doublele('ClosePrice').doublele('UpperLimitPrice').doublele('LowerLimitPrice').doublele('SettlementPrice').doublele('CurrDelta');
exports. CThostFtdcMarketDataLastMatchFieldParser = () => new Parser().doublele('LastPrice').int32le('Volume').skip(4).doublele('Turnover').doublele('OpenInterest');
exports. CThostFtdcMarketDataBestPriceFieldParser = () => new Parser().doublele('BidPrice1').int32le('BidVolume1').skip(4).doublele('AskPrice1').int32le('AskVolume1').skip(4);
exports. CThostFtdcMarketDataBid23FieldParser = () => new Parser().doublele('BidPrice2').int32le('BidVolume2').skip(4).doublele('BidPrice3').int32le('BidVolume3').skip(4);
exports. CThostFtdcMarketDataAsk23FieldParser = () => new Parser().doublele('AskPrice2').int32le('AskVolume2').skip(4).doublele('AskPrice3').int32le('AskVolume3').skip(4);
exports. CThostFtdcMarketDataBid45FieldParser = () => new Parser().doublele('BidPrice4').int32le('BidVolume4').skip(4).doublele('BidPrice5').int32le('BidVolume5').skip(4);
exports. CThostFtdcMarketDataAsk45FieldParser = () => new Parser().doublele('AskPrice4').int32le('AskVolume4').skip(4).doublele('AskPrice5').int32le('AskVolume5').skip(4);
exports. CThostFtdcMarketDataUpdateTimeFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('UpdateTime', stropt(9)).int32le('UpdateMillisec').skip(4).string('ActionDay', stropt(9));
exports. CThostFtdcMarketDataExchangeFieldParser = () => new Parser().string('ExchangeID', stropt(9));
exports. CThostFtdcSpecificInstrumentFieldParser = () => new Parser().string('InstrumentID', stropt(31));
exports. CThostFtdcInstrumentStatusFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ExchangeInstID', stropt(31)).string('SettlementGroupID', stropt(9)).string('InstrumentID', stropt(31)).string('InstrumentStatus', stropt(1)).int32le('TradingSegmentSN').skip(4).string('EnterTime', stropt(9)).string('EnterReason', stropt(1));
exports. CThostFtdcQryInstrumentStatusFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ExchangeInstID', stropt(31));
exports. CThostFtdcInvestorAccountFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4));
exports. CThostFtdcPositionProfitAlgorithmFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).string('Algorithm', stropt(1)).string('Memo', stropt(161)).string('CurrencyID', stropt(4));
exports. CThostFtdcDiscountFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorRange', stropt(1)).string('InvestorID', stropt(13)).doublele('Discount');
exports. CThostFtdcQryTransferBankFieldParser = () => new Parser().string('BankID', stropt(4)).string('BankBrchID', stropt(5));
exports. CThostFtdcTransferBankFieldParser = () => new Parser().string('BankID', stropt(4)).string('BankBrchID', stropt(5)).string('BankName', stropt(101)).int32le('IsActive').skip(4);
exports. CThostFtdcQryInvestorPositionDetailFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcInvestorPositionDetailFieldParser = () => new Parser().string('InstrumentID', stropt(31)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('HedgeFlag', stropt(1)).string('Direction', stropt(1)).string('OpenDate', stropt(9)).string('TradeID', stropt(21)).int32le('Volume').skip(4).doublele('OpenPrice').string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).string('TradeType', stropt(1)).string('CombInstrumentID', stropt(31)).string('ExchangeID', stropt(9)).doublele('CloseProfitByDate').doublele('CloseProfitByTrade').doublele('PositionProfitByDate').doublele('PositionProfitByTrade').doublele('Margin').doublele('ExchMargin').doublele('MarginRateByMoney').doublele('MarginRateByVolume').doublele('LastSettlementPrice').doublele('SettlementPrice').int32le('CloseVolume').skip(4).doublele('CloseAmount').int32le('TimeFirstVolume').skip(4).string('InvestUnitID', stropt(17));
exports. CThostFtdcTradingAccountPasswordFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).string('Password', stropt(41)).string('CurrencyID', stropt(4));
exports. CThostFtdcMDTraderOfferFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('TraderID', stropt(21)).string('ParticipantID', stropt(11)).string('Password', stropt(41)).int32le('InstallID').skip(4).string('OrderLocalID', stropt(13)).string('TraderConnectStatus', stropt(1)).string('ConnectRequestDate', stropt(9)).string('ConnectRequestTime', stropt(9)).string('LastReportDate', stropt(9)).string('LastReportTime', stropt(9)).string('ConnectDate', stropt(9)).string('ConnectTime', stropt(9)).string('StartDate', stropt(9)).string('StartTime', stropt(9)).string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('MaxTradeID', stropt(21)).string('MaxOrderMessageReference', stropt(7));
exports. CThostFtdcQryMDTraderOfferFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('TraderID', stropt(21));
exports. CThostFtdcQryNoticeFieldParser = () => new Parser().string('BrokerID', stropt(11));
exports. CThostFtdcNoticeFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('Content', stropt(501)).string('SequenceLabel', stropt(2));
exports. CThostFtdcUserRightFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('UserRightType', stropt(1)).int32le('IsForbidden').skip(4);
exports. CThostFtdcQrySettlementInfoConfirmFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4));
exports. CThostFtdcLoadSettlementInfoFieldParser = () => new Parser().string('BrokerID', stropt(11));
exports. CThostFtdcBrokerWithdrawAlgorithmFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('WithdrawAlgorithm', stropt(1)).doublele('UsingRatio').string('IncludeCloseProfit', stropt(1)).string('AllWithoutTrade', stropt(1)).string('AvailIncludeCloseProfit', stropt(1)).int32le('IsBrokerUserEvent').skip(4).string('CurrencyID', stropt(4)).doublele('FundMortgageRatio').string('BalanceAlgorithm', stropt(1));
exports. CThostFtdcTradingAccountPasswordUpdateV1FieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('OldPassword', stropt(41)).string('NewPassword', stropt(41));
exports. CThostFtdcTradingAccountPasswordUpdateFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).string('OldPassword', stropt(41)).string('NewPassword', stropt(41)).string('CurrencyID', stropt(4));
exports. CThostFtdcQryCombinationLegFieldParser = () => new Parser().string('CombInstrumentID', stropt(31)).int32le('LegID').skip(4).string('LegInstrumentID', stropt(31));
exports. CThostFtdcQrySyncStatusFieldParser = () => new Parser().string('TradingDay', stropt(9));
exports. CThostFtdcCombinationLegFieldParser = () => new Parser().string('CombInstrumentID', stropt(31)).int32le('LegID').skip(4).string('LegInstrumentID', stropt(31)).string('Direction', stropt(1)).int32le('LegMultiple').skip(4).int32le('ImplyLevel').skip(4);
exports. CThostFtdcSyncStatusFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('DataSyncStatus', stropt(1));
exports. CThostFtdcQryLinkManFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13));
exports. CThostFtdcLinkManFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('PersonType', stropt(1)).string('IdentifiedCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('PersonName', stropt(81)).string('Telephone', stropt(41)).string('Address', stropt(101)).string('ZipCode', stropt(7)).int32le('Priority').skip(4).string('UOAZipCode', stropt(11)).string('PersonFullName', stropt(101));
exports. CThostFtdcQryBrokerUserEventFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('UserEventType', stropt(1));
exports. CThostFtdcBrokerUserEventFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('UserEventType', stropt(1)).int32le('EventSequenceNo').skip(4).string('EventDate', stropt(9)).string('EventTime', stropt(9)).string('UserEventInfo', stropt(1025)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31));
exports. CThostFtdcQryContractBankFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('BankID', stropt(4)).string('BankBrchID', stropt(5));
exports. CThostFtdcContractBankFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('BankID', stropt(4)).string('BankBrchID', stropt(5)).string('BankName', stropt(101));
exports. CThostFtdcInvestorPositionCombineDetailFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('OpenDate', stropt(9)).string('ExchangeID', stropt(9)).int32le('SettlementID').skip(4).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ComTradeID', stropt(21)).string('TradeID', stropt(21)).string('InstrumentID', stropt(31)).string('HedgeFlag', stropt(1)).string('Direction', stropt(1)).int32le('TotalAmt').skip(4).doublele('Margin').doublele('ExchMargin').doublele('MarginRateByMoney').doublele('MarginRateByVolume').int32le('LegID').skip(4).int32le('LegMultiple').skip(4).string('CombInstrumentID', stropt(31)).int32le('TradeGroupID').skip(4).string('InvestUnitID', stropt(17));
exports. CThostFtdcParkedOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('OrderRef', stropt(13)).string('UserID', stropt(16)).string('OrderPriceType', stropt(1)).string('Direction', stropt(1)).string('CombOffsetFlag', stropt(5)).string('CombHedgeFlag', stropt(5)).doublele('LimitPrice').int32le('VolumeTotalOriginal').skip(4).string('TimeCondition', stropt(1)).string('GTDDate', stropt(9)).string('VolumeCondition', stropt(1)).int32le('MinVolume').skip(4).string('ContingentCondition', stropt(1)).doublele('StopPrice').string('ForceCloseReason', stropt(1)).int32le('IsAutoSuspend').skip(4).string('BusinessUnit', stropt(21)).int32le('RequestID').skip(4).int32le('UserForceClose').skip(4).string('ExchangeID', stropt(9)).string('ParkedOrderID', stropt(13)).string('UserType', stropt(1)).string('Status', stropt(1)).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81)).int32le('IsSwapOrder').skip(4).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('ClientID', stropt(11)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcParkedOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('OrderActionRef').skip(4).string('OrderRef', stropt(13)).int32le('RequestID').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('ExchangeID', stropt(9)).string('OrderSysID', stropt(21)).string('ActionFlag', stropt(1)).doublele('LimitPrice').int32le('VolumeChange').skip(4).string('UserID', stropt(16)).string('InstrumentID', stropt(31)).string('ParkedOrderActionID', stropt(13)).string('UserType', stropt(1)).string('Status', stropt(1)).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcQryParkedOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcQryParkedOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcRemoveParkedOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ParkedOrderID', stropt(13)).string('InvestUnitID', stropt(17));
exports. CThostFtdcRemoveParkedOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ParkedOrderActionID', stropt(13)).string('InvestUnitID', stropt(17));
exports. CThostFtdcInvestorWithdrawAlgorithmFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorRange', stropt(1)).string('InvestorID', stropt(13)).doublele('UsingRatio').string('CurrencyID', stropt(4)).doublele('FundMortgageRatio');
exports. CThostFtdcQryInvestorPositionCombineDetailFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('CombInstrumentID', stropt(31)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcMarketDataAveragePriceFieldParser = () => new Parser().doublele('AveragePrice');
exports. CThostFtdcVerifyInvestorPasswordFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('Password', stropt(41));
exports. CThostFtdcUserIPFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('IPAddress', stropt(16)).string('IPMask', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcTradingNoticeInfoFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('SendTime', stropt(9)).string('FieldContent', stropt(501)).int32le('SequenceNo').skip(4).string('InvestUnitID', stropt(17));
exports. CThostFtdcTradingNoticeFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorRange', stropt(1)).string('InvestorID', stropt(13)).string('UserID', stropt(16)).string('SendTime', stropt(9)).int32le('SequenceNo').skip(4).string('FieldContent', stropt(501)).string('InvestUnitID', stropt(17));
exports. CThostFtdcQryTradingNoticeFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InvestUnitID', stropt(17));
exports. CThostFtdcQryErrOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13));
exports. CThostFtdcErrOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('OrderRef', stropt(13)).string('UserID', stropt(16)).string('OrderPriceType', stropt(1)).string('Direction', stropt(1)).string('CombOffsetFlag', stropt(5)).string('CombHedgeFlag', stropt(5)).doublele('LimitPrice').int32le('VolumeTotalOriginal').skip(4).string('TimeCondition', stropt(1)).string('GTDDate', stropt(9)).string('VolumeCondition', stropt(1)).int32le('MinVolume').skip(4).string('ContingentCondition', stropt(1)).doublele('StopPrice').string('ForceCloseReason', stropt(1)).int32le('IsAutoSuspend').skip(4).string('BusinessUnit', stropt(21)).int32le('RequestID').skip(4).int32le('UserForceClose').skip(4).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81)).int32le('IsSwapOrder').skip(4).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('ClientID', stropt(11)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcErrorConditionalOrderFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('OrderRef', stropt(13)).string('UserID', stropt(16)).string('OrderPriceType', stropt(1)).string('Direction', stropt(1)).string('CombOffsetFlag', stropt(5)).string('CombHedgeFlag', stropt(5)).doublele('LimitPrice').int32le('VolumeTotalOriginal').skip(4).string('TimeCondition', stropt(1)).string('GTDDate', stropt(9)).string('VolumeCondition', stropt(1)).int32le('MinVolume').skip(4).string('ContingentCondition', stropt(1)).doublele('StopPrice').string('ForceCloseReason', stropt(1)).int32le('IsAutoSuspend').skip(4).string('BusinessUnit', stropt(21)).int32le('RequestID').skip(4).string('OrderLocalID', stropt(13)).string('ExchangeID', stropt(9)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('ExchangeInstID', stropt(31)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('OrderSubmitStatus', stropt(1)).int32le('NotifySequence').skip(4).string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).string('OrderSysID', stropt(21)).string('OrderSource', stropt(1)).string('OrderStatus', stropt(1)).string('OrderType', stropt(1)).int32le('VolumeTraded').skip(4).int32le('VolumeTotal').skip(4).string('InsertDate', stropt(9)).string('InsertTime', stropt(9)).string('ActiveTime', stropt(9)).string('SuspendTime', stropt(9)).string('UpdateTime', stropt(9)).string('CancelTime', stropt(9)).string('ActiveTraderID', stropt(21)).string('ClearingPartID', stropt(11)).int32le('SequenceNo').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('UserProductInfo', stropt(11)).string('StatusMsg', stropt(81)).int32le('UserForceClose').skip(4).string('ActiveUserID', stropt(16)).int32le('BrokerOrderSeq').skip(4).string('RelativeOrderSysID', stropt(21)).int32le('ZCETotalTradedVolume').skip(4).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81)).int32le('IsSwapOrder').skip(4).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21));
exports. CThostFtdcQryErrOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13));
exports. CThostFtdcErrOrderActionFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).int32le('OrderActionRef').skip(4).string('OrderRef', stropt(13)).int32le('RequestID').skip(4).int32le('FrontID').skip(4).int32le('SessionID').skip(4).string('ExchangeID', stropt(9)).string('OrderSysID', stropt(21)).string('ActionFlag', stropt(1)).doublele('LimitPrice').int32le('VolumeChange').skip(4).string('ActionDate', stropt(9)).string('ActionTime', stropt(9)).string('TraderID', stropt(21)).int32le('InstallID').skip(4).string('OrderLocalID', stropt(13)).string('ActionLocalID', stropt(13)).string('ParticipantID', stropt(11)).string('ClientID', stropt(11)).string('BusinessUnit', stropt(21)).string('OrderActionStatus', stropt(1)).string('UserID', stropt(16)).string('StatusMsg', stropt(81)).string('InstrumentID', stropt(31)).string('BranchID', stropt(9)).string('InvestUnitID', stropt(17)).string('IPAddress', stropt(16)).string('MacAddress', stropt(21)).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81));
exports. CThostFtdcQryExchangeSequenceFieldParser = () => new Parser().string('ExchangeID', stropt(9));
exports. CThostFtdcExchangeSequenceFieldParser = () => new Parser().string('ExchangeID', stropt(9)).int32le('SequenceNo').skip(4).string('MarketStatus', stropt(1));
exports. CThostFtdcQueryMaxOrderVolumeWithPriceFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InstrumentID', stropt(31)).string('Direction', stropt(1)).string('OffsetFlag', stropt(1)).string('HedgeFlag', stropt(1)).int32le('MaxVolume').skip(4).doublele('Price').string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcQryBrokerTradingParamsFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('CurrencyID', stropt(4)).string('AccountID', stropt(13));
exports. CThostFtdcBrokerTradingParamsFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('MarginPriceType', stropt(1)).string('Algorithm', stropt(1)).string('AvailIncludeCloseProfit', stropt(1)).string('CurrencyID', stropt(4)).string('OptionRoyaltyPriceType', stropt(1)).string('AccountID', stropt(13));
exports. CThostFtdcQryBrokerTradingAlgosFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('ExchangeID', stropt(9)).string('InstrumentID', stropt(31));
exports. CThostFtdcBrokerTradingAlgosFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('ExchangeID', stropt(9)).string('InstrumentID', stropt(31)).string('HandlePositionAlgoID', stropt(1)).string('FindMarginRateAlgoID', stropt(1)).string('HandleTradingAccountAlgoID', stropt(1));
exports. CThostFtdcQueryBrokerDepositFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('ExchangeID', stropt(9));
exports. CThostFtdcBrokerDepositFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('ParticipantID', stropt(11)).string('ExchangeID', stropt(9)).doublele('PreBalance').doublele('CurrMargin').doublele('CloseProfit').doublele('Balance').doublele('Deposit').doublele('Withdraw').doublele('Available').doublele('Reserve').doublele('FrozenMargin');
exports. CThostFtdcQryCFMMCBrokerKeyFieldParser = () => new Parser().string('BrokerID', stropt(11));
exports. CThostFtdcCFMMCBrokerKeyFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('ParticipantID', stropt(11)).string('CreateDate', stropt(9)).string('CreateTime', stropt(9)).int32le('KeyID').skip(4).string('CurrentKey', stropt(21)).string('KeyKind', stropt(1));
exports. CThostFtdcCFMMCTradingAccountKeyFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('ParticipantID', stropt(11)).string('AccountID', stropt(13)).int32le('KeyID').skip(4).string('CurrentKey', stropt(21));
exports. CThostFtdcQryCFMMCTradingAccountKeyFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13));
exports. CThostFtdcBrokerUserOTPParamFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('OTPVendorsID', stropt(2)).string('SerialNumber', stropt(17)).string('AuthKey', stropt(41)).int32le('LastDrift').skip(4).int32le('LastSuccess').skip(4).string('OTPType', stropt(1));
exports. CThostFtdcManualSyncBrokerUserOTPFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('OTPType', stropt(1)).string('FirstOTP', stropt(41)).string('SecondOTP', stropt(41));
exports. CThostFtdcCommRateModelFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('CommModelID', stropt(13)).string('CommModelName', stropt(161));
exports. CThostFtdcQryCommRateModelFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('CommModelID', stropt(13));
exports. CThostFtdcMarginModelFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('MarginModelID', stropt(13)).string('MarginModelName', stropt(161));
exports. CThostFtdcQryMarginModelFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('MarginModelID', stropt(13));
exports. CThostFtdcEWarrantOffsetFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ExchangeID', stropt(9)).string('InstrumentID', stropt(31)).string('Direction', stropt(1)).string('HedgeFlag', stropt(1)).int32le('Volume').skip(4).string('InvestUnitID', stropt(17));
exports. CThostFtdcQryEWarrantOffsetFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ExchangeID', stropt(9)).string('InstrumentID', stropt(31)).string('InvestUnitID', stropt(17));
exports. CThostFtdcQryInvestorProductGroupMarginFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('ProductGroupID', stropt(31)).string('HedgeFlag', stropt(1)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcInvestorProductGroupMarginFieldParser = () => new Parser().string('ProductGroupID', stropt(31)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('TradingDay', stropt(9)).int32le('SettlementID').skip(4).doublele('FrozenMargin').doublele('LongFrozenMargin').doublele('ShortFrozenMargin').doublele('UseMargin').doublele('LongUseMargin').doublele('ShortUseMargin').doublele('ExchMargin').doublele('LongExchMargin').doublele('ShortExchMargin').doublele('CloseProfit').doublele('FrozenCommission').doublele('Commission').doublele('FrozenCash').doublele('CashIn').doublele('PositionProfit').doublele('OffsetAmount').doublele('LongOffsetAmount').doublele('ShortOffsetAmount').doublele('ExchOffsetAmount').doublele('LongExchOffsetAmount').doublele('ShortExchOffsetAmount').string('HedgeFlag', stropt(1)).string('ExchangeID', stropt(9)).string('InvestUnitID', stropt(17));
exports. CThostFtdcQueryCFMMCTradingAccountTokenFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).string('InvestUnitID', stropt(17));
exports. CThostFtdcCFMMCTradingAccountTokenFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('ParticipantID', stropt(11)).string('AccountID', stropt(13)).int32le('KeyID').skip(4).string('Token', stropt(21));
exports. CThostFtdcQryProductGroupFieldParser = () => new Parser().string('ProductID', stropt(31)).string('ExchangeID', stropt(9));
exports. CThostFtdcProductGroupFieldParser = () => new Parser().string('ProductID', stropt(31)).string('ExchangeID', stropt(9)).string('ProductGroupID', stropt(31));
exports. CThostFtdcBulletinFieldParser = () => new Parser().string('ExchangeID', stropt(9)).string('TradingDay', stropt(9)).int32le('BulletinID').skip(4).int32le('SequenceNo').skip(4).string('NewsType', stropt(3)).string('NewsUrgency', stropt(1)).string('SendTime', stropt(9)).string('Abstract', stropt(81)).string('ComeFrom', stropt(21)).string('Content', stropt(501)).string('URLLink', stropt(201)).string('MarketID', stropt(31));
exports. CThostFtdcQryBulletinFieldParser = () => new Parser().string('ExchangeID', stropt(9)).int32le('BulletinID').skip(4).int32le('SequenceNo').skip(4).string('NewsType', stropt(3)).string('NewsUrgency', stropt(1));
exports. CThostFtdcReqOpenAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('Gender', stropt(1)).string('CountryCode', stropt(21)).string('CustType', stropt(1)).string('Address', stropt(101)).string('ZipCode', stropt(7)).string('Telephone', stropt(41)).string('MobilePhone', stropt(21)).string('Fax', stropt(41)).string('EMail', stropt(41)).string('MoneyAccountStatus', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('InstallID').skip(4).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('CashExchangeCode', stropt(1)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).int32le('TID').skip(4).string('UserID', stropt(16)).string('LongCustomerName', stropt(161));
exports. CThostFtdcReqCancelAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('Gender', stropt(1)).string('CountryCode', stropt(21)).string('CustType', stropt(1)).string('Address', stropt(101)).string('ZipCode', stropt(7)).string('Telephone', stropt(41)).string('MobilePhone', stropt(21)).string('Fax', stropt(41)).string('EMail', stropt(41)).string('MoneyAccountStatus', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('InstallID').skip(4).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('CashExchangeCode', stropt(1)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).int32le('TID').skip(4).string('UserID', stropt(16)).string('LongCustomerName', stropt(161));
exports. CThostFtdcReqChangeAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('Gender', stropt(1)).string('CountryCode', stropt(21)).string('CustType', stropt(1)).string('Address', stropt(101)).string('ZipCode', stropt(7)).string('Telephone', stropt(41)).string('MobilePhone', stropt(21)).string('Fax', stropt(41)).string('EMail', stropt(41)).string('MoneyAccountStatus', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('NewBankAccount', stropt(41)).string('NewBankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).string('BankAccType', stropt(1)).int32le('InstallID').skip(4).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('BrokerIDByBank', stropt(33)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).int32le('TID').skip(4).string('Digest', stropt(36)).string('LongCustomerName', stropt(161));
exports. CThostFtdcReqTransferFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('InstallID').skip(4).int32le('FutureSerial').skip(4).string('UserID', stropt(16)).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).doublele('TradeAmount').doublele('FutureFetchAmount').string('FeePayFlag', stropt(1)).doublele('CustFee').doublele('BrokerFee').string('Message', stropt(129)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).int32le('RequestID').skip(4).int32le('TID').skip(4).string('TransferStatus', stropt(1)).string('LongCustomerName', stropt(161));
exports. CThostFtdcRspTransferFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('InstallID').skip(4).int32le('FutureSerial').skip(4).string('UserID', stropt(16)).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).doublele('TradeAmount').doublele('FutureFetchAmount').string('FeePayFlag', stropt(1)).doublele('CustFee').doublele('BrokerFee').string('Message', stropt(129)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).int32le('RequestID').skip(4).int32le('TID').skip(4).string('TransferStatus', stropt(1)).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81)).string('LongCustomerName', stropt(161));
exports. CThostFtdcReqRepealFieldParser = () => new Parser().int32le('RepealTimeInterval').skip(4).int32le('RepealedTimes').skip(4).string('BankRepealFlag', stropt(1)).string('BrokerRepealFlag', stropt(1)).int32le('PlateRepealSerial').skip(4).string('BankRepealSerial', stropt(13)).int32le('FutureRepealSerial').skip(4).string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('InstallID').skip(4).int32le('FutureSerial').skip(4).string('UserID', stropt(16)).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).doublele('TradeAmount').doublele('FutureFetchAmount').string('FeePayFlag', stropt(1)).doublele('CustFee').doublele('BrokerFee').string('Message', stropt(129)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).int32le('RequestID').skip(4).int32le('TID').skip(4).string('TransferStatus', stropt(1)).string('LongCustomerName', stropt(161));
exports. CThostFtdcRspRepealFieldParser = () => new Parser().int32le('RepealTimeInterval').skip(4).int32le('RepealedTimes').skip(4).string('BankRepealFlag', stropt(1)).string('BrokerRepealFlag', stropt(1)).int32le('PlateRepealSerial').skip(4).string('BankRepealSerial', stropt(13)).int32le('FutureRepealSerial').skip(4).string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('InstallID').skip(4).int32le('FutureSerial').skip(4).string('UserID', stropt(16)).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).doublele('TradeAmount').doublele('FutureFetchAmount').string('FeePayFlag', stropt(1)).doublele('CustFee').doublele('BrokerFee').string('Message', stropt(129)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).int32le('RequestID').skip(4).int32le('TID').skip(4).string('TransferStatus', stropt(1)).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81)).string('LongCustomerName', stropt(161));
exports. CThostFtdcReqQueryAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('FutureSerial').skip(4).int32le('InstallID').skip(4).string('UserID', stropt(16)).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).int32le('RequestID').skip(4).int32le('TID').skip(4).string('LongCustomerName', stropt(161));
exports. CThostFtdcRspQueryAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('FutureSerial').skip(4).int32le('InstallID').skip(4).string('UserID', stropt(16)).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).int32le('RequestID').skip(4).int32le('TID').skip(4).doublele('BankUseAmount').doublele('BankFetchAmount').string('LongCustomerName', stropt(161));
exports. CThostFtdcFutureSignIOFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).int32le('InstallID').skip(4).string('UserID', stropt(16)).string('Digest', stropt(36)).string('CurrencyID', stropt(4)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).int32le('RequestID').skip(4).int32le('TID').skip(4);
exports. CThostFtdcRspFutureSignInFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).int32le('InstallID').skip(4).string('UserID', stropt(16)).string('Digest', stropt(36)).string('CurrencyID', stropt(4)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).int32le('RequestID').skip(4).int32le('TID').skip(4).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81)).string('PinKey', stropt(129)).string('MacKey', stropt(129));
exports. CThostFtdcReqFutureSignOutFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).int32le('InstallID').skip(4).string('UserID', stropt(16)).string('Digest', stropt(36)).string('CurrencyID', stropt(4)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).int32le('RequestID').skip(4).int32le('TID').skip(4);
exports. CThostFtdcRspFutureSignOutFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).int32le('InstallID').skip(4).string('UserID', stropt(16)).string('Digest', stropt(36)).string('CurrencyID', stropt(4)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).int32le('RequestID').skip(4).int32le('TID').skip(4).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81));
exports. CThostFtdcReqQueryTradeResultBySerialFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).int32le('Reference').skip(4).string('RefrenceIssureType', stropt(1)).string('RefrenceIssure', stropt(36)).string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).string('CurrencyID', stropt(4)).doublele('TradeAmount').string('Digest', stropt(36)).string('LongCustomerName', stropt(161));
exports. CThostFtdcRspQueryTradeResultBySerialFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81)).int32le('Reference').skip(4).string('RefrenceIssureType', stropt(1)).string('RefrenceIssure', stropt(36)).string('OriginReturnCode', stropt(7)).string('OriginDescrInfoForReturnCode', stropt(129)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).string('CurrencyID', stropt(4)).doublele('TradeAmount').string('Digest', stropt(36));
exports. CThostFtdcReqDayEndFileReadyFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('FileBusinessCode', stropt(1)).string('Digest', stropt(36));
exports. CThostFtdcReturnResultFieldParser = () => new Parser().string('ReturnCode', stropt(7)).string('DescrInfoForReturnCode', stropt(129));
exports. CThostFtdcVerifyFuturePasswordFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('AccountID', stropt(13)).string('Password', stropt(41)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).int32le('InstallID').skip(4).int32le('TID').skip(4).string('CurrencyID', stropt(4));
exports. CThostFtdcVerifyCustInfoFieldParser = () => new Parser().string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('LongCustomerName', stropt(161));
exports. CThostFtdcVerifyFuturePasswordAndCustInfoFieldParser = () => new Parser().string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('AccountID', stropt(13)).string('Password', stropt(41)).string('CurrencyID', stropt(4)).string('LongCustomerName', stropt(161));
exports. CThostFtdcDepositResultInformFieldParser = () => new Parser().string('DepositSeqNo', stropt(15)).string('BrokerID', stropt(11)).string('InvestorID', stropt(13)).doublele('Deposit').int32le('RequestID').skip(4).string('ReturnCode', stropt(7)).string('DescrInfoForReturnCode', stropt(129));
exports. CThostFtdcReqSyncKeyFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).int32le('InstallID').skip(4).string('UserID', stropt(16)).string('Message', stropt(129)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).int32le('RequestID').skip(4).int32le('TID').skip(4);
exports. CThostFtdcRspSyncKeyFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).int32le('InstallID').skip(4).string('UserID', stropt(16)).string('Message', stropt(129)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).int32le('RequestID').skip(4).int32le('TID').skip(4).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81));
exports. CThostFtdcNotifyQueryAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustType', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('FutureSerial').skip(4).int32le('InstallID').skip(4).string('UserID', stropt(16)).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).int32le('RequestID').skip(4).int32le('TID').skip(4).doublele('BankUseAmount').doublele('BankFetchAmount').int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81)).string('LongCustomerName', stropt(161));
exports. CThostFtdcTransferSerialFieldParser = () => new Parser().int32le('PlateSerial').skip(4).string('TradeDate', stropt(9)).string('TradingDay', stropt(9)).string('TradeTime', stropt(9)).string('TradeCode', stropt(7)).int32le('SessionID').skip(4).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BankAccType', stropt(1)).string('BankAccount', stropt(41)).string('BankSerial', stropt(13)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('FutureAccType', stropt(1)).string('AccountID', stropt(13)).string('InvestorID', stropt(13)).int32le('FutureSerial').skip(4).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CurrencyID', stropt(4)).doublele('TradeAmount').doublele('CustFee').doublele('BrokerFee').string('AvailabilityFlag', stropt(1)).string('OperatorCode', stropt(17)).string('BankNewAccount', stropt(41)).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81));
exports. CThostFtdcQryTransferSerialFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).string('BankID', stropt(4)).string('CurrencyID', stropt(4));
exports. CThostFtdcNotifyFutureSignInFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).int32le('InstallID').skip(4).string('UserID', stropt(16)).string('Digest', stropt(36)).string('CurrencyID', stropt(4)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).int32le('RequestID').skip(4).int32le('TID').skip(4).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81)).string('PinKey', stropt(129)).string('MacKey', stropt(129));
exports. CThostFtdcNotifyFutureSignOutFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).int32le('InstallID').skip(4).string('UserID', stropt(16)).string('Digest', stropt(36)).string('CurrencyID', stropt(4)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).int32le('RequestID').skip(4).int32le('TID').skip(4).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81));
exports. CThostFtdcNotifySyncKeyFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).int32le('InstallID').skip(4).string('UserID', stropt(16)).string('Message', stropt(129)).string('DeviceID', stropt(3)).string('BrokerIDByBank', stropt(33)).string('OperNo', stropt(17)).int32le('RequestID').skip(4).int32le('TID').skip(4).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81));
exports. CThostFtdcQryAccountregisterFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('CurrencyID', stropt(4));
exports. CThostFtdcAccountregisterFieldParser = () => new Parser().string('TradeDay', stropt(9)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BankAccount', stropt(41)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('AccountID', stropt(13)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('CustomerName', stropt(51)).string('CurrencyID', stropt(4)).string('OpenOrDestroy', stropt(1)).string('RegDate', stropt(9)).string('OutDate', stropt(9)).int32le('TID').skip(4).string('CustType', stropt(1)).string('BankAccType', stropt(1)).string('LongCustomerName', stropt(161));
exports. CThostFtdcOpenAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('Gender', stropt(1)).string('CountryCode', stropt(21)).string('CustType', stropt(1)).string('Address', stropt(101)).string('ZipCode', stropt(7)).string('Telephone', stropt(41)).string('MobilePhone', stropt(21)).string('Fax', stropt(41)).string('EMail', stropt(41)).string('MoneyAccountStatus', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('InstallID').skip(4).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('CashExchangeCode', stropt(1)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).int32le('TID').skip(4).string('UserID', stropt(16)).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81)).string('LongCustomerName', stropt(161));
exports. CThostFtdcCancelAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('Gender', stropt(1)).string('CountryCode', stropt(21)).string('CustType', stropt(1)).string('Address', stropt(101)).string('ZipCode', stropt(7)).string('Telephone', stropt(41)).string('MobilePhone', stropt(21)).string('Fax', stropt(41)).string('EMail', stropt(41)).string('MoneyAccountStatus', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).int32le('InstallID').skip(4).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('CashExchangeCode', stropt(1)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('DeviceID', stropt(3)).string('BankSecuAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).string('BankSecuAcc', stropt(41)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).string('OperNo', stropt(17)).int32le('TID').skip(4).string('UserID', stropt(16)).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81)).string('LongCustomerName', stropt(161));
exports. CThostFtdcChangeAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('CustomerName', stropt(51)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('Gender', stropt(1)).string('CountryCode', stropt(21)).string('CustType', stropt(1)).string('Address', stropt(101)).string('ZipCode', stropt(7)).string('Telephone', stropt(41)).string('MobilePhone', stropt(21)).string('Fax', stropt(41)).string('EMail', stropt(41)).string('MoneyAccountStatus', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).string('NewBankAccount', stropt(41)).string('NewBankPassWord', stropt(41)).string('AccountID', stropt(13)).string('Password', stropt(41)).string('BankAccType', stropt(1)).int32le('InstallID').skip(4).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('BrokerIDByBank', stropt(33)).string('BankPwdFlag', stropt(1)).string('SecuPwdFlag', stropt(1)).int32le('TID').skip(4).string('Digest', stropt(36)).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81)).string('LongCustomerName', stropt(161));
exports. CThostFtdcSecAgentACIDMapFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4)).string('BrokerSecAgentID', stropt(13));
exports. CThostFtdcQrySecAgentACIDMapFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('AccountID', stropt(13)).string('CurrencyID', stropt(4));
exports. CThostFtdcUserRightsAssignFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).int32le('DRIdentityID').skip(4);
exports. CThostFtdcBrokerUserRightAssignFieldParser = () => new Parser().string('BrokerID', stropt(11)).int32le('DRIdentityID').skip(4).int32le('Tradeable').skip(4);
exports. CThostFtdcDRTransferFieldParser = () => new Parser().int32le('OrigDRIdentityID').skip(4).int32le('DestDRIdentityID').skip(4).string('OrigBrokerID', stropt(11)).string('DestBrokerID', stropt(11));
exports. CThostFtdcFensUserInfoFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('LoginMode', stropt(1));
exports. CThostFtdcCurrTransferIdentityFieldParser = () => new Parser().int32le('IdentityID').skip(4);
exports. CThostFtdcLoginForbiddenUserFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('IPAddress', stropt(16));
exports. CThostFtdcQryLoginForbiddenUserFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports. CThostFtdcMulticastGroupInfoFieldParser = () => new Parser().string('GroupIP', stropt(16)).int32le('GroupPort').skip(4).string('SourceIP', stropt(16));
exports. CThostFtdcTradingAccountReserveFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).doublele('Reserve').string('CurrencyID', stropt(4));
exports. CThostFtdcQryLoginForbiddenIPFieldParser = () => new Parser().string('IPAddress', stropt(16));
exports. CThostFtdcQryIPListFieldParser = () => new Parser().string('IPAddress', stropt(16));
exports. CThostFtdcQryUserRightsAssignFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports. CThostFtdcReserveOpenAccountConfirmFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('CustomerName', stropt(161)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('Gender', stropt(1)).string('CountryCode', stropt(21)).string('CustType', stropt(1)).string('Address', stropt(101)).string('ZipCode', stropt(7)).string('Telephone', stropt(41)).string('MobilePhone', stropt(21)).string('Fax', stropt(41)).string('EMail', stropt(41)).string('MoneyAccountStatus', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).int32le('InstallID').skip(4).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).int32le('TID').skip(4).string('AccountID', stropt(13)).string('Password', stropt(41)).string('BankReserveOpenSeq', stropt(13)).string('BookDate', stropt(9)).string('BookPsw', stropt(41)).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81));
exports. CThostFtdcReserveOpenAccountFieldParser = () => new Parser().string('TradeCode', stropt(7)).string('BankID', stropt(4)).string('BankBranchID', stropt(5)).string('BrokerID', stropt(11)).string('BrokerBranchID', stropt(31)).string('TradeDate', stropt(9)).string('TradeTime', stropt(9)).string('BankSerial', stropt(13)).string('TradingDay', stropt(9)).int32le('PlateSerial').skip(4).string('LastFragment', stropt(1)).int32le('SessionID').skip(4).string('CustomerName', stropt(161)).string('IdCardType', stropt(1)).string('IdentifiedCardNo', stropt(51)).string('Gender', stropt(1)).string('CountryCode', stropt(21)).string('CustType', stropt(1)).string('Address', stropt(101)).string('ZipCode', stropt(7)).string('Telephone', stropt(41)).string('MobilePhone', stropt(21)).string('Fax', stropt(41)).string('EMail', stropt(41)).string('MoneyAccountStatus', stropt(1)).string('BankAccount', stropt(41)).string('BankPassWord', stropt(41)).int32le('InstallID').skip(4).string('VerifyCertNoFlag', stropt(1)).string('CurrencyID', stropt(4)).string('Digest', stropt(36)).string('BankAccType', stropt(1)).string('BrokerIDByBank', stropt(33)).int32le('TID').skip(4).string('ReserveOpenAccStas', stropt(1)).int32le('ErrorID').skip(4).string('ErrorMsg', stropt(81));
exports. CThostFtdcAccountPropertyFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('AccountID', stropt(13)).string('BankID', stropt(4)).string('BankAccount', stropt(41)).string('OpenName', stropt(101)).string('OpenBank', stropt(101)).int32le('IsActive').skip(4).string('AccountSourceType', stropt(1)).string('OpenDate', stropt(9)).string('CancelDate', stropt(9)).string('OperatorID', stropt(65)).string('OperateDate', stropt(9)).string('OperateTime', stropt(9)).string('CurrencyID', stropt(4));
exports. CThostFtdcQryCurrDRIdentityFieldParser = () => new Parser().int32le('DRIdentityID').skip(4);
exports. CThostFtdcCurrDRIdentityFieldParser = () => new Parser().int32le('DRIdentityID').skip(4);
exports. CThostFtdcQrySecAgentCheckModeFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('InvestorID', stropt(13));
exports. CThostFtdcQrySecAgentTradeInfoFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('BrokerSecAgentID', stropt(13));
exports. CThostFtdcUserSystemInfoFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).int32le('ClientSystemInfoLen').skip(4).string('ClientSystemInfo', stropt(273)).string('ClientPublicIP', stropt(16)).int32le('ClientIPPort').skip(4).string('ClientLoginTime', stropt(9)).string('ClientAppID', stropt(33));
exports. CThostFtdcReqUserAuthMethodFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports. CThostFtdcRspUserAuthMethodFieldParser = () => new Parser().int32le('UsableAuthMethod').skip(4);
exports. CThostFtdcReqGenUserCaptchaFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports. CThostFtdcRspGenUserCaptchaFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).int32le('CaptchaInfoLen').skip(4).string('CaptchaInfo', stropt(2561));
exports. CThostFtdcReqGenUserTextFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16));
exports. CThostFtdcRspGenUserTextFieldParser = () => new Parser().int32le('UserTextSeq').skip(4);
exports. CThostFtdcReqUserLoginWithCaptchaFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('Password', stropt(41)).string('UserProductInfo', stropt(11)).string('InterfaceProductInfo', stropt(11)).string('ProtocolInfo', stropt(11)).string('MacAddress', stropt(21)).string('ClientIPAddress', stropt(16)).string('LoginRemark', stropt(36)).string('Captcha', stropt(41)).int32le('ClientIPPort').skip(4);
exports. CThostFtdcReqUserLoginWithTextFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('Password', stropt(41)).string('UserProductInfo', stropt(11)).string('InterfaceProductInfo', stropt(11)).string('ProtocolInfo', stropt(11)).string('MacAddress', stropt(21)).string('ClientIPAddress', stropt(16)).string('LoginRemark', stropt(36)).string('Text', stropt(41)).int32le('ClientIPPort').skip(4);
exports. CThostFtdcReqUserLoginWithOTPFieldParser = () => new Parser().string('TradingDay', stropt(9)).string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('Password', stropt(41)).string('UserProductInfo', stropt(11)).string('InterfaceProductInfo', stropt(11)).string('ProtocolInfo', stropt(11)).string('MacAddress', stropt(21)).string('ClientIPAddress', stropt(16)).string('LoginRemark', stropt(36)).string('OTPPassword', stropt(41)).int32le('ClientIPPort').skip(4);
exports. CThostFtdcReqApiHandshakeFieldParser = () => new Parser().string('CryptoKeyVersion', stropt(31));
exports. CThostFtdcRspApiHandshakeFieldParser = () => new Parser().int32le('FrontHandshakeDataLen').skip(4).string('FrontHandshakeData', stropt(301)).int32le('IsApiAuthEnabled').skip(4);
exports. CThostFtdcReqVerifyApiKeyFieldParser = () => new Parser().int32le('ApiHandshakeDataLen').skip(4).string('ApiHandshakeData', stropt(301));
exports. CThostFtdcDepartmentUserFieldParser = () => new Parser().string('BrokerID', stropt(11)).string('UserID', stropt(16)).string('InvestorRange', stropt(1)).string('InvestorID', stropt(13));
exports. CThostFtdcQueryFreqFieldParser = () => new Parser().int32le('QueryFreq').skip(4);
